{
  AbstractConfiguration.ConfigurationProperty shouldRunProperty=LiquibaseConfiguration.getInstance().getConfiguration(GlobalConfiguration.class).getProperty(GlobalConfiguration.SHOULD_RUN);
  if (!shouldRunProperty.getValue(Boolean.class)) {
    LogFactory.getLogger().info("Liquibase did not run because " + LiquibaseConfiguration.getInstance().describeDefaultLookup(shouldRunProperty) + " was set to false");
    return;
  }
  if (!shouldRun) {
    LogFactory.getLogger().info("Liquibase did not run because 'shouldRun' " + "property was set to false on " + getBeanName() + " Liquibase Spring bean.");
    return;
  }
  Connection c=null;
  Liquibase liquibase=null;
  try {
    c=getDataSource().getConnection();
    liquibase=createLiquibase(c);
    generateRollbackFile(liquibase);
    performUpdate(liquibase);
  }
 catch (  SQLException e) {
    throw new DatabaseException(e);
  }
 finally {
    if (c != null) {
      try {
        if (!c.getAutoCommit()) {
          c.rollback();
        }
      }
 catch (      SQLException e) {
      }
      try {
        c.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}
