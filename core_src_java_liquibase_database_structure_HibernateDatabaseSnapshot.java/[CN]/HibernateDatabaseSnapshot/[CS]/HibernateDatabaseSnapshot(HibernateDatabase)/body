{
  try {
    Configuration cfg=new Configuration();
    cfg.configure(database.getConfigFile());
    this.database=database;
    Dialect dialect=(Dialect)Class.forName(cfg.getProperty("dialect")).newInstance();
    Mapping mapping=cfg.buildMapping();
    Iterator tableMappings=cfg.getTableMappings();
    while (tableMappings.hasNext()) {
      org.hibernate.mapping.Table hibernateTable=(org.hibernate.mapping.Table)tableMappings.next();
      if (hibernateTable.isPhysicalTable()) {
        Table table=new Table(hibernateTable.getName());
        System.out.println("seen table " + table.getName());
        tablesMap.put(table.getName(),table);
        Iterator columnIterator=hibernateTable.getColumnIterator();
        while (columnIterator.hasNext()) {
          org.hibernate.mapping.Column hibernateColumn=(org.hibernate.mapping.Column)columnIterator.next();
          Column column=new Column();
          column.setName(hibernateColumn.getName());
          column.setColumnSize(hibernateColumn.getLength());
          column.setDataType(hibernateColumn.getSqlTypeCode(mapping));
          column.setDecimalDigits(hibernateColumn.getPrecision());
          column.setDefaultValue(hibernateColumn.getDefaultValue());
          column.setNullable(hibernateColumn.isNullable());
          column.setPrimaryKey(isPrimaryKey(hibernateTable,hibernateColumn));
          column.setTable(table);
          column.setTypeName(hibernateColumn.getSqlType(dialect,mapping));
          column.setUnique(hibernateColumn.isUnique());
          columnsMap.put(table.getName() + "." + column.getName(),column);
          table.getColumns().add(column);
        }
        Iterator indexIterator=hibernateTable.getIndexIterator();
        while (indexIterator.hasNext()) {
          org.hibernate.mapping.Index hibernateIndex=(org.hibernate.mapping.Index)indexIterator.next();
          Index index=new Index();
          index.setTable(table);
          index.setName(hibernateIndex.getName());
          columnIterator=hibernateIndex.getColumnIterator();
          while (columnIterator.hasNext()) {
            org.hibernate.mapping.Column hibernateColumn=(org.hibernate.mapping.Column)columnIterator.next();
            index.getColumns().add(hibernateColumn.getName());
          }
          indexes.add(index);
        }
      }
    }
    tableMappings=cfg.getTableMappings();
    while (tableMappings.hasNext()) {
      org.hibernate.mapping.Table hibernateTable=(org.hibernate.mapping.Table)tableMappings.next();
      if (hibernateTable.isPhysicalTable()) {
        Iterator fkIterator=hibernateTable.getForeignKeyIterator();
        while (fkIterator.hasNext()) {
          org.hibernate.mapping.ForeignKey hibernateForeignKey=(org.hibernate.mapping.ForeignKey)fkIterator.next();
          if (hibernateForeignKey.getTable() != null && hibernateForeignKey.getReferencedTable() != null && hibernateForeignKey.isPhysicalConstraint()) {
            ForeignKey fk=new ForeignKey();
            fk.setName(hibernateForeignKey.getName());
            fk.setForeignKeyTable(tablesMap.get(hibernateForeignKey.getTable().getName()));
            fk.setForeignKeyColumns(StringUtils.join((Collection<String>)hibernateForeignKey.getColumns(),", "));
            fk.setForeignKeyTable(tablesMap.get(hibernateForeignKey.getReferencedTable().getName()));
            fk.setForeignKeyColumns(StringUtils.join((Collection<String>)hibernateForeignKey.getReferencedColumns(),", "));
            foreignKeys.add(fk);
          }
        }
      }
    }
    this.tables=new HashSet<Table>(tablesMap.values());
    this.columns=new HashSet<Column>(columnsMap.values());
  }
 catch (  Exception e) {
    throw new JDBCException(e);
  }
}
