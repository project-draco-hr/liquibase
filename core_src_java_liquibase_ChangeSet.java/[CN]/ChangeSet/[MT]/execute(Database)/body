{
  try {
    database.getJdbcTemplate().comment("Changeset " + toString());
    if (StringUtils.trimToNull(getComments()) != null) {
      String comments=getComments();
      String[] lines=comments.split("\n");
      for (int i=0; i < lines.length; i++) {
        if (i > 0) {
          lines[i]=database.getLineComment() + " " + lines[i];
        }
      }
      database.getJdbcTemplate().comment(StringUtils.join(Arrays.asList(lines),"\n"));
    }
    if (database.getJdbcTemplate().executesStatements() && rootPrecondition != null) {
      try {
        rootPrecondition.check(database,null);
      }
 catch (      PreconditionFailedException e) {
        StringBuffer message=new StringBuffer();
        message.append(StreamUtil.getLineSeparator());
        for (        FailedPrecondition invalid : e.getFailedPreconditions()) {
          message.append("          ").append(invalid.toString());
          message.append(StreamUtil.getLineSeparator());
        }
        throw new MigrationFailedException(this,message.toString());
      }
    }
    for (    Change change : changes) {
      try {
        change.setUp();
      }
 catch (      SetupException se) {
        throw new MigrationFailedException(this,se);
      }
    }
    log.finest("Reading ChangeSet: " + toString());
    for (    Change change : getChanges()) {
      change.executeStatements(database);
      log.finest(change.getConfirmationMessage());
    }
    database.commit();
    log.finest("ChangeSet " + toString() + " has been successfully ran.");
    database.commit();
  }
 catch (  Exception e) {
    try {
      database.rollback();
    }
 catch (    Exception e1) {
      throw new MigrationFailedException(this,e);
    }
    if (getFailOnError() != null && !getFailOnError()) {
      log.log(Level.INFO,"Change set " + toString(false) + " failed, but failOnError was false",e);
    }
 else {
      if (e instanceof MigrationFailedException) {
        throw ((MigrationFailedException)e);
      }
 else {
        throw new MigrationFailedException(this,e);
      }
    }
  }
}
