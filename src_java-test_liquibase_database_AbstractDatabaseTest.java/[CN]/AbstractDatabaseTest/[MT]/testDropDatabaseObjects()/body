{
  Connection connection=createMock(Connection.class);
  DatabaseMetaData metaData=createMock(DatabaseMetaData.class);
  expect(connection.getMetaData()).andReturn(metaData).atLeastOnce();
  ResultSet tableResultSet=createMock(ResultSet.class);
  expect(tableResultSet.next()).andReturn(Boolean.TRUE);
  expect(tableResultSet.next()).andReturn(Boolean.TRUE);
  expect(tableResultSet.next()).andReturn(Boolean.TRUE);
  expect(tableResultSet.next()).andReturn(Boolean.FALSE);
  expect(tableResultSet.getString("TABLE_NAME")).andReturn("tableA");
  expect(tableResultSet.getString("TABLE_TYPE")).andReturn("TABLE");
  expect(tableResultSet.getString("TABLE_NAME")).andReturn("tableB");
  expect(tableResultSet.getString("TABLE_TYPE")).andReturn("TABLE");
  expect(tableResultSet.getString("TABLE_NAME")).andReturn("tableC");
  expect(tableResultSet.getString("TABLE_TYPE")).andReturn("TABLE");
  tableResultSet.close();
  expectLastCall().atLeastOnce();
  replay(tableResultSet);
  expect(metaData.getUserName()).andReturn("SCHEMA");
  expect(metaData.getTables((String)isNull(),eq("SCHEMA"),(String)isNull(),aryEq(new String[]{"TABLE","VIEW","GLOBAL TEMPORARY","LOCAL TEMPORARY","ALIAS","SYNONYM"}))).andReturn(tableResultSet);
  Statement statement=createMock(Statement.class);
  expect(connection.createStatement()).andReturn(statement).atLeastOnce();
  expect(statement.executeUpdate("DROP TABLE tableA CASCADE CONSTRAINTS")).andStubReturn(-1);
  statement.close();
  expectLastCall().atLeastOnce();
  expect(statement.executeUpdate("DROP TABLE tableB CASCADE CONSTRAINTS")).andStubReturn(-1);
  expect(statement.executeUpdate("DROP TABLE tableC CASCADE CONSTRAINTS")).andStubReturn(-1);
  ResultSet sequenceRS=createMock(ResultSet.class);
  expect(statement.executeQuery("SELECT SEQUENCE_NAME FROM USER_SEQUENCES")).andReturn(sequenceRS);
  expect(sequenceRS.next()).andReturn(Boolean.TRUE);
  expect(sequenceRS.next()).andReturn(Boolean.TRUE);
  expect(sequenceRS.next()).andReturn(Boolean.TRUE);
  expect(sequenceRS.next()).andReturn(Boolean.FALSE);
  expect(sequenceRS.getString("SEQUENCE_NAME")).andReturn("sequenceA");
  expect(sequenceRS.getString("SEQUENCE_NAME")).andReturn("sequenceB");
  expect(sequenceRS.getString("SEQUENCE_NAME")).andReturn("sequenceC");
  sequenceRS.close();
  expectLastCall().atLeastOnce();
  replay(sequenceRS);
  expect(statement.executeUpdate("DROP SEQUENCE sequenceA")).andStubReturn(-1);
  expect(statement.executeUpdate("DROP SEQUENCE sequenceB")).andStubReturn(-1);
  expect(statement.executeUpdate("DROP SEQUENCE sequenceC")).andStubReturn(-1);
  connection.commit();
  expectLastCall().atLeastOnce();
  replay(statement);
  replay(connection);
  replay(metaData);
  AbstractDatabase database=getDatabase();
  database.setConnection(connection);
  database.dropDatabaseObjects();
  verify(connection);
  verify(metaData);
  verify(tableResultSet);
}
