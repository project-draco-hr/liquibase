{
  if (rawValue == null) {
    return null;
  }
  if (type.isAssignableFrom(rawValue.getClass())) {
    return (T)rawValue;
  }
  try {
    if (type.equals(String.class)) {
      return (T)rawValue.toString();
    }
 else     if (type.equals(Integer.class)) {
      return (T)Integer.valueOf(rawValue.toString());
    }
 else     if (type.equals(Float.class)) {
      return (T)Float.valueOf(rawValue.toString());
    }
 else     if (type.equals(Double.class)) {
      return (T)Double.valueOf(rawValue.toString());
    }
 else     if (type.equals(Long.class)) {
      return (T)Long.valueOf(rawValue.toString());
    }
 else     if (type.equals(BigInteger.class)) {
      return (T)new BigInteger(rawValue.toString());
    }
 else     if (type.equals(Boolean.class) && rawValue instanceof String) {
      return (T)Boolean.valueOf(rawValue.toString());
    }
 else     if (type.isAssignableFrom(Date.class)) {
      return (T)new ISODateFormat().parse(rawValue.toString());
    }
 else     if (type.equals(SequenceNextValueFunction.class)) {
      return (T)new SequenceNextValueFunction(rawValue.toString());
    }
 else     if (type.equals(SequenceCurrentValueFunction.class)) {
      return (T)new SequenceCurrentValueFunction(rawValue.toString());
    }
 else     if (type.equals(DatabaseFunction.class)) {
      return (T)new DatabaseFunction(rawValue.toString());
    }
 else {
      throw new UnexpectedLiquibaseException("Cannot convert " + rawValue.getClass().getName() + " '"+ rawValue+ "' to "+ type.getName());
    }
  }
 catch (  Throwable e) {
    if (e instanceof UnexpectedLiquibaseException) {
      throw (UnexpectedLiquibaseException)e;
    }
    throw new ParsedNodeException(e);
  }
}
