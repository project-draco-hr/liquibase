{
  if (database instanceof MSSQLDatabase && userDefinedTypes == null) {
    userDefinedTypes=new HashSet<String>();
    DatabaseConnection databaseConnection=database.getConnection();
    if (databaseConnection instanceof JdbcConnection) {
      Statement stmt=null;
      ResultSet resultSet=null;
      try {
        stmt=((JdbcConnection)databaseConnection).getUnderlyingConnection().createStatement();
        resultSet=stmt.executeQuery("select name from sys.types where is_user_defined=1");
        while (resultSet.next()) {
          userDefinedTypes.add(resultSet.getString("name").toLowerCase());
        }
      }
  finally {
        JdbcUtils.close(resultSet,stmt);
      }
    }
  }
  return getResultSetCache("getColumns").get(new ResultSetCache.SingleResultSetExtractor(database){
    @Override public ResultSetCache.RowData rowKeyParameters(    CachedRow row){
      return new ResultSetCache.RowData(row.getString("TABLE_CAT"),row.getString("TABLE_SCHEM"),database,row.getString("TABLE_NAME"),row.getString("COLUMN_NAME"));
    }
    @Override public ResultSetCache.RowData wantedKeyParameters(){
      return new ResultSetCache.RowData(catalogName,schemaName,database,tableName,columnName);
    }
    @Override boolean shouldBulkSelect(    String schemaKey,    ResultSetCache resultSetCache){
      if (tableName.equalsIgnoreCase(database.getDatabaseChangeLogTableName()) || tableName.equalsIgnoreCase(database.getDatabaseChangeLogLockTableName())) {
        return false;
      }
      return true;
    }
    @Override public List<CachedRow> fastFetchQuery() throws SQLException, DatabaseException {
      if (database instanceof OracleDatabase) {
        return oracleQuery(false);
      }
      CatalogAndSchema catalogAndSchema=new CatalogAndSchema(catalogName,schemaName).customize(database);
      try {
        return extract(databaseMetaData.getColumns(((AbstractJdbcDatabase)database).getJdbcCatalogName(catalogAndSchema),((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema),tableName,columnName));
      }
 catch (      SQLException e) {
        if (shouldReturnEmptyColumns(e)) {
          return new ArrayList<CachedRow>();
        }
 else {
          throw e;
        }
      }
    }
    @Override public List<CachedRow> bulkFetchQuery() throws SQLException, DatabaseException {
      if (database instanceof OracleDatabase) {
        return oracleQuery(true);
      }
      CatalogAndSchema catalogAndSchema=new CatalogAndSchema(catalogName,schemaName).customize(database);
      try {
        return extract(databaseMetaData.getColumns(((AbstractJdbcDatabase)database).getJdbcCatalogName(catalogAndSchema),((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema),null,null));
      }
 catch (      SQLException e) {
        if (shouldReturnEmptyColumns(e)) {
          return new ArrayList<CachedRow>();
        }
 else {
          throw e;
        }
      }
    }
    protected boolean shouldReturnEmptyColumns(    SQLException e){
      return e.getMessage().contains("references invalid table");
    }
    protected List<CachedRow> oracleQuery(    boolean bulk) throws DatabaseException, SQLException {
      CatalogAndSchema catalogAndSchema=new CatalogAndSchema(catalogName,schemaName).customize(database);
      String sql="select NULL AS TABLE_CAT, OWNER AS TABLE_SCHEM, 'NO' as IS_AUTOINCREMENT, cc.COMMENTS AS REMARKS, " + "OWNER, TABLE_NAME, COLUMN_NAME, DATA_TYPE, DATA_TYPE_MOD, DATA_TYPE_OWNER, " + "DECODE( CHAR_USED, 'C',CHAR_LENGTH, DATA_LENGTH ) as DATA_LENGTH, "+ "DATA_PRECISION, DATA_SCALE, NULLABLE, COLUMN_ID as ORDINAL_POSITION, DEFAULT_LENGTH, "+ "DATA_DEFAULT, "+ "NUM_BUCKETS, CHARACTER_SET_NAME, "+ "CHAR_COL_DECL_LENGTH, CHAR_LENGTH, "+ "CHAR_USED, VIRTUAL_COLUMN "+ "FROM ALL_TAB_COLS c "+ "JOIN ALL_COL_COMMENTS cc USING ( OWNER, TABLE_NAME, COLUMN_NAME ) "+ "WHERE OWNER='" + ((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema) + "' AND hidden_column='NO'";
      if (!bulk) {
        if (tableName != null) {
          sql+=" AND TABLE_NAME='" + database.escapeObjectName(tableName,Table.class) + "'";
        }
        if (columnName != null) {
          sql+=" AND COLUMN_NAME='" + database.escapeObjectName(columnName,Column.class) + "'";
        }
      }
      sql+=" ORDER BY OWNER, TABLE_NAME, c.COLUMN_ID";
      return this.executeAndExtract(sql,database);
    }
    @Override protected List<CachedRow> extract(    ResultSet resultSet,    boolean informixIndexTrimHint) throws SQLException {
      List<CachedRow> rows=super.extract(resultSet,informixIndexTrimHint);
      if (database instanceof MSSQLDatabase && userDefinedTypes.size() > 0) {
        for (        CachedRow row : rows) {
          String dataType=(String)row.get("TYPE_NAME");
          if (userDefinedTypes.contains(dataType.toLowerCase())) {
            row.set("COLUMN_SIZE",null);
            row.set("DECIMAL_DIGITS ",null);
          }
        }
      }
      return rows;
    }
  }
);
}
