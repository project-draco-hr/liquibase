{
  return getResultSetCache("getColumns").get(new ResultSetCache.SingleResultSetExtractor(database){
    @Override public ResultSetCache.RowData rowKeyParameters(    CachedRow row){
      return new ResultSetCache.RowData(row.getString("TABLE_CAT"),row.getString("TABLE_SCHEM"),database,row.getString("TABLE_NAME"),row.getString("COLUMN_NAME"));
    }
    @Override public ResultSetCache.RowData wantedKeyParameters(){
      return new ResultSetCache.RowData(catalogName,schemaName,database,tableName,columnName);
    }
    @Override boolean shouldBulkSelect(    ResultSetCache resultSetCache){
      Set<String> seenTables=resultSetCache.getInfo("seenTables",Set.class);
      if (seenTables == null) {
        seenTables=new HashSet<String>();
        resultSetCache.putInfo("seenTables",seenTables);
      }
      seenTables.add(catalogName + ":" + schemaName+ ":"+ tableName);
      return seenTables.size() > 2;
    }
    @Override public List<CachedRow> fastFetchQuery() throws SQLException, DatabaseException {
      if (database instanceof OracleDatabase) {
        return oracleQuery(false);
      }
      CatalogAndSchema catalogAndSchema=database.correctSchema(new CatalogAndSchema(catalogName,schemaName));
      return extract(databaseMetaData.getColumns(((AbstractJdbcDatabase)database).getJdbcCatalogName(catalogAndSchema),((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema),tableName,columnName));
    }
    @Override public List<CachedRow> bulkFetchQuery() throws SQLException, DatabaseException {
      if (database instanceof OracleDatabase) {
        return oracleQuery(true);
      }
      CatalogAndSchema catalogAndSchema=database.correctSchema(new CatalogAndSchema(catalogName,schemaName));
      return extract(databaseMetaData.getColumns(((AbstractJdbcDatabase)database).getJdbcCatalogName(catalogAndSchema),((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema),null,null));
    }
    protected List<CachedRow> oracleQuery(    boolean bulk) throws DatabaseException, SQLException {
      CatalogAndSchema catalogAndSchema=database.correctSchema(new CatalogAndSchema(catalogName,schemaName));
      String sql="select NULL AS TABLE_CAT, ALL_TAB_COLUMNS.OWNER AS TABLE_SCHEM, 'NO' as IS_AUTOINCREMENT, ALL_COL_COMMENTS.COMMENTS AS REMARKS, ALL_TAB_COLUMNS.* FROM ALL_TAB_COLUMNS, ALL_COL_COMMENTS " + "WHERE ALL_COL_COMMENTS.OWNER=ALL_TAB_COLUMNS.OWNER " + "AND ALL_COL_COMMENTS.TABLE_NAME=ALL_TAB_COLUMNS.TABLE_NAME "+ "AND ALL_COL_COMMENTS.COLUMN_NAME=ALL_TAB_COLUMNS.COLUMN_NAME "+ "AND ALL_TAB_COLUMNS.OWNER='" + ((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema) + "'";
      if (!bulk) {
        if (tableName != null) {
          sql+=" AND ALL_TAB_COLUMNS.TABLE_NAME='" + database.escapeObjectName(tableName,Table.class) + "'";
        }
        if (columnName != null) {
          sql+=" AND ALL_TAB_COLUMNS.COLUMN_NAME='" + database.escapeObjectName(columnName,Column.class) + "'";
        }
      }
      return this.executeAndExtract(sql,database);
    }
  }
);
}
