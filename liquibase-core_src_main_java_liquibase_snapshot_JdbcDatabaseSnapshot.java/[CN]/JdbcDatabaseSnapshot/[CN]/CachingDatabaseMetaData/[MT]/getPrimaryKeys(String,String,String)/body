{
  return getResultSetCache("getPrimaryKeys").get(new ResultSetCache.SingleResultSetExtractor(database){
    @Override public ResultSetCache.RowData rowKeyParameters(    CachedRow row){
      return new ResultSetCache.RowData(row.getString("TABLE_CAT"),row.getString("TABLE_SCHEM"),database,row.getString("TABLE_NAME"));
    }
    @Override public ResultSetCache.RowData wantedKeyParameters(){
      return new ResultSetCache.RowData(catalogName,schemaName,database,table);
    }
    @Override public List<CachedRow> fastFetchQuery() throws SQLException {
      CatalogAndSchema catalogAndSchema=new CatalogAndSchema(catalogName,schemaName).customize(database);
      if (table == null) {
        try {
          List<CachedRow> foundPks=new ArrayList<CachedRow>();
          List<CachedRow> tables=CachingDatabaseMetaData.this.getTables(catalogName,schemaName,null);
          for (          CachedRow table : tables) {
            List<CachedRow> pkInfo=extract(databaseMetaData.getPrimaryKeys(((AbstractJdbcDatabase)database).getJdbcCatalogName(catalogAndSchema),((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema),table.getString("TABLE_NAME")));
            if (pkInfo != null) {
              foundPks.addAll(pkInfo);
            }
          }
          return foundPks;
        }
 catch (        DatabaseException e) {
          throw new SQLException(e);
        }
      }
 else {
        if (database instanceof OracleDatabase) {
          String sql="SELECT NULL AS table_cat, c.owner AS table_schem, c.table_name, c.column_name, c.position AS key_seq, c.constraint_name AS pk_name " + "FROM all_cons_columns c, all_constraints k " + "LEFT JOIN " + (((OracleDatabase)database).canAccessDbaRecycleBin() ? "dba_recyclebin" : "user_recyclebin") + " d ON d.object_name=k.table_name "+ "WHERE k.constraint_type = 'P' "+ "AND d.object_name IS NULL "+ "AND k.table_name = '"+ table+ "' "+ "AND k.owner = '"+ ((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema)+ "' "+ "AND k.constraint_name = c.constraint_name "+ "AND k.table_name = c.table_name "+ "AND k.owner = c.owner "+ "ORDER BY column_name";
          try {
            return executeAndExtract(sql,database);
          }
 catch (          DatabaseException e) {
            throw new SQLException(e);
          }
        }
 else {
          return extract(databaseMetaData.getPrimaryKeys(((AbstractJdbcDatabase)database).getJdbcCatalogName(catalogAndSchema),((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema),table));
        }
      }
    }
    @Override public List<CachedRow> bulkFetchQuery() throws SQLException {
      if (database instanceof OracleDatabase) {
        CatalogAndSchema catalogAndSchema=new CatalogAndSchema(catalogName,schemaName).customize(database);
        try {
          return executeAndExtract("SELECT NULL AS table_cat, c.owner AS table_schem, c.table_name, c.column_name, c.position AS key_seq,c.constraint_name AS pk_name FROM " + "all_cons_columns c, " + "all_constraints k "+ "LEFT JOIN " + (((OracleDatabase)database).canAccessDbaRecycleBin() ? "dba_recyclebin" : "user_recyclebin") + " d ON d.object_name=k.table_name "+ "WHERE k.constraint_type = 'P' "+ "AND d.object_name IS NULL "+ "AND k.owner='"+ catalogAndSchema.getCatalogName()+ "' "+ "AND k.constraint_name = c.constraint_name "+ "AND k.table_name = c.table_name "+ "AND k.owner = c.owner "+ "ORDER BY column_name",database);
        }
 catch (        DatabaseException e) {
          throw new SQLException(e);
        }
      }
      return null;
    }
    @Override boolean shouldBulkSelect(    String schemaKey,    ResultSetCache resultSetCache){
      if (database instanceof OracleDatabase) {
        return super.shouldBulkSelect(schemaKey,resultSetCache);
      }
 else {
        return false;
      }
    }
  }
);
}
