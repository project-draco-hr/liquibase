{
  return getResultSetCache("getPrimaryKeys").get(new ResultSetCache.SingleResultSetExtractor(database){
    @Override public ResultSetCache.RowData rowKeyParameters(    CachedRow row){
      return new ResultSetCache.RowData(row.getString("TABLE_CAT"),row.getString("TABLE_SCHEM"),database,row.getString("TABLE_NAME"));
    }
    @Override public ResultSetCache.RowData wantedKeyParameters(){
      return new ResultSetCache.RowData(catalogName,schemaName,database,table);
    }
    @Override public List<CachedRow> fastFetchQuery() throws SQLException {
      CatalogAndSchema catalogAndSchema=new CatalogAndSchema(catalogName,schemaName).customize(database);
      if (table == null) {
        try {
          List<CachedRow> foundPks=new ArrayList<CachedRow>();
          List<CachedRow> tables=CachingDatabaseMetaData.this.getTables(catalogName,schemaName,null,new String[]{"TABLE"});
          for (          CachedRow table : tables) {
            List<CachedRow> pkInfo=extract(databaseMetaData.getPrimaryKeys(((AbstractJdbcDatabase)database).getJdbcCatalogName(catalogAndSchema),((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema),table.getString("TABLE_NAME")));
            if (pkInfo != null) {
              foundPks.addAll(pkInfo);
            }
          }
          return foundPks;
        }
 catch (        DatabaseException e) {
          throw new SQLException(e);
        }
      }
 else {
        return extract(databaseMetaData.getPrimaryKeys(((AbstractJdbcDatabase)database).getJdbcCatalogName(catalogAndSchema),((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema),table));
      }
    }
    @Override public List<CachedRow> bulkFetchQuery() throws SQLException {
      return null;
    }
    @Override boolean shouldBulkSelect(    String schemaKey,    ResultSetCache resultSetCache){
      return false;
    }
  }
);
}
