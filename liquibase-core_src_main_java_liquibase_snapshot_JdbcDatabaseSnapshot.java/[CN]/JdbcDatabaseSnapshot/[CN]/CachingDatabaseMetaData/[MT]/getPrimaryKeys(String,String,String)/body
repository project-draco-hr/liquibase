{
  return getResultSetCache("getPrimaryKeys").get(new ResultSetCache.SingleResultSetExtractor(database){
    @Override public ResultSetCache.RowData rowKeyParameters(    CachedRow row){
      return new ResultSetCache.RowData(row.getString("TABLE_CAT"),row.getString("TABLE_SCHEM"),database,row.getString("TABLE_NAME"));
    }
    @Override public ResultSetCache.RowData wantedKeyParameters(){
      return new ResultSetCache.RowData(catalogName,schemaName,database,table);
    }
    @Override public List<CachedRow> fastFetchQuery() throws SQLException {
      CatalogAndSchema catalogAndSchema=new CatalogAndSchema(catalogName,schemaName).customize(database);
      try {
        List<CachedRow> foundPks=new ArrayList<CachedRow>();
        if (table == null) {
          List<CachedRow> tables=CachingDatabaseMetaData.this.getTables(catalogName,schemaName,null);
          for (          CachedRow table : tables) {
            List<CachedRow> pkInfo=getPkInfo(schemaName,catalogAndSchema,table.getString("TABLE_NAME"));
            if (pkInfo != null) {
              foundPks.addAll(pkInfo);
            }
          }
          return foundPks;
        }
 else {
          List<CachedRow> pkInfo=getPkInfo(schemaName,catalogAndSchema,table);
          if (pkInfo != null) {
            foundPks.addAll(pkInfo);
          }
        }
        return foundPks;
      }
 catch (      DatabaseException e) {
        throw new SQLException(e);
      }
    }
    private List<CachedRow> getPkInfo(    String schemaName,    CatalogAndSchema catalogAndSchema,    String tableName) throws DatabaseException, SQLException {
      List<CachedRow> pkInfo;
      if (database instanceof MSSQLDatabase && database.getDatabaseMajorVersion() >= 8) {
        String sql;
        if (database.getDatabaseMajorVersion() >= 9) {
          sql="SELECT " + "DB_NAME() AS [TABLE_CAT], " + "[s].[name] AS [TABLE_SCHEM], "+ "[t].[name] AS [TABLE_NAME], "+ "[c].[name] AS [COLUMN_NAME], "+ "CASE [ic].[is_descending_key] WHEN 0 THEN N'A' WHEN 1 THEN N'D' END AS [ASC_OR_DESC], "+ "[ic].[key_ordinal] AS [KEY_SEQ], "+ "[kc].[name] AS [PK_NAME] "+ "FROM [sys].[schemas] AS [s] "+ "INNER JOIN [sys].[tables] AS [t] "+ "ON [t].[schema_id] = [s].[schema_id] "+ "INNER JOIN [sys].[key_constraints] AS [kc] "+ "ON [kc].[parent_object_id] = [t].[object_id] "+ "INNER JOIN [sys].[indexes] AS [i] "+ "ON [i].[object_id] = [kc].[parent_object_id] "+ "AND [i].[index_id] = [kc].[unique_index_id] "+ "INNER JOIN [sys].[index_columns] AS [ic] "+ "ON [ic].[object_id] = [i].[object_id] "+ "AND [ic].[index_id] = [i].[index_id] "+ "INNER JOIN [sys].[columns] AS [c] "+ "ON [c].[object_id] = [ic].[object_id] "+ "AND [c].[column_id] = [ic].[column_id] "+ "WHERE [s].[name] = N'" + database.escapeStringForDatabase(catalogAndSchema.getSchemaName()) + "' "+ "AND [t].[name] = N'"+ database.escapeStringForDatabase(database.correctObjectName(tableName,Table.class))+ "' "+ "AND [kc].[type] = 'PK' "+ "AND [ic].[key_ordinal] > 0 "+ "ORDER BY "+ "[ic].[key_ordinal]";
        }
 else {
          sql="SELECT " + "DB_NAME() AS [TABLE_CAT], " + "[s].[name] AS [TABLE_SCHEM], "+ "[t].[name] AS [TABLE_NAME], "+ "[c].[name] AS [COLUMN_NAME], "+ "CASE INDEXKEY_PROPERTY([ic].[id], [ic].[indid], [ic].[keyno], 'IsDescending') WHEN 0 THEN N'A' WHEN 1 THEN N'D' END AS [ASC_OR_DESC], "+ "[ic].[keyno] AS [KEY_SEQ], "+ "[kc].[name] AS [PK_NAME] "+ "FROM [dbo].[sysusers] AS [s] "+ "INNER JOIN [dbo].[sysobjects] AS [t] "+ "ON [t].[uid] = [s].[uid] "+ "INNER JOIN [dbo].[sysobjects] AS [kc] "+ "ON [kc].[parent_obj] = [t].[id] "+ "INNER JOIN [dbo].[sysindexes] AS [i] "+ "ON [i].[id] = [kc].[parent_obj] "+ "AND [i].[name] = [kc].[name] "+ "INNER JOIN [dbo].[sysindexkeys] AS [ic] "+ "ON [ic].[id] = [i].[id] "+ "AND [ic].[indid] = [i].[indid] "+ "INNER JOIN [dbo].[syscolumns] AS [c] "+ "ON [c].[id] = [ic].[id] "+ "AND [c].[colid] = [ic].[colid] "+ "WHERE [s].[name] =  N'" + database.escapeStringForDatabase(catalogAndSchema.getSchemaName()) + "' "+ "AND [t].[name] = N'"+ database.escapeStringForDatabase(database.correctObjectName(tableName,Table.class))+ "' "+ "AND [kc].[xtype] = 'PK' "+ "ORDER BY "+ "[ic].[keyno]";
        }
        pkInfo=executeAndExtract(sql,database);
      }
 else {
        if (database instanceof OracleDatabase) {
          String sql="SELECT NULL AS table_cat, c.owner AS table_schem, c.table_name, c.column_name, c.position AS key_seq, c.constraint_name AS pk_name " + "FROM all_cons_columns c, all_constraints k " + "LEFT JOIN dba_recyclebin d ON d.object_name=k.table_name "+ "WHERE k.constraint_type = 'P' "+ "AND d.object_name IS NULL "+ "AND k.table_name = '" + table + "' "+ "AND k.owner = '"+ ((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema)+ "' "+ "AND k.constraint_name = c.constraint_name "+ "AND k.table_name = c.table_name "+ "AND k.owner = c.owner "+ "ORDER BY column_name";
          try {
            return executeAndExtract(sql,database);
          }
 catch (          DatabaseException e) {
            throw new SQLException(e);
          }
        }
 else {
          return extract(databaseMetaData.getPrimaryKeys(((AbstractJdbcDatabase)database).getJdbcCatalogName(catalogAndSchema),((AbstractJdbcDatabase)database).getJdbcSchemaName(catalogAndSchema),table));
        }
      }
      return pkInfo;
    }
    @Override public List<CachedRow> bulkFetchQuery() throws SQLException {
      if (database instanceof OracleDatabase) {
        CatalogAndSchema catalogAndSchema=new CatalogAndSchema(catalogName,schemaName).customize(database);
        try {
          return executeAndExtract("SELECT NULL AS table_cat, c.owner AS table_schem, c.table_name, c.column_name, c.position AS key_seq,c.constraint_name AS pk_name FROM " + "all_cons_columns c, " + "all_constraints k "+ "LEFT JOIN dba_recyclebin d ON d.object_name=k.table_name "+ "WHERE k.constraint_type = 'P' "+ "AND d.object_name IS NULL "+ "AND k.owner='" + catalogAndSchema.getCatalogName() + "' "+ "AND k.constraint_name = c.constraint_name "+ "AND k.table_name = c.table_name "+ "AND k.owner = c.owner "+ "ORDER BY column_name",database);
        }
 catch (        DatabaseException e) {
          throw new SQLException(e);
        }
      }
      return null;
    }
    @Override boolean shouldBulkSelect(    String schemaKey,    ResultSetCache resultSetCache){
      if (database instanceof OracleDatabase) {
        return super.shouldBulkSelect(schemaKey,resultSetCache);
      }
 else {
        return false;
      }
    }
  }
);
}
