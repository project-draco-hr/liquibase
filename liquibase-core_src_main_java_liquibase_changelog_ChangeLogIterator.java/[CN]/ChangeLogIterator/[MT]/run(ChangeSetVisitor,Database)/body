{
  Logger log=LogFactory.getLogger();
  log.setChangeLog(databaseChangeLog);
  try {
    List<ChangeSet> changeSetList=databaseChangeLog.getChangeSets();
    if (visitor.getDirection().equals(ChangeSetVisitor.Direction.REVERSE)) {
      Collections.reverse(changeSetList);
    }
    for (    ChangeSet changeSet : changeSetList) {
      boolean shouldVisit=true;
      Set<ChangeSetFilterResult> reasonsAccepted=new HashSet<ChangeSetFilterResult>();
      Set<ChangeSetFilterResult> reasonsDenied=new HashSet<ChangeSetFilterResult>();
      if (changeSetFilters != null) {
        for (        ChangeSetFilter filter : changeSetFilters) {
          ChangeSetFilterResult acceptsResult=filter.accepts(changeSet);
          if (acceptsResult.isAccepted()) {
            reasonsAccepted.add(acceptsResult);
          }
 else {
            shouldVisit=false;
            reasonsDenied.add(acceptsResult);
            break;
          }
        }
      }
      log.setChangeSet(changeSet);
      if (shouldVisit) {
        visitor.visit(changeSet,databaseChangeLog,database,reasonsAccepted);
      }
 else {
        if (visitor instanceof SkippedChangeSetVisitor) {
          ((SkippedChangeSetVisitor)visitor).skipped(changeSet,databaseChangeLog,database,reasonsDenied);
        }
      }
      log.setChangeSet(null);
    }
  }
  finally {
    log.setChangeLog(null);
  }
}
