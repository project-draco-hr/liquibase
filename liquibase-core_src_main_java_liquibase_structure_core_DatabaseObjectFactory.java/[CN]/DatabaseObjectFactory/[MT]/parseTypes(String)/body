{
  if (StringUtils.trimToNull(typesString) == null) {
    return getStandardTypes();
  }
 else {
    Set<Class<? extends DatabaseObject>> returnSet=new HashSet<Class<? extends DatabaseObject>>();
    Set<String> typesToInclude=new HashSet<String>(Arrays.asList(typesString.toLowerCase().split("\\s*,\\s*")));
    Set<String> typesNotFound=new HashSet<String>(typesToInclude);
    Class<? extends DatabaseObject>[] classes=ServiceLocator.getInstance().findClasses(DatabaseObject.class);
    for (    Class<? extends DatabaseObject> clazz : classes) {
      if (typesToInclude.contains(clazz.getSimpleName().toLowerCase()) || typesToInclude.contains(clazz.getSimpleName().toLowerCase() + "s")) {
        returnSet.add(clazz);
        typesNotFound.remove(clazz.getSimpleName().toLowerCase());
        typesNotFound.remove(clazz.getSimpleName().toLowerCase() + "s");
      }
    }
    if (typesNotFound.size() > 0) {
      throw new UnexpectedLiquibaseException("Unknown snapshot type(s) " + StringUtils.join(typesNotFound,", "));
    }
    return returnSet;
  }
}
