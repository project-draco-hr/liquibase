{
  final List<URL> urls=new ArrayList<URL>();
  if (this.classpath != null) {
    String[] classpath;
    if (isWindows()) {
      classpath=this.classpath.split(";");
    }
 else {
      classpath=this.classpath.split(":");
    }
    Logger logger=LogFactory.getInstance().getLog();
    for (    String classpathEntry : classpath) {
      File classPathFile=new File(classpathEntry);
      if (!classPathFile.exists()) {
        throw new CommandLineParsingException(classPathFile.getAbsolutePath() + " does not exist");
      }
      try {
        if (classpathEntry.endsWith(".war")) {
          addWarFileClasspathEntries(classPathFile,urls);
        }
 else         if (classpathEntry.endsWith(".ear")) {
          JarFile earZip=new JarFile(classPathFile);
          Enumeration<? extends JarEntry> entries=earZip.entries();
          while (entries.hasMoreElements()) {
            JarEntry entry=entries.nextElement();
            if (entry.getName().toLowerCase().endsWith(".jar")) {
              File jar=extract(earZip,entry);
              URL newUrl=new URL("jar:" + jar.toURI().toURL() + "!/");
              urls.add(newUrl);
              logger.info("adding '" + newUrl + "' to classpath");
              jar.deleteOnExit();
            }
 else             if (entry.getName().toLowerCase().endsWith("war")) {
              File warFile=extract(earZip,entry);
              addWarFileClasspathEntries(warFile,urls);
            }
          }
        }
 else {
          URL newUrl=new File(classpathEntry).toURI().toURL();
          logger.info("adding '" + newUrl + "' to classpath");
          urls.add(newUrl);
        }
      }
 catch (      Exception e) {
        throw new CommandLineParsingException(e);
      }
    }
  }
  if (includeSystemClasspath) {
    classLoader=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
      @Override public URLClassLoader run(){
        return new URLClassLoader(urls.toArray(new URL[urls.size()]),Thread.currentThread().getContextClassLoader());
      }
    }
);
  }
 else {
    classLoader=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
      @Override public URLClassLoader run(){
        return new URLClassLoader(urls.toArray(new URL[urls.size()]));
      }
    }
);
  }
  ServiceLocator.getInstance().setResourceAccessor(new ClassLoaderResourceAccessor(classLoader));
  Thread.currentThread().setContextClassLoader(classLoader);
}
