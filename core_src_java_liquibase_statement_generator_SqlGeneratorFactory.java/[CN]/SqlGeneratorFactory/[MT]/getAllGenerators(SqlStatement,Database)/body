{
  SortedSet<SqlGenerator> validGenerators=new TreeSet<SqlGenerator>(new Comparator<SqlGenerator>(){
    public int compare(    SqlGenerator o1,    SqlGenerator o2){
      return -1 * new Integer(o1.getSpecializationLevel()).compareTo(o2.getSpecializationLevel());
    }
  }
);
  for (  SqlGenerator generator : getGenerators()) {
    Class clazz=generator.getClass();
    while (clazz != null) {
      for (      Type type : clazz.getGenericInterfaces()) {
        if (type instanceof ParameterizedType && Arrays.asList(((ParameterizedType)type).getActualTypeArguments()).contains(statement.getClass())) {
          if (generator.isValidGenerator(statement,database)) {
            validGenerators.add(generator);
          }
        }
 else         if (type.equals(SqlGenerator.class)) {
          if (generator.isValidGenerator(statement,database)) {
            validGenerators.add(generator);
          }
        }
      }
      clazz=clazz.getSuperclass();
    }
  }
  return validGenerators;
}
