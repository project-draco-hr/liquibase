{
  if ("finest".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.FINEST);
  }
 else   if ("finer".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.FINER);
  }
 else   if ("fine".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.FINE);
  }
 else   if ("info".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.INFO);
  }
 else   if ("warning".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.WARNING);
  }
 else   if ("severe".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.SEVERE);
  }
 else   if ("off".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.OFF);
  }
 else {
    throw new CommandLineParsingException("Unknown log level: " + logLevel);
  }
  Driver driver;
  try {
    driver=(Driver)Class.forName(this.driver,true,classLoader).newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException("Cannot get database driver: " + e.getMessage());
  }
  Properties info=new Properties();
  info.put("user",username);
  info.put("password",password);
  Connection connection=driver.connect(url,info);
  if (connection == null) {
    throw new MigrationFailedException("Incorrect driver for URL");
  }
  Writer outputSQLFileWriter=null;
  try {
    Migrator migrator=new Migrator(migrationFile,new CommandLineFileOpener(classLoader));
    migrator.setContexts(contexts);
    migrator.init(connection);
    if ("listLocks".equalsIgnoreCase(command)) {
      DatabaseChangeLogLock[] locks=migrator.listLocks();
      System.out.println("Database change log locks for " + migrator.getDatabase().getConnectionUsername() + "@"+ migrator.getDatabase().getConnectionURL());
      if (locks.length == 0) {
        System.out.println(" - No locks");
      }
      for (      DatabaseChangeLogLock lock : locks) {
        System.out.println(" - " + lock.getLockedBy() + " at "+ DateFormat.getDateTimeInstance().format(lock.getLockGranted()));
      }
      return;
    }
 else     if ("releaseLocks".equalsIgnoreCase(command)) {
      migrator.forceReleaseLock();
      System.out.println("Successfully released all database change log locks for " + migrator.getDatabase().getConnectionUsername() + "@"+ migrator.getDatabase().getConnectionURL());
      return;
    }
 else     if ("tag".equalsIgnoreCase(command)) {
      migrator.tag(commandParam);
      System.out.println("Successfully tagged " + migrator.getDatabase().getConnectionUsername() + "@"+ migrator.getDatabase().getConnectionURL());
      return;
    }
 else     if ("dropAll".equals(command)) {
      migrator.dropAll();
      System.out.println("All objects dropped from " + migrator.getDatabase().getConnectionUsername() + "@"+ migrator.getDatabase().getConnectionURL());
      return;
    }
    DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    try {
      if ("migrate".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.EXECUTE_MODE);
      }
 else       if ("changelogSyncSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.OUTPUT_CHANGELOG_ONLY_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
      }
 else       if ("migrateSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.OUTPUT_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
      }
 else       if ("rollback".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.EXECUTE_ROLLBACK_MODE);
        if (commandParam == null) {
          throw new CommandLineParsingException("rollback requires a rollback tag");
        }
        migrator.setRollbackToTag(commandParam);
      }
 else       if ("rollbackToDate".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.EXECUTE_ROLLBACK_MODE);
        if (commandParam == null) {
          throw new CommandLineParsingException("rollback requires a rollback date");
        }
        migrator.setRollbackToDate(dateFormat.parse(commandParam));
      }
 else       if ("rollbackLatest".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.EXECUTE_ROLLBACK_MODE);
        migrator.setRollbackCount(new Integer(1));
      }
 else       if ("rollbackSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.OUTPUT_ROLLBACK_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
        if (commandParam == null) {
          throw new CommandLineParsingException("rollbackSQL requires a rollback tag");
        }
        migrator.setRollbackToTag(commandParam);
      }
 else       if ("rollbackToDateSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.OUTPUT_ROLLBACK_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
        if (commandParam == null) {
          throw new CommandLineParsingException("rollbackToDateSQL requires a rollback date");
        }
        migrator.setRollbackToDate(dateFormat.parse(commandParam));
      }
 else       if ("rollbackLatestSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.OUTPUT_ROLLBACK_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
        migrator.setRollbackCount(1);
      }
 else       if ("futureRollbackSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.OUTPUT_FUTURE_ROLLBACK_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
      }
 else {
        throw new CommandLineParsingException("Unknown command: " + command);
      }
    }
 catch (    ParseException e) {
      throw new CommandLineParsingException("Unexpected date/time format.  Use 'yyyy-MM-dd HH:mm:ss'");
    }
    migrator.migrate();
  }
  finally {
    if (connection != null) {
      connection.close();
    }
    if (outputSQLFileWriter != null) {
      outputSQLFileWriter.flush();
      outputSQLFileWriter.close();
    }
  }
}
