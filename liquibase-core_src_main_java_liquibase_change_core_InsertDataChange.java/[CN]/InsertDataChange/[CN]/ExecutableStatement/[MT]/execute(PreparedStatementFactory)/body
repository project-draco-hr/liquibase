{
  String schema=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  StringBuilder sql=new StringBuilder("INSERT INTO ");
  StringBuilder params=new StringBuilder("VALUES(");
  sql.append(database.escapeTableName(schema,getTableName()));
  sql.append("(");
  List<ColumnConfig> cols=new ArrayList<ColumnConfig>(getColumns().size());
  for (  ColumnConfig column : getColumns()) {
    if (database.supportsAutoIncrement() && Boolean.TRUE.equals(column.isAutoIncrement())) {
      continue;
    }
    sql.append(database.escapeColumnName(schema,getTableName(),column.getName()));
    sql.append(", ");
    params.append("?, ");
    cols.add(column);
  }
  sql.deleteCharAt(sql.lastIndexOf(" "));
  sql.deleteCharAt(sql.lastIndexOf(","));
  params.deleteCharAt(params.lastIndexOf(" "));
  params.deleteCharAt(params.lastIndexOf(","));
  params.append(")");
  sql.append(") ");
  sql.append(params);
  PreparedStatement stmt=factory.create(sql.toString());
  try {
    int i=1;
    for (    ColumnConfig col : cols) {
      if (col.getValue() != null) {
        stmt.setString(i,col.getValue());
      }
 else       if (col.getValueBoolean() != null) {
        stmt.setBoolean(i,col.getValueBoolean());
      }
 else       if (col.getValueNumeric() != null) {
        Number number=col.getValueNumeric();
        if (number instanceof Long) {
          stmt.setLong(i,number.longValue());
        }
 else         if (number instanceof Integer) {
          stmt.setInt(i,number.intValue());
        }
 else         if (number instanceof Double) {
          stmt.setDouble(i,number.doubleValue());
        }
 else         if (number instanceof Float) {
          stmt.setFloat(i,number.floatValue());
        }
 else         if (number instanceof BigDecimal) {
          stmt.setBigDecimal(i,(BigDecimal)number);
        }
 else         if (number instanceof BigInteger) {
          stmt.setInt(i,number.intValue());
        }
      }
 else       if (col.getValueDate() != null) {
        stmt.setDate(i,new java.sql.Date(col.getValueDate().getTime()));
      }
 else       if (col.getValueBlob() != null) {
        try {
          stmt.setBlob(i,new BufferedInputStream(new FileInputStream(col.getValueBlob())));
        }
 catch (        FileNotFoundException e) {
          throw new DatabaseException(e.getMessage(),e);
        }
      }
 else       if (col.getValueClob() != null) {
        try {
          stmt.setClob(i,new BufferedReader(new FileReader(col.getValueClob())));
        }
 catch (        FileNotFoundException e) {
          throw new DatabaseException(e.getMessage(),e);
        }
      }
      i++;
    }
    stmt.execute();
  }
 catch (  SQLException e) {
    throw new DatabaseException(e);
  }
}
