{
  Table missingTable=(Table)missingObject;
  PrimaryKey primaryKey=missingTable.getPrimaryKey();
  CreateTableChange change=createCreateTableChange();
  change.setTableName(missingTable.getName());
  if (control.getIncludeCatalog()) {
    change.setCatalogName(missingTable.getSchema().getCatalogName());
  }
  if (control.getIncludeSchema()) {
    change.setSchemaName(missingTable.getSchema().getName());
  }
  if (missingTable.getRemarks() != null) {
    change.setRemarks(missingTable.getRemarks());
  }
  for (  Column column : missingTable.getColumns()) {
    ColumnConfig columnConfig=new ColumnConfig();
    columnConfig.setName(column.getName());
    LiquibaseDataType ldt=DataTypeFactory.getInstance().from(column.getType(),comparisonDatabase);
    DatabaseDataType ddt=ldt.toDatabaseDataType(referenceDatabase);
    columnConfig.setType(ddt.toString());
    if (column.isAutoIncrement()) {
      columnConfig.setAutoIncrement(true);
    }
    ConstraintsConfig constraintsConfig=null;
    if (column.isAutoIncrement() && primaryKey != null && primaryKey.getColumnNamesAsList().contains(column.getName())) {
      constraintsConfig=new ConstraintsConfig();
      constraintsConfig.setPrimaryKey(true);
      constraintsConfig.setPrimaryKeyTablespace(primaryKey.getTablespace());
      if (comparisonDatabase instanceof MySQLDatabase && "PRIMARY".equals(primaryKey.getName())) {
        constraintsConfig.setPrimaryKeyName(null);
      }
 else {
        constraintsConfig.setPrimaryKeyName(primaryKey.getName());
      }
      control.setAlreadyHandledMissing(primaryKey);
      control.setAlreadyHandledMissing(primaryKey.getBackingIndex());
    }
 else     if (column.isNullable() != null && !column.isNullable()) {
      constraintsConfig=new ConstraintsConfig();
      constraintsConfig.setNullable(false);
    }
    if (constraintsConfig != null) {
      columnConfig.setConstraints(constraintsConfig);
    }
    Object defaultValue=column.getDefaultValue();
    if (defaultValue == null) {
    }
 else     if (column.isAutoIncrement()) {
    }
 else     if (defaultValue instanceof Date) {
      columnConfig.setDefaultValueDate((Date)defaultValue);
    }
 else     if (defaultValue instanceof Boolean) {
      columnConfig.setDefaultValueBoolean(((Boolean)defaultValue));
    }
 else     if (defaultValue instanceof Number) {
      columnConfig.setDefaultValueNumeric(((Number)defaultValue));
    }
 else     if (defaultValue instanceof DatabaseFunction) {
      DatabaseFunction function=(DatabaseFunction)defaultValue;
      if ("current".equals(function.getValue())) {
        if (referenceDatabase instanceof InformixDatabase) {
          if (ldt instanceof DateTimeType) {
            if (ldt.getAdditionalInformation() == null || ldt.getAdditionalInformation().length() == 0) {
              if (ldt.getParameters() != null && ldt.getParameters().length > 0) {
                String parameter=String.valueOf(ldt.getParameters()[0]);
                if ("4365".equals(parameter)) {
                  function=new DatabaseFunction("current year to fraction(3)");
                }
                if ("3594".equals(parameter)) {
                  function=new DatabaseFunction("current year to second");
                }
                if ("3080".equals(parameter)) {
                  function=new DatabaseFunction("current year to minute");
                }
                if ("2052".equals(parameter)) {
                  function=new DatabaseFunction("current year to day");
                }
              }
            }
          }
        }
      }
      columnConfig.setDefaultValueComputed(function);
    }
 else {
      columnConfig.setDefaultValue(defaultValue.toString());
    }
    if (column.getRemarks() != null) {
      columnConfig.setRemarks(column.getRemarks());
    }
    change.addColumn(columnConfig);
    control.setAlreadyHandledMissing(column);
  }
  return new Change[]{change};
}
