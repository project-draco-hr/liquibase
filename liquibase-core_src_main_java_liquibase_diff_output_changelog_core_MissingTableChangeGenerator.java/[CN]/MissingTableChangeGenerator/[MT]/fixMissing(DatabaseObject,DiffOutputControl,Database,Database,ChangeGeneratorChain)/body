{
  Table missingTable=(Table)missingObject;
  PrimaryKey primaryKey=missingTable.getPrimaryKey();
  CreateTableChange change=createCreateTableChange();
  change.setTableName(missingTable.getName());
  if (control.getIncludeCatalog()) {
    change.setCatalogName(missingTable.getSchema().getCatalogName());
  }
  if (control.getIncludeSchema()) {
    change.setSchemaName(missingTable.getSchema().getName());
  }
  if (missingTable.getRemarks() != null) {
    change.setRemarks(missingTable.getRemarks());
  }
  for (  Column column : missingTable.getColumns()) {
    ColumnConfig columnConfig=new ColumnConfig();
    columnConfig.setName(column.getName());
    LiquibaseDataType ldt=DataTypeFactory.getInstance().from(column.getType(),referenceDatabase);
    DatabaseDataType ddt=ldt.toDatabaseDataType(comparisonDatabase);
    String typeString=ddt.toString();
    if (comparisonDatabase instanceof MSSQLDatabase) {
      typeString=comparisonDatabase.unescapeDataTypeString(typeString);
    }
    columnConfig.setType(typeString);
    if (column.isAutoIncrement()) {
      columnConfig.setAutoIncrement(true);
    }
    ConstraintsConfig constraintsConfig=null;
    if (column.isAutoIncrement() && primaryKey != null && primaryKey.getColumns().size() == 1 && primaryKey.getColumnNamesAsList().contains(column.getName())) {
      if (referenceDatabase instanceof MSSQLDatabase && primaryKey.getBackingIndex() != null && primaryKey.getBackingIndex().getClustered() != null && !primaryKey.getBackingIndex().getClustered()) {
      }
 else       if (referenceDatabase instanceof PostgresDatabase && primaryKey.getBackingIndex() != null && primaryKey.getBackingIndex().getClustered() != null && primaryKey.getBackingIndex().getClustered()) {
      }
 else {
        constraintsConfig=new ConstraintsConfig();
        constraintsConfig.setPrimaryKey(true);
        constraintsConfig.setPrimaryKeyTablespace(primaryKey.getTablespace());
        if (comparisonDatabase instanceof MySQLDatabase && "PRIMARY".equals(primaryKey.getName())) {
          constraintsConfig.setPrimaryKeyName(null);
        }
 else {
          constraintsConfig.setPrimaryKeyName(primaryKey.getName());
        }
        control.setAlreadyHandledMissing(primaryKey);
        control.setAlreadyHandledMissing(primaryKey.getBackingIndex());
      }
    }
 else     if (column.isNullable() != null && !column.isNullable()) {
      constraintsConfig=new ConstraintsConfig();
      constraintsConfig.setNullable(false);
    }
    if (constraintsConfig != null) {
      columnConfig.setConstraints(constraintsConfig);
    }
    setDefaultValue(columnConfig,column,referenceDatabase);
    if (column.getRemarks() != null) {
      columnConfig.setRemarks(column.getRemarks());
    }
    if (column.getAutoIncrementInformation() != null) {
      BigInteger startWith=column.getAutoIncrementInformation().getStartWith();
      BigInteger incrementBy=column.getAutoIncrementInformation().getIncrementBy();
      if (startWith != null && !startWith.equals(BigInteger.ONE)) {
        columnConfig.setStartWith(startWith);
      }
      if (incrementBy != null && !incrementBy.equals(BigInteger.ONE)) {
        columnConfig.setIncrementBy(incrementBy);
      }
    }
    change.addColumn(columnConfig);
    control.setAlreadyHandledMissing(column);
  }
  return new Change[]{change};
}
