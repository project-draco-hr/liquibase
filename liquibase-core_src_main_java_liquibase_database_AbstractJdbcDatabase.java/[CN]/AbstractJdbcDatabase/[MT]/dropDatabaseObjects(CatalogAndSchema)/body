{
  ObjectQuotingStrategy currentStrategy=this.getObjectQuotingStrategy();
  this.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS);
  try {
    DatabaseSnapshot snapshot;
    try {
      final SnapshotControl snapshotControl=new SnapshotControl(this);
      final Set<Class<? extends DatabaseObject>> typesToInclude=snapshotControl.getTypesToInclude();
      typesToInclude.remove(Index.class);
      typesToInclude.remove(PrimaryKey.class);
      typesToInclude.remove(UniqueConstraint.class);
      if (supportsForeignKeyDisable()) {
        typesToInclude.remove(ForeignKey.class);
      }
      final long createSnapshotStarted=System.currentTimeMillis();
      snapshot=SnapshotGeneratorFactory.getInstance().createSnapshot(schemaToDrop,this,snapshotControl);
      LogFactory.getLogger().debug(String.format("Database snapshot generated in %d ms. Snapshot includes: %s",System.currentTimeMillis() - createSnapshotStarted,typesToInclude));
    }
 catch (    LiquibaseException e) {
      throw new UnexpectedLiquibaseException(e);
    }
    final long changeSetStarted=System.currentTimeMillis();
    DiffResult diffResult=DiffGeneratorFactory.getInstance().compare(new EmptyDatabaseSnapshot(this),snapshot,new CompareControl(snapshot.getSnapshotControl().getTypesToInclude()));
    List<ChangeSet> changeSets=new DiffToChangeLog(diffResult,new DiffOutputControl(true,true,false).addIncludedSchema(schemaToDrop)).generateChangeSets();
    LogFactory.getLogger().debug(String.format("ChangeSet to Remove Database Objects generated in %d ms.",System.currentTimeMillis() - changeSetStarted));
    final boolean reEnableFK=supportsForeignKeyDisable() && disableForeignKeyChecks();
    try {
      for (      ChangeSet changeSet : changeSets) {
        for (        Change change : changeSet.getChanges()) {
          if (change instanceof DropTableChange) {
            ((DropTableChange)change).setCascadeConstraints(true);
          }
          SqlStatement[] sqlStatements=change.generateStatements(this);
          for (          SqlStatement statement : sqlStatements) {
            ExecutorService.getInstance().getExecutor(this).execute(statement);
          }
        }
      }
    }
  finally {
      if (reEnableFK) {
        enableForeignKeyChecks();
      }
    }
    ChangeLogHistoryServiceFactory.getInstance().getChangeLogService(this).destroy();
    LockServiceFactory.getInstance().getLockService(this).destroy();
  }
  finally {
    this.setObjectQuotingStrategy(currentStrategy);
    this.commit();
  }
}
