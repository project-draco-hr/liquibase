{
  try {
    SnapshotControl snapshotControl=new SnapshotControl();
    DatabaseSnapshot snapshot=null;
    try {
      snapshot=SnapshotGeneratorFactory.getInstance().createSnapshot(snapshotControl,this,new Schema(schemaToDrop.getCatalogName(),schemaToDrop.getSchemaName()));
    }
 catch (    LiquibaseException e) {
      throw new UnexpectedLiquibaseException(e);
    }
    List<Change> dropChanges=new ArrayList<Change>();
    for (    Schema schema : snapshot.getSchemas()) {
      for (      View view : schema.getDatabaseObjects(View.class)) {
        DropViewChange dropChange=new DropViewChange();
        dropChange.setViewName(view.getName());
        dropChange.setSchemaName(schema.getName());
        dropChange.setCatalogName(schema.getCatalogName());
        dropChanges.add(dropChange);
      }
      if (!supportsForeignKeyDisable()) {
        for (        ForeignKey fk : schema.getDatabaseObjects(ForeignKey.class)) {
          DropForeignKeyConstraintChange dropFK=new DropForeignKeyConstraintChange();
          dropFK.setBaseTableSchemaName(schema.getName());
          dropFK.setBaseTableCatalogName(schema.getCatalogName());
          dropFK.setBaseTableName(fk.getForeignKeyTable().getName());
          dropFK.setConstraintName(fk.getName());
          dropChanges.add(dropFK);
        }
      }
      for (      Table table : schema.getDatabaseObjects(Table.class)) {
        DropTableChange dropChange=new DropTableChange();
        dropChange.setSchemaName(schema.getName());
        dropChange.setCatalogName(schema.getCatalogName());
        dropChange.setTableName(table.getName());
        if (supportsDropTableCascadeConstraints()) {
          dropChange.setCascadeConstraints(true);
        }
        dropChanges.add(dropChange);
      }
      if (this.supportsSequences()) {
        for (        Sequence seq : schema.getDatabaseObjects(Sequence.class)) {
          DropSequenceChange dropChange=new DropSequenceChange();
          dropChange.setSequenceName(seq.getName());
          dropChange.setSchemaName(schema.getName());
          dropChange.setCatalogName(schema.getCatalogName());
          dropChanges.add(dropChange);
        }
      }
      if (snapshot.hasDatabaseChangeLogTable()) {
        dropChanges.add(new AnonymousChange(new ClearDatabaseChangeLogTableStatement(schema.getCatalogName(),schema.getName())));
      }
      final boolean reEnableFK=supportsForeignKeyDisable() && disableForeignKeyChecks();
      try {
        for (        Change change : dropChanges) {
          for (          SqlStatement statement : change.generateStatements(this)) {
            ExecutorService.getInstance().getExecutor(this).execute(statement);
          }
        }
      }
  finally {
        if (reEnableFK) {
          enableForeignKeyChecks();
        }
      }
    }
  }
  finally {
    this.commit();
  }
}
