{
  ObjectQuotingStrategy currentStrategy=this.getObjectQuotingStrategy();
  this.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS);
  try {
    DatabaseSnapshot snapshot=null;
    try {
      snapshot=SnapshotGeneratorFactory.getInstance().createSnapshot(schemaToDrop,this,new SnapshotControl(this));
    }
 catch (    LiquibaseException e) {
      throw new UnexpectedLiquibaseException(e);
    }
    DiffResult diffResult=DiffGeneratorFactory.getInstance().compare(new EmptyDatabaseSnapshot(this),snapshot,new CompareControl(snapshot.getSnapshotControl().getTypesToInclude()));
    List<ChangeSet> changeSets=new DiffToChangeLog(diffResult,new DiffOutputControl(true,true,false)).generateChangeSets();
    final boolean reEnableFK=supportsForeignKeyDisable() && disableForeignKeyChecks();
    try {
      for (      ChangeSet changeSet : changeSets) {
        for (        Change change : changeSet.getChanges()) {
          SqlStatement[] sqlStatements=change.generateStatements(this);
          for (          SqlStatement statement : sqlStatements) {
            ExecutorService.getInstance().getExecutor(this).execute(statement);
          }
        }
      }
    }
  finally {
      if (reEnableFK) {
        enableForeignKeyChecks();
      }
    }
    if (SnapshotGeneratorFactory.getInstance().has(new Table().setName(this.getDatabaseChangeLogTableName()).setSchema(this.getLiquibaseCatalogName(),this.getLiquibaseSchemaName()),this)) {
      ExecutorService.getInstance().getExecutor(this).execute(new DropTableStatement(this.getLiquibaseCatalogName(),this.getLiquibaseSchemaName(),this.getDatabaseChangeLogTableName(),false));
    }
    if (SnapshotGeneratorFactory.getInstance().has(new Table().setName(this.getDatabaseChangeLogLockTableName()).setSchema(this.getLiquibaseCatalogName(),this.getLiquibaseSchemaName()),this)) {
      ExecutorService.getInstance().getExecutor(this).execute(new DropTableStatement(this.getLiquibaseCatalogName(),this.getLiquibaseSchemaName(),this.getDatabaseChangeLogLockTableName(),false));
    }
  }
  finally {
    this.setObjectQuotingStrategy(currentStrategy);
    this.commit();
  }
}
