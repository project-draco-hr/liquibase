{
  String value="";
switch (colType) {
case Types.BIT:
    Object bit=rs.getObject(colIndex);
  if (bit != null) {
    value=String.valueOf(bit);
  }
break;
case Types.BOOLEAN:
boolean b=rs.getBoolean(colIndex);
if (!rs.wasNull()) {
value=Boolean.valueOf(b).toString();
}
break;
case Types.CLOB:
Clob c=rs.getClob(colIndex);
if (c != null) {
value=read(c);
}
break;
case Types.BIGINT:
case Types.DECIMAL:
case Types.DOUBLE:
case Types.FLOAT:
case Types.REAL:
case Types.NUMERIC:
BigDecimal bd=rs.getBigDecimal(colIndex);
if (bd != null) {
value="" + bd.doubleValue();
}
break;
case Types.INTEGER:
case Types.TINYINT:
case Types.SMALLINT:
int intValue=rs.getInt(colIndex);
if (!rs.wasNull()) {
value="" + intValue;
}
break;
case Types.JAVA_OBJECT:
Object obj=rs.getObject(colIndex);
if (obj != null) {
value=String.valueOf(obj);
}
break;
case Types.DATE:
java.sql.Date date=rs.getDate(colIndex);
if (date != null) {
value=DATE_FORMATTER.format(date);
;
}
break;
case Types.TIME:
Time t=rs.getTime(colIndex);
if (t != null) {
value=t.toString();
}
break;
case Types.TIMESTAMP:
Timestamp tstamp=rs.getTimestamp(colIndex);
if (tstamp != null) {
value=TIMESTAMP_FORMATTER.format(tstamp);
}
break;
case Types.LONGVARCHAR:
case Types.VARCHAR:
case Types.CHAR:
value=rs.getString(colIndex);
break;
default :
value="";
}
if (value == null) {
value="";
}
return value;
}
