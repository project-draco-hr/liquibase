{
  this.url=url;
  Matcher matcher=Pattern.compile("offline:(\\w+)\\??(.*)").matcher(url);
  if (!matcher.matches()) {
    throw new UnexpectedLiquibaseException("Could not parse offline url " + url);
  }
  this.databaseShortName=matcher.group(1).toLowerCase();
  String params=StringUtils.trimToNull(matcher.group(2));
  if (params != null) {
    String[] keyValues=params.split("&");
    for (    String param : keyValues) {
      String[] split=param.split("=");
      this.params.put(split[0],split[1]);
    }
  }
  this.productName="Offline " + databaseShortName;
  for (  Map.Entry<String,String> paramEntry : this.params.entrySet()) {
    if (paramEntry.getKey().equals("version")) {
      this.productVersion=paramEntry.getValue();
      String[] versionParts=productVersion.split("\\.");
      try {
        this.databaseMajorVersion=Integer.valueOf(versionParts[0]);
        if (versionParts.length > 1) {
          this.databaseMinorVersion=Integer.valueOf(versionParts[1]);
        }
      }
 catch (      NumberFormatException e) {
        LogFactory.getInstance().getLog().warning("Cannot parse database version " + productVersion);
      }
    }
 else     if (paramEntry.getKey().equals("productName")) {
      this.productName=paramEntry.getValue();
    }
 else     if (paramEntry.getKey().equals("catalog")) {
      this.catalog=this.params.get("catalog");
    }
 else     if (paramEntry.getKey().equals("caseSensitive")) {
      this.caseSensitive=Boolean.parseBoolean(paramEntry.getValue());
    }
 else     if (paramEntry.getKey().equals("changeLogFile")) {
      this.changeLogFile=paramEntry.getValue();
    }
 else     if (paramEntry.getKey().equals("outputLiquibaseSql")) {
      this.outputLiquibaseSql=OutputLiquibaseSql.fromString(paramEntry.getValue());
    }
 else     if (paramEntry.getKey().equals("snapshot")) {
      String snapshotFile=paramEntry.getValue();
      try {
        SnapshotParser parser=SnapshotParserFactory.getInstance().getParser(snapshotFile,resourceAccessor);
        this.snapshot=parser.parse(snapshotFile,resourceAccessor);
        this.snapshot.getDatabase().setConnection(this);
        for (        Catalog catalog : this.snapshot.get(Catalog.class)) {
          if (catalog.isDefault()) {
            this.catalog=catalog.getName();
          }
        }
      }
 catch (      LiquibaseException e) {
        throw new UnexpectedLiquibaseException("Cannot parse snapshot " + url,e);
      }
    }
 else     if (paramEntry.getKey().equals("sendsStringParametersAsUnicode")) {
      this.sendsStringParametersAsUnicode=Boolean.parseBoolean(paramEntry.getValue());
    }
 else {
      this.databaseParams.put(paramEntry.getKey(),paramEntry.getValue());
    }
  }
}
