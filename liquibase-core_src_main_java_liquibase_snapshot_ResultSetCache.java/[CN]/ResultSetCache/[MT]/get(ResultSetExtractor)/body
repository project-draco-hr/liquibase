{
  try {
    String wantedKey=resultSetExtractor.wantedKeyParameters().createParamsKey(resultSetExtractor.database);
    String schemaKey=resultSetExtractor.wantedKeyParameters().createSchemaKey(resultSetExtractor.database);
    Map<String,List<CachedRow>> cache=cacheBySchema.get(schemaKey);
    if (cache == null) {
      cache=new HashMap<String,List<CachedRow>>();
      cacheBySchema.put(schemaKey,cache);
    }
    if (cache.containsKey(wantedKey)) {
      return cache.get(wantedKey);
    }
    if (didBulkQuery.containsKey(schemaKey) && didBulkQuery.get(schemaKey)) {
      return new ArrayList<CachedRow>();
    }
    List<CachedRow> results;
    if (resultSetExtractor.shouldBulkSelect(schemaKey,this)) {
      cache.clear();
      results=resultSetExtractor.bulkFetch();
      didBulkQuery.put(schemaKey,true);
    }
 else {
      Integer previousCount=timesSingleQueried.get(schemaKey);
      if (previousCount == null) {
        previousCount=0;
      }
      timesSingleQueried.put(schemaKey,previousCount + 1);
      results=resultSetExtractor.fastFetch();
    }
    for (    CachedRow row : results) {
      for (      String rowKey : resultSetExtractor.rowKeyParameters(row).getKeyPermutations()) {
        if (!cache.containsKey(rowKey)) {
          cache.put(rowKey,new ArrayList<CachedRow>());
        }
        cache.get(rowKey).add(row);
      }
    }
    List<CachedRow> returnList=cache.get(wantedKey);
    if (returnList == null) {
      returnList=new ArrayList<CachedRow>();
    }
    return returnList;
  }
 catch (  SQLException e) {
    throw new DatabaseException(e);
  }
}
