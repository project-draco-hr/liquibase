{
  try {
    if ("comment".equals(qName)) {
      text=new StringBuffer();
    }
 else     if ("databaseChangeLog".equals(qName)) {
      String version=uri.substring(uri.lastIndexOf("/") + 1);
      if (!version.equals(XMLChangeLogParser.getSchemaVersion())) {
        log.warning(databaseChangeLog.getPhysicalFilePath() + " is using schema version " + version+ " rather than version "+ XMLChangeLogParser.getSchemaVersion());
      }
      databaseChangeLog.setLogicalFilePath(atts.getValue("logicalFilePath"));
    }
 else     if ("include".equals(qName)) {
      String fileName=atts.getValue("file");
      handleIncludedChangeLog(fileName);
    }
 else     if (changeSet == null && "changeSet".equals(qName)) {
      boolean alwaysRun=false;
      boolean runOnChange=false;
      if ("true".equalsIgnoreCase(atts.getValue("runAlways"))) {
        alwaysRun=true;
      }
      if ("true".equalsIgnoreCase(atts.getValue("runOnChange"))) {
        runOnChange=true;
      }
      changeSet=new ChangeSet(atts.getValue("id"),atts.getValue("author"),alwaysRun,runOnChange,databaseChangeLog.getFilePath(),databaseChangeLog.getPhysicalFilePath(),atts.getValue("context"),atts.getValue("dbms"));
    }
 else     if (changeSet != null && "rollback".equals(qName)) {
      text=new StringBuffer();
    }
 else     if (changeSet != null && change == null) {
      change=ChangeFactory.getInstance().create(qName);
      change.setChangeSet(changeSet);
      text=new StringBuffer();
      if (change == null) {
        throw new MigrationFailedException(changeSet,"Unknown change: " + qName);
      }
      change.setFileOpener(fileOpener);
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setClassLoader(fileOpener.toClassLoader());
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(change,attributeName,attributeValue);
      }
      change.setUp();
    }
 else     if (change != null && "column".equals(qName)) {
      ColumnConfig column=new ColumnConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(column,attributeName,attributeValue);
      }
      if (change instanceof AddColumnChange) {
        ((AddColumnChange)change).addColumn(column);
      }
 else       if (change instanceof CreateTableChange) {
        ((CreateTableChange)change).addColumn(column);
      }
 else       if (change instanceof InsertDataChange) {
        ((InsertDataChange)change).addColumn(column);
      }
 else       if (change instanceof CreateIndexChange) {
        ((CreateIndexChange)change).addColumn(column);
      }
 else       if (change instanceof ModifyColumnChange) {
        ((ModifyColumnChange)change).addColumn(column);
      }
 else {
        throw new RuntimeException("Unexpected column tag for " + change.getClass().getName());
      }
    }
 else     if (change != null && "constraints".equals(qName)) {
      ConstraintsConfig constraints=new ConstraintsConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(constraints,attributeName,attributeValue);
      }
      ColumnConfig lastColumn;
      if (change instanceof AddColumnChange) {
        lastColumn=((AddColumnChange)change).getLastColumn();
      }
 else       if (change instanceof CreateTableChange) {
        lastColumn=((CreateTableChange)change).getColumns().get(((CreateTableChange)change).getColumns().size() - 1);
      }
 else {
        throw new RuntimeException("Unexpected change: " + change.getClass().getName());
      }
      lastColumn.setConstraints(constraints);
    }
 else     if ("preConditions".equals(qName)) {
      rootPrecondition=new AndPrecondition();
      preconditionLogicStack.push(rootPrecondition);
    }
 else     if (rootPrecondition != null) {
      currentPrecondition=PreconditionFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(currentPrecondition,attributeName,attributeValue);
      }
      preconditionLogicStack.peek().addNestedPrecondition(currentPrecondition);
      if (currentPrecondition instanceof PreconditionLogic) {
        preconditionLogicStack.push(((PreconditionLogic)currentPrecondition));
      }
      if ("sqlCheck".equals(qName)) {
        text=new StringBuffer();
      }
    }
 else     if ("param".equals(qName)) {
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setParam(atts.getValue("name"),atts.getValue("value"));
      }
 else {
        throw new MigrationFailedException(changeSet,"'param' unexpected in " + qName);
      }
    }
 else     if (change instanceof ExecuteShellCommandChange && "arg".equals(qName)) {
      ((ExecuteShellCommandChange)change).addArg(atts.getValue("value"));
    }
 else {
      throw new MigrationFailedException(changeSet,"Unexpected tag: " + qName);
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,"Error thrown as a SAXException: " + e.getMessage(),e);
    throw new SAXException(e);
  }
}
