{
  this.id=node.getChildValue(null,"id",String.class);
  this.author=node.getChildValue(null,"author",String.class);
  this.alwaysRun=node.getChildValue(null,"runAlways",false);
  this.runOnChange=node.getChildValue(null,"runOnChange",false);
  this.contexts=new ContextExpression(node.getChildValue(null,"context",String.class));
  setDbms(node.getChildValue(null,"dbms",String.class));
  this.runInTransaction=node.getChildValue(null,"runInTransaction",true);
  this.comments=node.getChildValue(null,"comment",String.class);
  String objectQuotingStrategyString=StringUtils.trimToNull(node.getChildValue(null,"objectQuotingStrategy",String.class));
  this.objectQuotingStrategy=ObjectQuotingStrategy.LEGACY;
  if (objectQuotingStrategyString != null) {
    this.objectQuotingStrategy=ObjectQuotingStrategy.valueOf(objectQuotingStrategyString);
  }
  this.filePath=StringUtils.trimToNull(node.getChildValue(null,"logicalFilePath",String.class));
  if (filePath == null) {
    filePath=changeLog.getFilePath();
  }
  this.setFailOnError(node.getChildValue(null,"failOnError",true));
  this.setFailOnError(node.getChildValue(null,"onValidationFail",true));
  for (  ParsedNode child : node.getChildren()) {
    handleChildNode(child,resourceAccessor);
  }
  Object value=node.getValue();
  if (value != null) {
    if (value instanceof ParsedNode) {
      handleChildNode((ParsedNode)value,resourceAccessor);
    }
 else     if (value instanceof Collection) {
      for (      Object child : ((Collection)value)) {
        if (child instanceof ParsedNode) {
          handleChildNode((ParsedNode)child,resourceAccessor);
        }
      }
    }
  }
}
