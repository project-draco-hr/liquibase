{
  Element element=currentChangeLogFileDOM.createElementNS(XMLChangeLogSAXParser.getDatabaseChangeLogNameSpace(),"column");
  if (columnConfig.getName() != null) {
    element.setAttribute("name",columnConfig.getName());
  }
  if (columnConfig.getType() != null) {
    element.setAttribute("type",columnConfig.getType());
  }
  if (columnConfig.getDefaultValue() != null) {
    element.setAttribute("defaultValue",columnConfig.getDefaultValue());
  }
  if (columnConfig.getDefaultValueNumeric() != null) {
    element.setAttribute("defaultValueNumeric",columnConfig.getDefaultValueNumeric().toString());
  }
  if (columnConfig.getDefaultValueDate() != null) {
    element.setAttribute("defaultValueDate",new ISODateFormat().format(columnConfig.getDefaultValueDate()));
  }
  if (columnConfig.getDefaultValueBoolean() != null) {
    element.setAttribute("defaultValueBoolean",columnConfig.getDefaultValueBoolean().toString());
  }
  if (columnConfig.getDefaultValueComputed() != null) {
    element.setAttribute("defaultValueComputed",columnConfig.getDefaultValueComputed().toString());
  }
  if (columnConfig.getDefaultValueSequenceNext() != null) {
    element.setAttribute("defaultValueSequenceNext",columnConfig.getDefaultValueSequenceNext().toString());
  }
  if (columnConfig.getValue() != null) {
    element.setAttribute("value",columnConfig.getValue());
  }
  if (columnConfig.getValueNumeric() != null) {
    element.setAttribute("valueNumeric",columnConfig.getValueNumeric().toString());
  }
  if (columnConfig.getValueBoolean() != null) {
    element.setAttribute("valueBoolean",columnConfig.getValueBoolean().toString());
  }
  if (columnConfig.getValueDate() != null) {
    element.setAttribute("valueDate",new ISODateFormat().format(columnConfig.getValueDate()));
  }
  if (columnConfig.getValueComputed() != null) {
    element.setAttribute("valueComputed",columnConfig.getValueComputed().toString());
  }
  if (columnConfig.getValueSequenceNext() != null) {
    element.setAttribute("valueSequenceNext",columnConfig.getValueSequenceNext().toString());
  }
  if (columnConfig.getValueSequenceCurrent() != null) {
    element.setAttribute("valueSequenceNext",columnConfig.getValueSequenceCurrent().toString());
  }
  if (StringUtils.trimToNull(columnConfig.getRemarks()) != null) {
    element.setAttribute("remarks",columnConfig.getRemarks());
  }
  if (columnConfig.isAutoIncrement() != null && columnConfig.isAutoIncrement()) {
    element.setAttribute("autoIncrement","true");
  }
  ConstraintsConfig constraints=columnConfig.getConstraints();
  if (constraints != null) {
    Element constraintsElement=currentChangeLogFileDOM.createElementNS(XMLChangeLogSAXParser.getDatabaseChangeLogNameSpace(),"constraints");
    if (constraints.getCheck() != null) {
      constraintsElement.setAttribute("check",constraints.getCheck());
    }
    if (constraints.getForeignKeyName() != null) {
      constraintsElement.setAttribute("foreignKeyName",constraints.getForeignKeyName());
    }
    if (constraints.getReferences() != null) {
      constraintsElement.setAttribute("references",constraints.getReferences());
    }
    if (constraints.isDeferrable() != null) {
      constraintsElement.setAttribute("deferrable",constraints.isDeferrable().toString());
    }
    if (constraints.isDeleteCascade() != null) {
      constraintsElement.setAttribute("deleteCascade",constraints.isDeleteCascade().toString());
    }
    if (constraints.isInitiallyDeferred() != null) {
      constraintsElement.setAttribute("initiallyDeferred",constraints.isInitiallyDeferred().toString());
    }
    if (constraints.isNullable() != null) {
      constraintsElement.setAttribute("nullable",constraints.isNullable().toString());
    }
    if (constraints.isPrimaryKey() != null) {
      constraintsElement.setAttribute("primaryKey",constraints.isPrimaryKey().toString());
    }
    if (constraints.isUnique() != null) {
      constraintsElement.setAttribute("unique",constraints.isUnique().toString());
    }
    if (constraints.getUniqueConstraintName() != null) {
      constraintsElement.setAttribute("uniqueConstraintName",constraints.getUniqueConstraintName());
    }
    if (constraints.getPrimaryKeyName() != null) {
      constraintsElement.setAttribute("primaryKeyName",constraints.getPrimaryKeyName());
    }
    if (constraints.getPrimaryKeyTablespace() != null) {
      constraintsElement.setAttribute("primaryKeyTablespace",constraints.getPrimaryKeyTablespace());
    }
    element.appendChild(constraintsElement);
  }
  return element;
}
