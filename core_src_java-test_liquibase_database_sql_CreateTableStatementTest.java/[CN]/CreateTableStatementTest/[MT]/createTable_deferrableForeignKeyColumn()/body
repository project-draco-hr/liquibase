{
  final String foreignKeyName="fk_test_parent";
  new DatabaseTestTemplate().testOnAvailableDatabases(new SqlStatementDatabaseTest(null,new CreateTableStatement(null,TABLE_NAME).addPrimaryKeyColumn("id","int",null).addColumn("name","varchar(255)").addColumn("parent_id","int",new ForeignKeyConstraint(foreignKeyName,TABLE_NAME + "(id)").setDeferrable(true).setInitiallyDeferred(true))){
    protected boolean expectedException(    Database database,    JDBCException exception){
      return !database.supportsInitiallyDeferrableColumns();
    }
    protected void preExecuteAssert(    DatabaseSnapshot snapshot){
      assertNull(snapshot.getTable(TABLE_NAME));
    }
    protected void postExecuteAssert(    DatabaseSnapshot snapshot){
      Table table=snapshot.getTable(TABLE_NAME);
      assertEquals(TABLE_NAME.toUpperCase(),table.getName().toUpperCase());
      assertNotNull(table.getColumn("id"));
      ForeignKey foundForeignKey=snapshot.getForeignKey(foreignKeyName);
      assertNotNull(foundForeignKey);
      assertEquals(TABLE_NAME,foundForeignKey.getPrimaryKeyTable().getName().toUpperCase());
      assertEquals("ID",foundForeignKey.getPrimaryKeyColumns().toUpperCase());
      assertEquals(TABLE_NAME,foundForeignKey.getForeignKeyTable().getName().toUpperCase());
      assertEquals("PARENT_ID",foundForeignKey.getForeignKeyColumns().toUpperCase());
      assertTrue(foundForeignKey.isDeferrable());
      assertTrue(foundForeignKey.isInitiallyDeferred());
    }
  }
);
}
