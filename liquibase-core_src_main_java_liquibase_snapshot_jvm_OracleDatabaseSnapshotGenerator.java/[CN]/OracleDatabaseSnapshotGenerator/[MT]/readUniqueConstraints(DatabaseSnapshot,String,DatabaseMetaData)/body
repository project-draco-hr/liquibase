{
  Database database=snapshot.getDatabase();
  updateListeners("Reading unique constraints for " + database.toString() + " ...");
  List<UniqueConstraint> foundUC=new ArrayList<UniqueConstraint>();
  Connection jdbcConnection=((JdbcConnection)database.getConnection()).getUnderlyingConnection();
  PreparedStatement statement=null;
  ResultSet rs=null;
  if (schema == null)   schema=database.convertRequestedSchemaToSchema(schema);
  try {
    String query="select uc.constraint_name,uc.table_name,uc.status,uc.deferrable,uc.deferred,ui.tablespace_name from user_constraints uc, user_cons_columns ucc, user_indexes ui where uc.constraint_type='U' and uc.index_name = ui.index_name and uc.constraint_name = ucc.constraint_name";
    statement=jdbcConnection.prepareStatement(query);
    rs=statement.executeQuery();
    while (rs.next()) {
      String constraintName=rs.getString("constraint_name");
      String tableName=rs.getString("table_name");
      String status=rs.getString("status");
      String deferrable=rs.getString("deferrable");
      String deferred=rs.getString("deferred");
      String tablespace=rs.getString("tablespace_name");
      UniqueConstraint constraintInformation=new UniqueConstraint();
      constraintInformation.setName(constraintName);
      constraintInformation.setTablespace(tablespace);
      if (!database.isSystemTable(null,schema,tableName) && !database.isLiquibaseTable(tableName)) {
        Table table=snapshot.getTable(tableName);
        if (table == null) {
          continue;
        }
        constraintInformation.setTable(table);
        constraintInformation.setDisabled("DISABLED".equals(status));
        if ("DEFERRABLE".equals(deferrable)) {
          constraintInformation.setDeferrable(true);
          constraintInformation.setInitiallyDeferred("DEFERRED".equals(deferred));
        }
        getColumnsForUniqueConstraint(jdbcConnection,constraintInformation);
        foundUC.add(constraintInformation);
      }
    }
    snapshot.getUniqueConstraints().addAll(foundUC);
  }
  finally {
    rs.close();
    if (statement != null) {
      statement.close();
    }
  }
}
