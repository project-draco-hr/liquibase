{
  String ranOn=String.valueOf(changeLog);
  if (changeSet != null) {
    ranOn=String.valueOf(changeSet);
  }
  Executor executor=ExecutorService.getInstance().getExecutor(database);
  try {
    boolean testPrecondition=false;
    if (executor.updatesDatabase()) {
      testPrecondition=true;
    }
 else {
      if (this.getOnSqlOutput().equals(PreconditionContainer.OnSqlOutputOption.TEST)) {
        testPrecondition=true;
      }
 else       if (this.getOnSqlOutput().equals(PreconditionContainer.OnSqlOutputOption.FAIL)) {
        throw new PreconditionFailedException("Unexpected precondition in updateSQL mode with onUpdateSQL value: " + this.getOnSqlOutput(),changeLog,this);
      }
 else       if (this.getOnSqlOutput().equals(PreconditionContainer.OnSqlOutputOption.IGNORE)) {
        testPrecondition=false;
      }
    }
    if (testPrecondition) {
      super.check(database,changeLog,changeSet);
    }
  }
 catch (  PreconditionFailedException e) {
    StringBuffer message=new StringBuffer();
    message.append("     ").append(e.getFailedPreconditions().size()).append(" preconditions failed").append(StreamUtil.getLineSeparator());
    for (    FailedPrecondition invalid : e.getFailedPreconditions()) {
      message.append("     ").append(invalid.toString());
      message.append(StreamUtil.getLineSeparator());
    }
    if (getOnFailMessage() != null) {
      message=new StringBuffer(getOnFailMessage());
    }
    if (this.getOnFail().equals(PreconditionContainer.FailOption.CONTINUE)) {
      LogFactory.getLogger().info("Continuing past: " + ranOn + " despite precondition failure:\n "+ message);
    }
 else     if (this.getOnFail().equals(PreconditionContainer.FailOption.WARN)) {
      LogFactory.getLogger().warning("Continuing past: " + ranOn + " despite precondition failure:\n "+ message);
    }
 else {
      if (getOnFailMessage() == null) {
        throw e;
      }
 else {
        throw new PreconditionFailedException(getOnFailMessage(),changeLog,this);
      }
    }
  }
catch (  PreconditionErrorException e) {
    StringBuffer message=new StringBuffer();
    message.append("     ").append(e.getErrorPreconditions().size()).append(" preconditions failed").append(StreamUtil.getLineSeparator());
    for (    ErrorPrecondition invalid : e.getErrorPreconditions()) {
      message.append("     ").append(invalid.toString());
      message.append(StreamUtil.getLineSeparator());
    }
    if (this.getOnError().equals(PreconditionContainer.ErrorOption.CONTINUE)) {
      LogFactory.getLogger().info("Continuing past: " + toString() + " despite precondition error:\n "+ message);
    }
 else     if (this.getOnError().equals(PreconditionContainer.ErrorOption.WARN)) {
      LogFactory.getLogger().warning("Continuing past: " + toString() + " despite precondition error:\n "+ message);
    }
 else {
      if (getOnErrorMessage() == null) {
        throw e;
      }
 else {
        throw new PreconditionErrorException(getOnErrorMessage(),e.getErrorPreconditions());
      }
    }
  }
}
