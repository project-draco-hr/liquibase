{
  if (!supportsDatabase(database)) {
    throw new StatementNotSupportedOnDatabaseException(this,database);
  }
  StringBuilder sb=new StringBuilder();
  sb.append("ALTER TABLE ").append(database.escapeTableName(getBaseTableSchemaName(),getBaseTableName())).append(" ADD CONSTRAINT ");
  if (!(database instanceof InformixDatabase)) {
    sb.append(database.escapeConstraintName(getConstraintName()));
  }
  sb.append(" FOREIGN KEY (").append(database.escapeColumnNameList(getBaseColumnNames())).append(") REFERENCES ").append(database.escapeTableName(getReferencedTableSchemaName(),getReferencedTableName())).append("(").append(database.escapeColumnNameList(getReferencedColumnNames())).append(")");
  if (this.updateRule != null) {
switch (this.updateRule) {
case DatabaseMetaData.importedKeyCascade:
      sb.append(" ON UPDATE CASCADE");
    break;
case DatabaseMetaData.importedKeySetNull:
  sb.append(" ON UPDATE SET NULL");
break;
case DatabaseMetaData.importedKeySetDefault:
sb.append(" ON UPDATE SET DEFAULT");
break;
case DatabaseMetaData.importedKeyRestrict:
if (database.supportsRestrictForeignKeys()) {
sb.append(" ON UPDATE RESTRICT");
}
break;
case DatabaseMetaData.importedKeyNoAction:
break;
default :
break;
}
}
if (this.deleteRule != null) {
switch (this.deleteRule) {
case DatabaseMetaData.importedKeyCascade:
sb.append(" ON DELETE CASCADE");
break;
case DatabaseMetaData.importedKeySetNull:
sb.append(" ON DELETE SET NULL");
break;
case DatabaseMetaData.importedKeySetDefault:
sb.append(" ON DELETE SET DEFAULT");
break;
case DatabaseMetaData.importedKeyRestrict:
if (database.supportsRestrictForeignKeys()) {
sb.append(" ON DELETE RESTRICT");
}
break;
case DatabaseMetaData.importedKeyNoAction:
break;
default :
break;
}
}
if (isDeferrable() || isInitiallyDeferred()) {
if (!database.supportsInitiallyDeferrableColumns()) {
throw new StatementNotSupportedOnDatabaseException("Database does not support deferrable foreign keys",this,database);
}
if (isDeferrable()) {
sb.append(" DEFERRABLE");
}
if (isInitiallyDeferred()) {
sb.append(" INITIALLY DEFERRED");
}
}
if (database instanceof InformixDatabase) {
sb.append(" CONSTRAINT ");
sb.append(database.escapeConstraintName(getConstraintName()));
}
return sb.toString();
}
