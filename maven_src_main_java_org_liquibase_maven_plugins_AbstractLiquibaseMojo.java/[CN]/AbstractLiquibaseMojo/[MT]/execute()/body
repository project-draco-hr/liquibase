{
  getLog().info("");
  getLog().info("Liquibase Database Migrate");
  getLog().info(LOG_SEPARATOR);
  String shouldRunProperty=System.getProperty(Migrator.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty).booleanValue()) {
    getLog().warn("Migrator did not run because '" + Migrator.SHOULD_RUN_SYSTEM_PROPERTY + "' system property was set to false");
    return;
  }
  if (propertiesFile != null) {
    File f=new File(propertiesFile);
    if (verbose) {
      getLog().info("Loading Liquibase settings from properties file, " + f.getAbsolutePath());
    }
    parsePropertiesFile(propertiesFile);
  }
  if (verbose) {
    getLog().info("Settings----------------------------");
    getLog().info("   properties file will override? " + propertiesFileOverrides);
    getLog().info("   changeLogFile: " + changeLogFile);
    getLog().info("   driver: " + driver);
    getLog().info("   url: " + url);
    getLog().info("   username: " + username);
    getLog().info("   password: " + password);
    getLog().info("   prompt on non-local database? " + promptOnNonLocalDatabase);
    getLog().info("   drop first? " + dropFirst);
    getLog().info(LOG_SEPARATOR);
  }
  Connection connection=null;
  try {
    Driver dbDriver=(Driver)Class.forName(driver,true,getArtifactClassloader()).newInstance();
    Properties info=new Properties();
    info.put("user",username);
    info.put("password",password);
    connection=dbDriver.connect(url,info);
    if (connection == null) {
      throw new JDBCException("Connection could not be created to " + url + " with driver "+ dbDriver.getClass().getName()+ ".  Possibly the wrong driver for the given "+ "database URL");
    }
    FileOpener mFO=new MavenFileOpener();
    FileOpener fsFO=new FileSystemFileOpener();
    Migrator migrator=new Migrator(changeLogFile.trim(),new CompositeFileOpener(mFO,fsFO));
    migrator.setContexts(contexts);
    migrator.init(connection);
    getLog().info("Executing on Database: " + url);
    if (promptOnNonLocalDatabase && !migrator.isSafeToRunMigration()) {
      if (migrator.swingPromptForNonLocalDatabase()) {
        throw new LiquibaseException("Chose not to run against non-production database");
      }
    }
    if (dropFirst) {
      migrator.dropAll();
    }
    performLiquibaseTask(migrator);
  }
 catch (  ClassNotFoundException e) {
    releaseConnection(connection);
    throw new MojoFailureException("Missing Class '" + e.getMessage() + "'. Database "+ "driver may not be included in the project "+ "dependencies or with wrong scope.");
  }
catch (  Exception e) {
    releaseConnection(connection);
    throw new MojoFailureException(e.getMessage());
  }
  getLog().info(LOG_SEPARATOR);
}
