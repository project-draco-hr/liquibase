{
  Object defaultValue=addDefaultValueStatement.getDefaultValue();
  ValidationErrors validationErrors=new ValidationErrors();
  validationErrors.checkRequiredField("defaultValue",defaultValue);
  validationErrors.checkRequiredField("columnName",addDefaultValueStatement.getColumnName());
  validationErrors.checkRequiredField("tableName",addDefaultValueStatement.getTableName());
  if (!database.supportsSequences() && defaultValue instanceof SequenceNextValueFunction) {
    validationErrors.addError("Database " + database.getShortName() + " does not support sequences");
  }
  if (database instanceof HsqlDatabase) {
    if (defaultValue instanceof SequenceNextValueFunction) {
      validationErrors.addError("Database " + database.getShortName() + " does not support adding sequence-based default values");
    }
 else     if (defaultValue instanceof DatabaseFunction && !HsqlDatabase.supportsDefaultValueComputed(addDefaultValueStatement.getColumnDataType(),defaultValue.toString())) {
      validationErrors.addError("Database " + database.getShortName() + " does not support adding function-based default values");
    }
  }
  String columnDataType=addDefaultValueStatement.getColumnDataType();
  if (columnDataType != null) {
    LiquibaseDataType dataType=DataTypeFactory.getInstance().fromDescription(columnDataType,database);
    boolean typeMismatch=false;
    if (dataType instanceof BooleanType) {
      if (!(defaultValue instanceof Boolean)) {
        typeMismatch=true;
      }
    }
 else     if (dataType instanceof CharType) {
      if (!(defaultValue instanceof String) && !(defaultValue instanceof DatabaseFunction)) {
        typeMismatch=true;
      }
    }
    if (typeMismatch) {
      validationErrors.addError("Default value of " + defaultValue + " does not match defined type of "+ columnDataType);
    }
  }
  return validationErrors;
}
