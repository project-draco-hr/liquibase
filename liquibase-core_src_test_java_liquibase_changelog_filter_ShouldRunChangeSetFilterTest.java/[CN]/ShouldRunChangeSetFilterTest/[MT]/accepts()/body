{
  ArrayList<RanChangeSet> ranChanges=new ArrayList<RanChangeSet>();
  ranChanges.add(new RanChangeSet("path/changelog","1","testAuthor",CheckSum.parse("12345"),new Date(),null));
  ranChanges.add(new RanChangeSet("path/changelog","2","testAuthor",CheckSum.parse("12345"),new Date(),null));
  Database database=createMock(Database.class);
  expect(database.getRanChangeSetList()).andReturn(ranChanges);
  expect(database.getDatabaseChangeLogTableName()).andReturn("DATABASECHANGELOG").anyTimes();
  expect(database.getDefaultSchemaName()).andReturn(null).anyTimes();
  Executor template=createMock(Executor.class);
  expect(template.update(isA(UpdateStatement.class))).andReturn(1).anyTimes();
  replay(database);
  replay(template);
  ExecutorService.getInstance().setExecutor(database,template);
  ShouldRunChangeSetFilter filter=new ShouldRunChangeSetFilter(database);
  assertFalse(filter.accepts(new ChangeSet("1","testAuthor",false,false,"path/changelog",null,null,null)));
  assertTrue(filter.accepts(new ChangeSet("1","testAuthor",true,false,"path/changelog",null,null,null)));
  assertTrue(filter.accepts(new ChangeSet("1","testAuthor",false,true,"path/changelog",null,null,null)));
  assertTrue(filter.accepts(new ChangeSet("3","testAuthor",false,false,"path/changelog",null,null,null)));
  assertTrue(filter.accepts(new ChangeSet("1","otherAuthor",false,false,"path/changelog",null,null,null)));
  assertTrue(filter.accepts(new ChangeSet("1","testAuthor",false,false,"other/changelog",null,null,null)));
}
