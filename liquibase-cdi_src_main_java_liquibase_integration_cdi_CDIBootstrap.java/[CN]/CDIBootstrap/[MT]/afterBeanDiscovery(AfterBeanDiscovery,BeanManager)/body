{
  AnnotatedType<CDILiquibase> at=bm.createAnnotatedType(CDILiquibase.class);
  final InjectionTarget<CDILiquibase> it=bm.createInjectionTarget(at);
  instance=new Bean<CDILiquibase>(){
    @Override public Set<Type> getTypes(){
      Set<Type> types=new HashSet<Type>();
      types.add(CDILiquibase.class);
      types.add(Object.class);
      return types;
    }
    @Override public Set<Annotation> getQualifiers(){
      Set<Annotation> qualifiers=new HashSet<Annotation>();
      qualifiers.add(new AnnotationLiteral<Default>(){
      }
);
      qualifiers.add(new AnnotationLiteral<Any>(){
      }
);
      return qualifiers;
    }
    @Override public Class<? extends Annotation> getScope(){
      return ApplicationScoped.class;
    }
    @Override public String getName(){
      return "cdiLiquibase";
    }
    @Override public Set<Class<? extends Annotation>> getStereotypes(){
      return Collections.emptySet();
    }
    @Override public Class<?> getBeanClass(){
      return CDILiquibase.class;
    }
    @Override public boolean isAlternative(){
      return false;
    }
    @Override public boolean isNullable(){
      return false;
    }
    @Override public Set<InjectionPoint> getInjectionPoints(){
      return it.getInjectionPoints();
    }
    @Override public CDILiquibase create(    CreationalContext<CDILiquibase> ctx){
      CDILiquibase instance=it.produce(ctx);
      it.inject(instance,ctx);
      it.postConstruct(instance);
      return instance;
    }
    @Override public void destroy(    CDILiquibase instance,    CreationalContext<CDILiquibase> ctx){
      it.preDestroy(instance);
      it.dispose(instance);
      ctx.release();
    }
  }
;
  abd.addBean(instance);
}
