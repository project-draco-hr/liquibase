{
  updateListeners("Reading columns for " + database.toString() + " ...");
  List<Column> returnColumns=new ArrayList<Column>();
  ResultSet allColumnsMetadataRs=null;
  try {
    DatabaseMetaData databaseMetaData=getMetaData(database);
    Schema schema;
    if (container instanceof Schema) {
      schema=(Schema)container;
      allColumnsMetadataRs=databaseMetaData.getColumns(database.getJdbcCatalogName(((Schema)container)),database.getJdbcSchemaName(schema),null,null);
    }
 else     if (container instanceof Relation) {
      Relation relation=(Relation)container;
      schema=relation.getSchema();
      allColumnsMetadataRs=databaseMetaData.getColumns(database.getJdbcCatalogName(schema),database.getJdbcSchemaName(schema),database.correctObjectName(relation.getName(),Relation.class),null);
    }
 else {
      return new Column[0];
    }
    while (allColumnsMetadataRs.next()) {
      Map<String,Object> data=convertResultSetToMap(allColumnsMetadataRs);
      Relation relation;
      if (container instanceof Relation) {
        relation=(Relation)container;
      }
 else {
        String tableOrViewName=cleanNameFromDatabase((String)data.get("TABLE_NAME"),database);
        relation=new Table().setName(tableOrViewName);
        relation.setSchema(schema);
      }
      Column column=readColumn(data,relation,database);
      if (column == null) {
        continue;
      }
      returnColumns.add(column);
    }
  }
 catch (  Exception e) {
    throw new DatabaseException(e);
  }
 finally {
    if (allColumnsMetadataRs != null) {
      try {
        allColumnsMetadataRs.close();
      }
 catch (      SQLException ignored) {
      }
    }
  }
  return returnColumns.toArray(new Column[returnColumns.size()]);
}
