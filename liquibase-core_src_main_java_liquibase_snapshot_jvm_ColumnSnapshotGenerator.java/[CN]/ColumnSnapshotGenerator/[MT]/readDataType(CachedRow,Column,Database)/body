{
  if (database instanceof OracleDatabase) {
    String dataType=columnMetadataResultSet.getString("DATA_TYPE_NAME");
    dataType=dataType.replace("VARCHAR2","VARCHAR");
    dataType=dataType.replace("NVARCHAR2","NVARCHAR");
    DataType type=new DataType(dataType);
    type.setDataTypeId(columnMetadataResultSet.getInt("DATA_TYPE"));
    if (dataType.equalsIgnoreCase("NUMBER")) {
      type.setColumnSize(columnMetadataResultSet.getInt("DATA_PRECISION"));
      type.setDecimalDigits(columnMetadataResultSet.getInt("DATA_SCALE"));
    }
 else {
      type.setColumnSize(columnMetadataResultSet.getInt("DATA_LENGTH"));
      if (dataType.equalsIgnoreCase("NCLOB") || dataType.equalsIgnoreCase("BLOB") || dataType.equalsIgnoreCase("CLOB")) {
        type.setColumnSize(null);
      }
 else       if (dataType.equalsIgnoreCase("NVARCHAR") || dataType.equalsIgnoreCase("NCHAR")) {
        type.setColumnSize(columnMetadataResultSet.getInt("CHAR_LENGTH"));
        type.setColumnSizeUnit(DataType.ColumnSizeUnit.CHAR);
      }
 else {
        String charUsed=columnMetadataResultSet.getString("CHAR_USED");
        DataType.ColumnSizeUnit unit=null;
        if ("C".equals(charUsed)) {
          unit=DataType.ColumnSizeUnit.CHAR;
          type.setColumnSize(columnMetadataResultSet.getInt("CHAR_LENGTH"));
        }
 else         if ("B".equals(charUsed)) {
          unit=DataType.ColumnSizeUnit.BYTE;
        }
        type.setColumnSizeUnit(unit);
      }
    }
    return type;
  }
  String columnTypeName=(String)columnMetadataResultSet.get("TYPE_NAME");
  if (database instanceof MSSQLDatabase) {
    if (columnTypeName.equalsIgnoreCase("numeric() identity")) {
      columnTypeName="numeric";
    }
 else     if (columnTypeName.equalsIgnoreCase("xml")) {
      columnMetadataResultSet.set("COLUMN_SIZE",null);
      columnMetadataResultSet.set("DECIMAL_DIGITS",null);
    }
 else     if (columnTypeName.equalsIgnoreCase("datetimeoffset")) {
      columnMetadataResultSet.set("COLUMN_SIZE",columnMetadataResultSet.getInt("DECIMAL_DIGITS"));
      columnMetadataResultSet.set("DECIMAL_DIGITS",null);
    }
 else     if (columnTypeName.equalsIgnoreCase("time")) {
      columnMetadataResultSet.set("COLUMN_SIZE",columnMetadataResultSet.getInt("DECIMAL_DIGITS"));
      columnMetadataResultSet.set("DECIMAL_DIGITS",null);
    }
  }
  if (database instanceof FirebirdDatabase) {
    if (columnTypeName.equals("BLOB SUB_TYPE 0")) {
      columnTypeName="BLOB";
    }
    if (columnTypeName.equals("BLOB SUB_TYPE 1")) {
      columnTypeName="CLOB";
    }
  }
  if (database instanceof MySQLDatabase && (columnTypeName.equalsIgnoreCase("ENUM") || columnTypeName.equalsIgnoreCase("SET"))) {
    try {
      String boilerLength;
      if (columnTypeName.equalsIgnoreCase("ENUM"))       boilerLength="7";
 else       boilerLength="6";
      List<String> enumValues=ExecutorService.getInstance().getExecutor(database).queryForList(new RawSqlStatement("SELECT DISTINCT SUBSTRING_INDEX(SUBSTRING_INDEX(SUBSTRING(COLUMN_TYPE, " + boilerLength + ", LENGTH(COLUMN_TYPE) - "+ boilerLength+ " - 1 ), \"','\", 1 + units.i + tens.i * 10) , \"','\", -1)\n"+ "FROM INFORMATION_SCHEMA.COLUMNS\n"+ "CROSS JOIN (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) units\n"+ "CROSS JOIN (SELECT 0 AS i UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9) tens\n"+ "WHERE TABLE_NAME = '"+ column.getRelation().getName()+ "' \n"+ "AND COLUMN_NAME = '"+ column.getName()+ "'"),String.class);
      String enumClause="";
      for (      String enumValue : enumValues) {
        enumClause+="'" + enumValue + "', ";
      }
      enumClause=enumClause.replaceFirst(", $","");
      return new DataType(columnTypeName + "(" + enumClause+ ")");
    }
 catch (    DatabaseException e) {
      LogFactory.getLogger().warning("Error fetching enum values",e);
    }
  }
  DataType.ColumnSizeUnit columnSizeUnit=DataType.ColumnSizeUnit.BYTE;
  int dataType=columnMetadataResultSet.getInt("DATA_TYPE");
  Integer columnSize=null;
  Integer decimalDigits=null;
  if (!database.dataTypeIsNotModifiable(columnTypeName)) {
    columnSize=columnMetadataResultSet.getInt("COLUMN_SIZE");
    decimalDigits=columnMetadataResultSet.getInt("DECIMAL_DIGITS");
    if (decimalDigits != null && decimalDigits.equals(0)) {
      decimalDigits=null;
    }
  }
  Integer radix=columnMetadataResultSet.getInt("NUM_PREC_RADIX");
  Integer characterOctetLength=columnMetadataResultSet.getInt("CHAR_OCTET_LENGTH");
  if (database instanceof DB2Database) {
    String typeName=columnMetadataResultSet.getString("TYPE_NAME");
    if (typeName.equalsIgnoreCase("DBCLOB") || typeName.equalsIgnoreCase("GRAPHIC") || typeName.equalsIgnoreCase("VARGRAPHIC")) {
      if (columnSize != null) {
        columnSize=columnSize / 2;
      }
    }
    if (columnTypeName.equalsIgnoreCase("TIMESTAMP") && decimalDigits == null) {
      columnTypeName="DATE";
      dataType=Types.DATE;
    }
  }
  DataType type=new DataType(columnTypeName);
  type.setDataTypeId(dataType);
  type.setColumnSize(columnSize);
  type.setDecimalDigits(decimalDigits);
  type.setRadix(radix);
  type.setCharacterOctetLength(characterOctetLength);
  type.setColumnSizeUnit(columnSizeUnit);
  return type;
}
