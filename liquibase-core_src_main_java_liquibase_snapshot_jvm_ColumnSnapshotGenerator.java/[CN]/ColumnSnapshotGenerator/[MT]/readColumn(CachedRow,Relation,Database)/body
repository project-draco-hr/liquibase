{
  String rawTableName=(String)columnMetadataResultSet.get("TABLE_NAME");
  String rawColumnName=(String)columnMetadataResultSet.get("COLUMN_NAME");
  String rawSchemaName=StringUtils.trimToNull((String)columnMetadataResultSet.get("TABLE_SCHEM"));
  String rawCatalogName=StringUtils.trimToNull((String)columnMetadataResultSet.get("TABLE_CAT"));
  String remarks=StringUtils.trimToNull((String)columnMetadataResultSet.get("REMARKS"));
  if (remarks != null) {
    remarks=remarks.replace("''","'");
  }
  Column column=new Column();
  column.setName(StringUtils.trimToNull(rawColumnName));
  column.setRelation(table);
  column.setRemarks(remarks);
  if (database instanceof OracleDatabase) {
    String nullable=columnMetadataResultSet.getString("NULLABLE");
    if (nullable.equals("Y")) {
      column.setNullable(true);
    }
 else {
      column.setNullable(false);
    }
  }
 else {
    int nullable=columnMetadataResultSet.getInt("NULLABLE");
    if (nullable == DatabaseMetaData.columnNoNulls) {
      column.setNullable(false);
    }
 else     if (nullable == DatabaseMetaData.columnNullable) {
      column.setNullable(true);
    }
 else     if (nullable == DatabaseMetaData.columnNullableUnknown) {
      LogFactory.getLogger().info("Unknown nullable state for column " + column.toString() + ". Assuming nullable");
      column.setNullable(true);
    }
  }
  if (database.supportsAutoIncrement()) {
    if (table instanceof Table) {
      if (columnMetadataResultSet.containsColumn("IS_AUTOINCREMENT")) {
        String isAutoincrement=(String)columnMetadataResultSet.get("IS_AUTOINCREMENT");
        isAutoincrement=StringUtils.trimToNull(isAutoincrement);
        if (isAutoincrement == null) {
          column.setAutoIncrementInformation(null);
        }
 else         if (isAutoincrement.equals("YES")) {
          column.setAutoIncrementInformation(new Column.AutoIncrementInformation());
        }
 else         if (isAutoincrement.equals("NO")) {
          column.setAutoIncrementInformation(null);
        }
 else         if (isAutoincrement.equals("")) {
          LogFactory.getLogger().info("Unknown auto increment state for column " + column.toString() + ". Assuming not auto increment");
          column.setAutoIncrementInformation(null);
        }
 else {
          throw new UnexpectedLiquibaseException("Unknown is_autoincrement value: '" + isAutoincrement + "'");
        }
      }
 else {
        String selectStatement;
        if (database.getDatabaseProductName().startsWith("DB2 UDB for AS/400")) {
          selectStatement="select " + database.escapeColumnName(rawCatalogName,rawSchemaName,rawTableName,rawColumnName) + " from "+ rawSchemaName+ "."+ rawTableName+ " where 0=1";
          LogFactory.getLogger().debug("rawCatalogName : <" + rawCatalogName + ">");
          LogFactory.getLogger().debug("rawSchemaName : <" + rawSchemaName + ">");
          LogFactory.getLogger().debug("rawTableName : <" + rawTableName + ">");
          LogFactory.getLogger().debug("raw selectStatement : <" + selectStatement + ">");
        }
 else {
          selectStatement="select " + database.escapeColumnName(rawCatalogName,rawSchemaName,rawTableName,rawColumnName) + " from "+ database.escapeTableName(rawCatalogName,rawSchemaName,rawTableName)+ " where 0=1";
        }
        LogFactory.getLogger().debug("Checking " + rawTableName + "."+ rawCatalogName+ " for auto-increment with SQL: '"+ selectStatement+ "'");
        Connection underlyingConnection=((JdbcConnection)database.getConnection()).getUnderlyingConnection();
        Statement statement=null;
        ResultSet columnSelectRS=null;
        try {
          statement=underlyingConnection.createStatement();
          columnSelectRS=statement.executeQuery(selectStatement);
          if (columnSelectRS.getMetaData().isAutoIncrement(1)) {
            column.setAutoIncrementInformation(new Column.AutoIncrementInformation());
          }
 else {
            column.setAutoIncrementInformation(null);
          }
        }
  finally {
          try {
            if (statement != null) {
              statement.close();
            }
          }
 catch (          SQLException ignore) {
          }
          if (columnSelectRS != null) {
            columnSelectRS.close();
          }
        }
      }
    }
  }
  DataType type=readDataType(columnMetadataResultSet,column,database);
  column.setType(type);
  column.setDefaultValue(readDefaultValue(columnMetadataResultSet,column,database));
  return column;
}
