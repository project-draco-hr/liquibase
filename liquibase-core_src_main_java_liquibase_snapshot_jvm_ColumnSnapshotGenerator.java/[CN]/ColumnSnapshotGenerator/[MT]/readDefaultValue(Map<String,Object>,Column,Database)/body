{
  if (database instanceof MSSQLDatabase) {
    Object defaultValue=columnMetadataResultSet.get("COLUMN_DEF");
    if (defaultValue != null && defaultValue instanceof String) {
      String newValue=null;
      if (defaultValue.equals("(NULL)")) {
        newValue=null;
      }
      columnMetadataResultSet.put("COLUMN_DEF",newValue);
    }
  }
  Object val=columnMetadataResultSet.get("COLUMN_DEF");
  if (val instanceof String && val.equals("")) {
    return null;
  }
  if (val instanceof String) {
    String stringVal=(String)val;
    if (stringVal.startsWith("'") && stringVal.endsWith("'")) {
      stringVal=stringVal.substring(1,stringVal.length() - 1);
    }
 else     if (stringVal.startsWith("(") && stringVal.endsWith(")")) {
      return new DatabaseFunction(stringVal.substring(1,stringVal.length() - 1));
    }
    int type=columnInfo.getType().getDataTypeId();
    try {
      if (type == Types.ARRAY) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.BIGINT) {
        return new BigInteger(stringVal.trim());
      }
 else       if (type == Types.BINARY) {
        return new DatabaseFunction(stringVal.trim());
      }
 else       if (type == Types.BIT) {
        if (stringVal.startsWith("b'")) {
          stringVal=stringVal.replaceFirst("b'","").replaceFirst("'$","");
        }
        return new Integer(stringVal.trim());
      }
 else       if (type == Types.BLOB) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.BOOLEAN) {
        return Boolean.valueOf(stringVal.trim());
      }
 else       if (type == Types.CHAR) {
        return stringVal;
      }
 else       if (type == Types.DATALINK) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.DATE) {
        return new java.sql.Date(getDateFormat(database).parse(stringVal.trim()).getTime());
      }
 else       if (type == Types.DECIMAL) {
        return new BigDecimal(stringVal.trim());
      }
 else       if (type == Types.DISTINCT) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.DOUBLE) {
        return Double.valueOf(stringVal.trim());
      }
 else       if (type == Types.FLOAT) {
        return Float.valueOf(stringVal.trim());
      }
 else       if (type == Types.INTEGER) {
        return Integer.valueOf(stringVal.trim());
      }
 else       if (type == Types.JAVA_OBJECT) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.LONGNVARCHAR) {
        return stringVal;
      }
 else       if (type == Types.LONGVARBINARY) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.LONGVARCHAR) {
        return stringVal;
      }
 else       if (type == Types.NCHAR) {
        return stringVal;
      }
 else       if (type == Types.NCLOB) {
        return stringVal;
      }
 else       if (type == Types.NULL) {
        return null;
      }
 else       if (type == Types.NUMERIC) {
        return new BigDecimal(stringVal.trim());
      }
 else       if (type == Types.NVARCHAR) {
        return stringVal;
      }
 else       if (type == Types.OTHER) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.REAL) {
        return new BigDecimal(stringVal.trim());
      }
 else       if (type == Types.REF) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.ROWID) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.SMALLINT) {
        return Integer.valueOf(stringVal.trim());
      }
 else       if (type == Types.SQLXML) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.STRUCT) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.TIME) {
        return new java.sql.Time(getTimeFormat(database).parse(stringVal).getTime());
      }
 else       if (type == Types.TIMESTAMP) {
        return new Timestamp(getDateTimeFormat(database).parse(stringVal).getTime());
      }
 else       if (type == Types.TINYINT) {
        return Integer.valueOf(stringVal.trim());
      }
 else       if (type == Types.VARBINARY) {
        return new DatabaseFunction(stringVal);
      }
 else       if (type == Types.VARCHAR) {
        return stringVal;
      }
 else {
        LogFactory.getLogger().info("Unknown type: " + type);
        return new DatabaseFunction(stringVal);
      }
    }
 catch (    ParseException e) {
      return new DatabaseFunction(stringVal);
    }
  }
  return val;
}
