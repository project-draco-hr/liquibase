{
  if (parameterName == null) {
    throw new UnexpectedLiquibaseException("Unexpected null parameterName");
  }
  if (parameterName.contains(" ")) {
    throw new UnexpectedLiquibaseException("Unexpected space in parameterName");
  }
  if (displayName == null) {
    throw new UnexpectedLiquibaseException("Unexpected null displayName");
  }
  if (dataType == null) {
    throw new UnexpectedLiquibaseException("Unexpected null dataType");
  }
  this.change=change;
  this.parameterName=parameterName;
  this.displayName=displayName;
  this.description=description;
  this.exampleValues=exampleValues;
  if (dataType instanceof Class) {
    this.dataType=StringUtils.lowerCaseFirst(((Class)dataType).getSimpleName());
    this.dataTypeClass=(Class)dataType;
  }
 else   if (dataType instanceof ParameterizedType) {
    this.dataType=StringUtils.lowerCaseFirst(((Class)((ParameterizedType)dataType).getRawType()).getSimpleName() + " of " + StringUtils.lowerCaseFirst(((Class)((ParameterizedType)dataType).getActualTypeArguments()[0]).getSimpleName()));
    this.dataTypeClass=(Class)((ParameterizedType)dataType).getRawType();
    this.dataTypeClassParameters=((ParameterizedType)dataType).getActualTypeArguments();
  }
  this.mustEqualExisting=mustEqualExisting;
  this.serializationType=serializationType;
  this.since=since;
  this.supportedDatabases=Collections.unmodifiableSet(analyzeSupportedDatabases(supportedDatabases));
  this.requiredForDatabase=Collections.unmodifiableSet(analyzeRequiredDatabases(requiredForDatabase));
}
