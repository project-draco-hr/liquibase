{
  Database database=snapshot.getDatabase();
  Schema match=null;
  String catalogName=((Schema)example).getCatalogName();
  String schemaName=example.getName();
  if (database.supportsSchemas()) {
    if (catalogName == null) {
      catalogName=database.getDefaultCatalogName();
    }
    if (schemaName == null) {
      schemaName=database.getDefaultSchemaName();
    }
  }
 else {
    if (database.supportsCatalogs()) {
      if (catalogName == null && schemaName != null) {
        catalogName=schemaName;
        schemaName=null;
      }
    }
 else {
      catalogName=null;
      schemaName=null;
    }
  }
  example=new Schema(catalogName,schemaName);
  ObjectQuotingStrategy currentStrategy=database.getObjectQuotingStrategy();
  database.setObjectQuotingStrategy(ObjectQuotingStrategy.LEGACY);
  try {
    if (database.supportsSchemas()) {
      for (      String tableSchema : getDatabaseSchemaNames(database)) {
        CatalogAndSchema schemaFromJdbcInfo=toCatalogAndSchema(tableSchema,database);
        Catalog catalog=new Catalog(schemaFromJdbcInfo.getCatalogName());
        Schema schema=new Schema(catalog,tableSchema);
        if (DatabaseObjectComparatorFactory.getInstance().isSameObject(schema,example,snapshot.getSchemaComparisons(),database)) {
          if (match == null) {
            match=schema;
          }
 else {
            throw new InvalidExampleException("Found multiple catalog/schemas matching " + ((Schema)example).getCatalogName() + "."+ example.getName());
          }
        }
      }
    }
 else {
      Catalog catalog=new Catalog(catalogName);
      match=new Schema(catalog,catalogName);
    }
  }
 catch (  SQLException e) {
    throw new DatabaseException(e);
  }
 finally {
    database.setObjectQuotingStrategy(currentStrategy);
  }
  if (match != null && (match.getName() == null || match.getName().equalsIgnoreCase(database.getDefaultSchemaName()))) {
    match.setDefault(true);
  }
  return match;
}
