{
  changeLogParameters.setContexts(contexts);
  changeLogParameters.setLabels(labelExpression);
  LockService lockService=LockServiceFactory.getInstance().getLockService(database);
  lockService.waitForLock();
  try {
    DatabaseChangeLog changeLog=getDatabaseChangeLog();
    checkLiquibaseTables(false,changeLog,contexts,labelExpression);
    changeLog.validate(database,contexts,labelExpression);
    changeLog.setIgnoreClasspathPrefix(ignoreClasspathPrefix);
    List<RanChangeSet> ranChangeSetList=database.getRanChangeSetList();
    ChangeLogIterator logIterator=new ChangeLogIterator(ranChangeSetList,changeLog,new ExecutedAfterChangeSetFilter(dateToRollBackTo,ranChangeSetList),new AlreadyRanChangeSetFilter(ranChangeSetList,ignoreClasspathPrefix),new ContextChangeSetFilter(contexts),new LabelChangeSetFilter(labelExpression),new DbmsChangeSetFilter(database));
    logIterator.run(new RollbackVisitor(database,changeExecListener),new RuntimeEnvironment(database,contexts,labelExpression));
  }
  finally {
    lockService.releaseLock();
  }
  resetServices();
}
