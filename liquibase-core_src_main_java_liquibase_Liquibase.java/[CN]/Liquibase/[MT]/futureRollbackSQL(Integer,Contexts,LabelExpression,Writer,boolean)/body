{
  changeLogParameters.setContexts(contexts);
  changeLogParameters.setLabels(labelExpression);
  LoggingExecutor outputTemplate=new LoggingExecutor(ExecutorService.getInstance().getExecutor(database),output,database);
  Executor oldTemplate=ExecutorService.getInstance().getExecutor(database);
  ExecutorService.getInstance().setExecutor(database,outputTemplate);
  outputHeader("SQL to roll back currently unexecuted changes");
  LockService lockService=LockServiceFactory.getInstance().getLockService(database);
  lockService.waitForLock();
  try {
    DatabaseChangeLog changeLog=getDatabaseChangeLog();
    if (checkLiquibaseTables) {
      checkLiquibaseTables(false,changeLog,contexts,labelExpression);
    }
    changeLog.validate(database,contexts,labelExpression);
    ChangeLogIterator logIterator;
    if (count == null) {
      logIterator=new ChangeLogIterator(changeLog,new NotRanChangeSetFilter(database.getRanChangeSetList()),new ContextChangeSetFilter(contexts),new LabelChangeSetFilter(labelExpression),new DbmsChangeSetFilter(database));
    }
 else {
      ChangeLogIterator forwardIterator=new ChangeLogIterator(changeLog,new NotRanChangeSetFilter(database.getRanChangeSetList()),new ContextChangeSetFilter(contexts),new LabelChangeSetFilter(labelExpression),new DbmsChangeSetFilter(database),new CountChangeSetFilter(count));
      final ListVisitor listVisitor=new ListVisitor();
      forwardIterator.run(listVisitor,new RuntimeEnvironment(database,contexts,labelExpression));
      logIterator=new ChangeLogIterator(changeLog,new NotRanChangeSetFilter(database.getRanChangeSetList()),new ContextChangeSetFilter(contexts),new LabelChangeSetFilter(labelExpression),new DbmsChangeSetFilter(database),new ChangeSetFilter(){
        @Override public ChangeSetFilterResult accepts(        ChangeSet changeSet){
          return new ChangeSetFilterResult(listVisitor.getSeenChangeSets().contains(changeSet),null,null);
        }
      }
);
    }
    logIterator.run(new RollbackVisitor(database,changeExecListener),new RuntimeEnvironment(database,contexts,labelExpression));
  }
  finally {
    lockService.releaseLock();
    ExecutorService.getInstance().setExecutor(database,oldTemplate);
    resetServices();
  }
  try {
    output.flush();
  }
 catch (  IOException e) {
    throw new LiquibaseException(e);
  }
}
