{
  changeLogParameters.setContexts(contexts);
  LoggingExecutor outputTemplate=new LoggingExecutor(ExecutorService.getInstance().getExecutor(database),output,database);
  Executor oldTemplate=ExecutorService.getInstance().getExecutor(database);
  ExecutorService.getInstance().setExecutor(database,outputTemplate);
  outputHeader("SQL to roll back currently unexecuted changes");
  LockService lockService=getLockService();
  lockService.waitForLock();
  try {
    DatabaseChangeLog changeLog=ChangeLogParserFactory.getInstance().getParser(changeLogFile,resourceAccessor).parse(changeLogFile,changeLogParameters,resourceAccessor);
    checkDatabaseChangeLogTable(false,changeLog,contexts);
    changeLog.validate(database,contexts);
    ChangeLogIterator logIterator;
    if (count == null) {
      logIterator=new ChangeLogIterator(changeLog,new NotRanChangeSetFilter(database.getRanChangeSetList()),new ContextChangeSetFilter(contexts),new DbmsChangeSetFilter(database));
    }
 else {
      ChangeLogIterator forwardIterator=new ChangeLogIterator(changeLog,new NotRanChangeSetFilter(database.getRanChangeSetList()),new ContextChangeSetFilter(contexts),new DbmsChangeSetFilter(database),new CountChangeSetFilter(count));
      final ListVisitor listVisitor=new ListVisitor();
      forwardIterator.run(listVisitor,database);
      logIterator=new ChangeLogIterator(changeLog,new NotRanChangeSetFilter(database.getRanChangeSetList()),new ContextChangeSetFilter(contexts),new DbmsChangeSetFilter(database),new ChangeSetFilter(){
        public boolean accepts(        ChangeSet changeSet){
          return listVisitor.getSeenChangeSets().contains(changeSet);
        }
      }
);
    }
    logIterator.run(new RollbackVisitor(database),database);
  }
  finally {
    lockService.releaseLock();
    ExecutorService.getInstance().setExecutor(database,oldTemplate);
  }
  try {
    output.flush();
  }
 catch (  IOException e) {
    throw new LiquibaseException(e);
  }
}
