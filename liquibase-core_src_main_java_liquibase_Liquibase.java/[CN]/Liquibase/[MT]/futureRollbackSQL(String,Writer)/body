{
  LoggingExecutor outputTemplate=new LoggingExecutor(ExecutorService.getInstance().getExecutor(database),output,database);
  Executor oldTemplate=ExecutorService.getInstance().getExecutor(database);
  ExecutorService.getInstance().setExecutor(database,outputTemplate);
  outputHeader("SQL to roll back currently unexecuted changes");
  LockService lockService=LockService.getInstance(database);
  lockService.waitForLock();
  try {
    database.checkDatabaseChangeLogTable();
    DatabaseChangeLog changeLog=ChangeLogParserFactory.getInstance().getParser(changeLogFile).parse(changeLogFile,changeLogParameters,resourceAccessor);
    changeLog.validate(database);
    ChangeLogIterator logIterator=new ChangeLogIterator(changeLog,new NotRanChangeSetFilter(database.getRanChangeSetList()),new ContextChangeSetFilter(contexts),new DbmsChangeSetFilter(database));
    logIterator.run(new RollbackVisitor(database),database);
  }
  finally {
    ExecutorService.getInstance().setExecutor(database,oldTemplate);
    lockService.releaseLock();
  }
  try {
    output.flush();
  }
 catch (  IOException e) {
    throw new LiquibaseException(e);
  }
}
