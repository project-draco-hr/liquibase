{
  if (!commandLine.hasOption("databases")) {
    mainApp.fatal("vagrant init requires --databases option");
  }
  String[] databaseConfigs=commandLine.getOptionValue("databases").split("\\s*,\\s*");
  mainApp.out("Vagrant Machine Setup:");
  mainApp.out(StringUtils.indent("Local Path: " + vagrantInfo.boxDir.getAbsolutePath()));
  mainApp.out(StringUtils.indent("Config Name: " + vagrantInfo.boxName));
  mainApp.out(StringUtils.indent("Database Config(s): " + StringUtils.join(databaseConfigs,", ")));
  Collection<ConnectionSupplier> databases=null;
  try {
    databases=ConnectionConfigurationFactory.getInstance().findConfigurations(databaseConfigs);
  }
 catch (  ConnectionConfigurationFactory.UnknownDatabaseException e) {
    mainApp.fatal(e);
  }
  for (  ConnectionSupplier connectionConfig : databases) {
    if (vagrantInfo.baseBoxName == null) {
      vagrantInfo.baseBoxName=connectionConfig.getVagrantBaseBoxName();
    }
 else {
      if (!vagrantInfo.baseBoxName.equals(connectionConfig.getVagrantBaseBoxName())) {
        throw new UnexpectedLiquibaseException("Configuration " + connectionConfig + " needs vagrant box "+ connectionConfig.getVagrantBaseBoxName()+ ", not "+ vagrantInfo.baseBoxName+ " like other configurations");
      }
    }
    if (vagrantInfo.hostName == null) {
      vagrantInfo.hostName=connectionConfig.getIpAddress();
    }
 else {
      if (!vagrantInfo.hostName.equals(connectionConfig.getIpAddress())) {
        throw new UnexpectedLiquibaseException("Configuration " + connectionConfig + " does not match previously defined hostname "+ vagrantInfo.hostName);
      }
    }
  }
  mainApp.out(StringUtils.indent("Vagrant Box: " + vagrantInfo.baseBoxName));
  mainApp.out(StringUtils.indent("Hostname: " + vagrantInfo.hostName));
  mainApp.out("");
  for (  ConnectionSupplier config : databases) {
    mainApp.out("Database Configuration For '" + config.toString() + "':");
    mainApp.out(StringUtils.indent(config.getDescription()));
    mainApp.out("");
  }
  writeVagrantFile(vagrantInfo);
  writePuppetFiles(vagrantInfo,databases);
  writeConfigFiles(vagrantInfo,databases);
  Set<String> propertiesFiles=new HashSet<String>();
  for (  ConnectionSupplier connectionSupplier : databases) {
    String fileName;
    if (databases.size() == 1) {
      fileName="liquibase." + vagrantInfo.boxDir.getName() + ".properties";
    }
 else {
      fileName="liquibase." + vagrantInfo.boxDir.getName() + "-"+ connectionSupplier.getDatabaseShortName()+ ".properties";
    }
    String propertiesFile="### Connection Property File For Vagrant Box '" + vagrantInfo.boxName + "'\n"+ "### Example use: .."+ File.separator+ ".."+ File.separator+ "liquibase --defaultsFile="+ fileName+ " update\n\n"+ "classpath: changelog\n"+ "changeLogFile=com/example/changelog.xml\n"+ "username="+ connectionSupplier.getDatabaseUsername()+ "\n"+ "password="+ connectionSupplier.getDatabaseUsername()+ "\n"+ "url="+ connectionSupplier.getJdbcUrl()+ "\n"+ "#logLevel=DEBUG\n"+ "#referenceUrl="+ connectionSupplier.getJdbcUrl()+ "\n"+ "#referenceUsername="+ connectionSupplier.getDatabaseUsername()+ "\n"+ "#referencePassword="+ connectionSupplier.getDatabasePassword()+ "\n";
    fileName="workspace/" + fileName;
    File propertyFile=new File(mainApp.getSdkRoot(),fileName);
    if (propertyFile.exists()) {
      mainApp.out("NOTE: Not overwriting existing workspace properties file " + propertyFile.getAbsolutePath());
    }
 else {
      FileWriter writer=new FileWriter(propertyFile);
      try {
        writer.write(propertiesFile);
      }
  finally {
        writer.flush();
        writer.close();
      }
      propertiesFiles.add(fileName);
    }
  }
  mainApp.out("Vagrant Box " + vagrantInfo.boxName + " created. To start the box, run 'liquibase-sdk vagrant "+ vagrantInfo.boxName+ "' up");
  if (propertiesFiles.size() > 0) {
    mainApp.out("Created workspace properties file(s): " + StringUtils.join(propertiesFiles,", "));
  }
  mainApp.out("Make sure any needed JDBC drivers are added to LIQUIBASE_HOME/lib");
  mainApp.out("NOTE: If you do not already have a vagrant box called " + vagrantInfo.baseBoxName + " installed, run 'vagrant box add "+ vagrantInfo.baseBoxName+ " VALID_URL'");
}
