{
  StringBuffer sql=new StringBuffer("DELETE FROM " + database.escapeTableName(statement.getCatalogName(),statement.getSchemaName(),statement.getTableName()));
  if (statement.getWhere() != null) {
    String fixedWhereClause="WHERE " + statement.getWhere();
    Matcher matcher=Pattern.compile(":name|\\?|:value").matcher(fixedWhereClause);
    StringBuffer sb=new StringBuffer();
    Iterator<String> columnNameIter=statement.getWhereColumnNames().iterator();
    Iterator<Object> paramIter=statement.getWhereParameters().iterator();
    while (matcher.find()) {
      if (matcher.group().equals(":name")) {
        while (columnNameIter.hasNext()) {
          String columnName=columnNameIter.next();
          if (columnName == null) {
            continue;
          }
          matcher.appendReplacement(sb,Matcher.quoteReplacement(database.escapeObjectName(columnName,Column.class)));
        }
      }
 else       if (paramIter.hasNext()) {
        Object param=paramIter.next();
        matcher.appendReplacement(sb,Matcher.quoteReplacement(DataTypeFactory.getInstance().fromObject(param,database).objectToSql(param,database)));
      }
    }
    matcher.appendTail(sb);
    fixedWhereClause=sb.toString();
    sql.append(" ").append(fixedWhereClause);
  }
  return new Sql[]{new UnparsedSql(sql.toString(),getAffectedTable(statement))};
}
