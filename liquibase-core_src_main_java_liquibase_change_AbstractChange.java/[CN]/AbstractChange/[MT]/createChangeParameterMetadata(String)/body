{
  String displayName=parameterName.replaceAll("([A-Z])"," $1");
  displayName=displayName.substring(0,1).toUpperCase() + displayName.substring(1);
  PropertyDescriptor property=null;
  for (  PropertyDescriptor prop : Introspector.getBeanInfo(this.getClass()).getPropertyDescriptors()) {
    if (prop.getDisplayName().equals(parameterName)) {
      property=prop;
      break;
    }
  }
  if (property == null) {
    throw new UnexpectedLiquibaseException("Could not find property " + parameterName);
  }
  Class type=property.getPropertyType();
  Method readMethod=property.getReadMethod();
  if (readMethod == null) {
    readMethod=getClass().getMethod("is" + StringUtils.upperCaseFirst(property.getName()));
  }
  DatabaseChangeProperty changePropertyAnnotation=readMethod.getAnnotation(DatabaseChangeProperty.class);
  String[] requiredForDatabase;
  String mustEqualExisting=null;
  String description=null;
  String example=null;
  SerializationType serializationType=SerializationType.NAMED_FIELD;
  if (changePropertyAnnotation == null) {
    requiredForDatabase=new String[]{"none"};
  }
 else {
    requiredForDatabase=changePropertyAnnotation.requiredForDatabase();
    mustEqualExisting=changePropertyAnnotation.mustEqualExisting();
    serializationType=changePropertyAnnotation.serializationType();
    description=StringUtils.trimToNull(changePropertyAnnotation.description());
    example=StringUtils.trimToNull(changePropertyAnnotation.exampleValue());
  }
  return new ChangeParameterMetaData(parameterName,displayName,description,example,type,requiredForDatabase,mustEqualExisting,serializationType);
}
