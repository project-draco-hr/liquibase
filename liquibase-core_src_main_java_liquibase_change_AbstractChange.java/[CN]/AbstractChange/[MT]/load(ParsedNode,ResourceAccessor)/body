{
  ChangeMetaData metaData=ChangeFactory.getInstance().getChangeMetaData(this);
  this.setResourceAccessor(resourceAccessor);
  try {
    Collection<ChangeParameterMetaData> changeParameters=metaData.getParameters().values();
    for (    ParsedNode node : parsedNode.getChildren()) {
      boolean validNode=false;
      for (      ChangeParameterMetaData changeParam : changeParameters) {
        if (changeParam.getParameterName().equals(node.getName())) {
          validNode=true;
          break;
        }
      }
      if (!validNode) {
        throw new ParsedNodeException("Unexpected node: " + node.getName());
      }
    }
    for (    ChangeParameterMetaData param : changeParameters) {
      if (Collection.class.isAssignableFrom(param.getDataTypeClass())) {
        if (param.getDataTypeClassParameters().length == 1) {
          Class collectionType=(Class)param.getDataTypeClassParameters()[0];
          if (ColumnConfig.class.isAssignableFrom(collectionType)) {
            List<ParsedNode> columnNodes=new ArrayList<ParsedNode>(parsedNode.getChildren(null,param.getParameterName()));
            columnNodes.addAll(parsedNode.getChildren(null,"column"));
            Object nodeValue=parsedNode.getValue();
            if (nodeValue instanceof ParsedNode) {
              columnNodes.add((ParsedNode)nodeValue);
            }
 else             if (nodeValue instanceof Collection) {
              for (              Object nodeValueChild : ((Collection)nodeValue)) {
                if (nodeValueChild instanceof ParsedNode) {
                  columnNodes.add((ParsedNode)nodeValueChild);
                }
              }
            }
            for (            ParsedNode child : columnNodes) {
              if (child.getName().equals("column") || child.getName().equals("columns")) {
                List<ParsedNode> columnChildren=child.getChildren(null,"column");
                if (columnChildren != null && columnChildren.size() > 0) {
                  for (                  ParsedNode columnChild : columnChildren) {
                    ColumnConfig columnConfig=(ColumnConfig)collectionType.newInstance();
                    columnConfig.load(columnChild,resourceAccessor);
                    ((ChangeWithColumns)this).addColumn(columnConfig);
                  }
                }
 else {
                  ColumnConfig columnConfig=(ColumnConfig)collectionType.newInstance();
                  columnConfig.load(child,resourceAccessor);
                  ((ChangeWithColumns)this).addColumn(columnConfig);
                }
              }
            }
          }
 else           if (LiquibaseSerializable.class.isAssignableFrom(collectionType)) {
            if (!collectionType.isInterface() && !Modifier.isAbstract(collectionType.getModifiers())) {
              String elementName=((LiquibaseSerializable)collectionType.newInstance()).getSerializedObjectName();
              List<ParsedNode> nodes=new ArrayList<ParsedNode>(parsedNode.getChildren(null,param.getParameterName()));
              nodes.addAll(parsedNode.getChildren(null,elementName));
              Object nodeValue=parsedNode.getValue();
              if (nodeValue instanceof ParsedNode) {
                nodes.add((ParsedNode)nodeValue);
              }
 else               if (nodeValue instanceof Collection) {
                for (                Object nodeValueChild : ((Collection)nodeValue)) {
                  if (nodeValueChild instanceof ParsedNode) {
                    nodes.add((ParsedNode)nodeValueChild);
                  }
                }
              }
              for (              ParsedNode node : nodes) {
                if (node.getName().equals(elementName) || node.getName().equals(param.getParameterName())) {
                  List<ParsedNode> childNodes=node.getChildren(null,elementName);
                  if (childNodes != null && childNodes.size() > 0) {
                    for (                    ParsedNode childNode : childNodes) {
                      LiquibaseSerializable childObject=(LiquibaseSerializable)collectionType.newInstance();
                      childObject.load(childNode,resourceAccessor);
                      ((Collection)param.getCurrentValue(this)).add(childObject);
                    }
                  }
 else {
                    LiquibaseSerializable childObject=(LiquibaseSerializable)collectionType.newInstance();
                    childObject.load(node,resourceAccessor);
                    ((Collection)param.getCurrentValue(this)).add(childObject);
                  }
                }
              }
            }
          }
        }
      }
 else       if (LiquibaseSerializable.class.isAssignableFrom(param.getDataTypeClass())) {
        if (!param.getDataTypeClass().isInterface() && !Modifier.isAbstract(param.getDataTypeClass().getModifiers())) {
          try {
            ParsedNode child=parsedNode.getChild(null,param.getParameterName());
            if (child != null) {
              LiquibaseSerializable serializableChild=(LiquibaseSerializable)param.getDataTypeClass().newInstance();
              serializableChild.load(child,resourceAccessor);
              param.setValue(this,serializableChild);
            }
          }
 catch (          InstantiationException e) {
            throw new UnexpectedLiquibaseException(e);
          }
catch (          IllegalAccessException e) {
            throw new UnexpectedLiquibaseException(e);
          }
        }
      }
 else {
        Object childValue=parsedNode.getChildValue(null,param.getParameterName(),param.getDataTypeClass());
        if (childValue == null && param.getSerializationType() == SerializationType.DIRECT_VALUE) {
          childValue=parsedNode.getValue();
        }
        param.setValue(this,childValue);
      }
    }
  }
 catch (  InstantiationException e) {
    throw new UnexpectedLiquibaseException(e);
  }
catch (  IllegalAccessException e) {
    throw new UnexpectedLiquibaseException(e);
  }
  customLoadLogic(parsedNode,resourceAccessor);
  try {
    this.finishInitialization();
  }
 catch (  SetupException e) {
    throw new ParsedNodeException(e);
  }
}
