{
  ChangeMetaData metaData=ChangeFactory.getInstance().getChangeMetaData(this);
  this.setResourceAccessor(resourceAccessor);
  try {
    for (    ChangeParameterMetaData param : metaData.getParameters().values()) {
      if (Collection.class.isAssignableFrom(param.getDataTypeClass())) {
        Class collectionType=(Class)param.getDataTypeClassParameters()[0];
        if (param.getDataTypeClassParameters().length == 1 && ColumnConfig.class.isAssignableFrom(collectionType)) {
          List<ParsedNode> columnNodes=new ArrayList<ParsedNode>(parsedNode.getChildren(null,param.getParameterName()));
          columnNodes.addAll(parsedNode.getChildren(null,"column"));
          for (          ParsedNode child : columnNodes) {
            ColumnConfig columnConfig=(ColumnConfig)collectionType.newInstance();
            columnConfig.load(child,resourceAccessor);
            ((ChangeWithColumns)this).addColumn(columnConfig);
          }
        }
      }
 else {
        param.setValue(this,parsedNode.getChildValue(null,param.getParameterName(),param.getDataTypeClass()));
      }
    }
  }
 catch (  InstantiationException e) {
    throw new UnexpectedLiquibaseException(e);
  }
catch (  IllegalAccessException e) {
    throw new UnexpectedLiquibaseException(e);
  }
  customLoadLogic(parsedNode,resourceAccessor);
  this.finishInitialization();
}
