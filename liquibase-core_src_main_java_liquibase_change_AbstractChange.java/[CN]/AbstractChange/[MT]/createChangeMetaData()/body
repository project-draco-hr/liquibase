{
  try {
    ChangeClass changeClass=this.getClass().getAnnotation(ChangeClass.class);
    if (changeClass == null) {
      throw new UnexpectedLiquibaseException("No @ChangeClass annotation for " + getClass().getName());
    }
    Set<ChangeParameterMetaData> params=new HashSet<ChangeParameterMetaData>();
    for (    PropertyDescriptor property : Introspector.getBeanInfo(this.getClass()).getPropertyDescriptors()) {
      Method readMethod=property.getReadMethod();
      Method writeMethod=property.getWriteMethod();
      if (readMethod != null && writeMethod != null) {
        ChangeProperty annotation=readMethod.getAnnotation(ChangeProperty.class);
        if (annotation == null || annotation.includeInMetaData()) {
          String paramName=property.getDisplayName();
          String displayName=paramName.replaceAll("([A-Z])"," $1");
          displayName=displayName.substring(0,1).toUpperCase() + displayName.substring(1);
          String type=property.getPropertyType().getSimpleName();
          ChangeParameterMetaData param=new ChangeParameterMetaData(paramName,displayName,type);
          params.add(param);
        }
      }
    }
    return new ChangeMetaData(changeClass.name(),changeClass.description(),changeClass.priority(),params);
  }
 catch (  Throwable e) {
    throw new UnexpectedLiquibaseException(e);
  }
}
