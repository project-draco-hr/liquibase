{
  try {
    DatabaseChange databaseChange=this.getClass().getAnnotation(DatabaseChange.class);
    if (databaseChange == null) {
      throw new UnexpectedLiquibaseException("No @DatabaseChange annotation for " + getClass().getName());
    }
    Map<String,ChangeParameterMetaData> params=new HashMap<String,ChangeParameterMetaData>();
    for (    PropertyDescriptor property : Introspector.getBeanInfo(this.getClass()).getPropertyDescriptors()) {
      Method readMethod=property.getReadMethod();
      Method writeMethod=property.getWriteMethod();
      if (readMethod == null) {
        try {
          readMethod=this.getClass().getMethod("is" + StringUtils.upperCaseFirst(property.getName()));
        }
 catch (        Exception ignore) {
        }
      }
      if (readMethod != null && writeMethod != null) {
        DatabaseChangeProperty annotation=readMethod.getAnnotation(DatabaseChangeProperty.class);
        if (annotation == null || annotation.isChangeProperty()) {
          ChangeParameterMetaData param=createChangeParameterMetadata(property.getDisplayName());
          params.put(param.getParameterName(),param);
        }
      }
    }
    return new ChangeMetaData(databaseChange.name(),databaseChange.description(),databaseChange.priority(),databaseChange.appliesTo(),params);
  }
 catch (  Throwable e) {
    throw new UnexpectedLiquibaseException(e);
  }
}
