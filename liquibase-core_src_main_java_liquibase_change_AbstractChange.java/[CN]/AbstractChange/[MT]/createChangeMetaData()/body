{
  try {
    DatabaseChange databaseChange=this.getClass().getAnnotation(DatabaseChange.class);
    if (databaseChange == null) {
      throw new UnexpectedLiquibaseException("No @DatabaseChange annotation for " + getClass().getName());
    }
    Set<ChangeParameterMetaData> params=new HashSet<ChangeParameterMetaData>();
    for (    PropertyDescriptor property : PropertyUtils.getInstance().getDescriptors(getClass())) {
      if (isInvalidProperty(property)) {
        continue;
      }
      Method readMethod=property.getReadMethod();
      Method writeMethod=property.getWriteMethod();
      if (readMethod == null) {
        try {
          readMethod=this.getClass().getMethod("is" + StringUtils.upperCaseFirst(property.getName()));
        }
 catch (        Exception ignore) {
        }
      }
      if (readMethod != null && writeMethod != null) {
        DatabaseChangeProperty annotation=readMethod.getAnnotation(DatabaseChangeProperty.class);
        if (annotation == null || annotation.isChangeProperty()) {
          params.add(createChangeParameterMetadata(property.getDisplayName()));
        }
      }
    }
    Map<String,String> notes=new HashMap<String,String>();
    for (    DatabaseChangeNote note : databaseChange.databaseNotes()) {
      notes.put(note.database(),note.notes());
    }
    return new ChangeMetaData(databaseChange.name(),databaseChange.description(),databaseChange.priority(),databaseChange.appliesTo(),notes,params);
  }
 catch (  Throwable e) {
    throw new UnexpectedLiquibaseException(e);
  }
}
