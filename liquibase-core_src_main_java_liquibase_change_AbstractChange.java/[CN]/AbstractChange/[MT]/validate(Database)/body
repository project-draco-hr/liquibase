{
  ValidationErrors changeValidationErrors=new ValidationErrors();
  for (  ChangeParameterMetaData param : ChangeFactory.getInstance().getChangeMetaData(this).getParameters().values()) {
    if (param.isRequiredFor(database) && param.getCurrentValue(this) == null) {
      changeValidationErrors.addError(param.getParameterName() + " is required for " + ChangeFactory.getInstance().getChangeMetaData(this).getName()+ " on "+ database.getShortName());
    }
  }
  if (changeValidationErrors.hasErrors()) {
    return changeValidationErrors;
  }
  String unsupportedWarning=ChangeFactory.getInstance().getChangeMetaData(this).getName() + " is not supported on " + database.getShortName();
  if (!this.supports(database)) {
    changeValidationErrors.addError(unsupportedWarning);
  }
 else   if (!generateStatementsVolatile(database)) {
    boolean sawUnsupportedError=false;
    SqlStatement[] statements;
    statements=generateStatements(database);
    if (statements != null) {
      for (      SqlStatement statement : statements) {
        boolean supported=SqlGeneratorFactory.getInstance().supports(statement,database);
        if (!supported && !sawUnsupportedError) {
          if (!statement.skipOnUnsupported()) {
            changeValidationErrors.addError(unsupportedWarning);
            sawUnsupportedError=true;
          }
        }
 else {
          changeValidationErrors.addAll(SqlGeneratorFactory.getInstance().validate(statement,database));
        }
      }
    }
  }
  return changeValidationErrors;
}
