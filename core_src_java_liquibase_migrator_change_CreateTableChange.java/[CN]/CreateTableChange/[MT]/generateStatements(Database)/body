{
  List<String> pkColumns=new ArrayList<String>();
  for (  ColumnConfig column : getColumns()) {
    if (column.getConstraints() != null && column.getConstraints().isPrimaryKey() != null && column.getConstraints().isPrimaryKey()) {
      pkColumns.add(column.getName());
    }
  }
  StringBuffer fkConstraints=new StringBuffer();
  StringBuffer buffer=new StringBuffer();
  buffer.append("CREATE TABLE ").append(getTableName()).append(" ");
  buffer.append("(");
  Iterator<ColumnConfig> iterator=getColumns().iterator();
  while (iterator.hasNext()) {
    ColumnConfig column=iterator.next();
    ConstraintsConfig constraints=column.getConstraints();
    buffer.append(column.getName());
    if (column.getType() != null) {
      buffer.append(" ").append(database.getColumnType(column));
    }
    if (column.getDefaultValue() != null || column.getDefaultValueBoolean() != null || column.getDefaultValueDate() != null || column.getDefaultValueNumeric() != null) {
      buffer.append(" DEFAULT ").append(column.getDefaultColumnValue(database));
    }
    if (column.isAutoIncrement() != null && column.isAutoIncrement()) {
      buffer.append(" ").append(database.getAutoIncrementClause()).append(" ");
    }
    if (constraints != null) {
      if (constraints.isNullable() != null && !constraints.isNullable()) {
        buffer.append(" NOT NULL");
      }
 else {
        if (database instanceof SybaseDatabase) {
          buffer.append(" NULL");
        }
      }
      if (pkColumns.size() == 1 && constraints.isPrimaryKey() != null && constraints.isPrimaryKey()) {
        buffer.append(" PRIMARY KEY");
      }
      if (constraints.getReferences() != null) {
        fkConstraints.append(" CONSTRAINT ").append(constraints.getForeignKeyName()).append(" FOREIGN KEY (").append(column.getName()).append(") REFERENCES ").append(constraints.getReferences());
        if (constraints.isInitiallyDeferred() != null && constraints.isInitiallyDeferred()) {
          fkConstraints.append(" INITIALLY DEFERRED");
        }
        if (constraints.isDeferrable() != null && constraints.isDeferrable()) {
          fkConstraints.append(" DEFERRABLE");
        }
        fkConstraints.append(",");
      }
      if (constraints.isUnique() != null && constraints.isUnique()) {
        buffer.append(" UNIQUE");
      }
      if (constraints.getCheck() != null)       buffer.append(constraints.getCheck()).append(" ");
    }
    if (iterator.hasNext()) {
      buffer.append(", ");
    }
  }
  if (fkConstraints.length() > 0) {
    buffer.append(", ").append(fkConstraints.toString().replaceFirst(",$",""));
  }
  buffer.append(")");
  if (StringUtils.trimToNull(tablespace) != null && database.supportsTablespaces()) {
    if (database instanceof MSSQLDatabase) {
      buffer.append(" ON ").append(tablespace);
    }
 else     if (database instanceof DB2Database) {
      buffer.append(" IN ").append(tablespace);
    }
 else {
      buffer.append(" TABLESPACE ").append(tablespace);
    }
  }
  List<String> statements=new ArrayList<String>();
  statements.add(buffer.toString().trim());
  if (pkColumns.size() > 1) {
    AddPrimaryKeyChange addPKChange=new AddPrimaryKeyChange();
    addPKChange.setTableName(getTableName());
    addPKChange.setConstraintName(("PK_" + getTableName()).toUpperCase());
    addPKChange.setColumnNames(StringUtils.join(pkColumns,","));
    statements.addAll(Arrays.asList(addPKChange.generateStatements(database)));
  }
  return statements.toArray(new String[statements.size()]);
}
