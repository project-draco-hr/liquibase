{
  if (!supportsDatabase(database)) {
    throw new StatementNotSupportedOnDatabaseException(this,database);
  }
  String sql="ALTER TABLE " + database.escapeTableName(getBaseTableSchemaName(),getBaseTableName()) + " ADD CONSTRAINT "+ database.escapeConstraintName(getConstraintName())+ " FOREIGN KEY ("+ database.escapeColumnNameList(getBaseColumnNames())+ ") REFERENCES "+ database.escapeTableName(getReferencedTableSchemaName(),getReferencedTableName())+ "("+ database.escapeColumnNameList(getReferencedColumnNames())+ ")";
  if (this.updateRule != null) {
switch (this.updateRule) {
case DatabaseMetaData.importedKeyCascade:
      sql+=" ON UPDATE CASCADE";
    break;
case DatabaseMetaData.importedKeySetNull:
  sql+=" ON UPDATE SET NULL";
break;
case DatabaseMetaData.importedKeySetDefault:
sql+=" ON UPDATE SET DEFAULT";
break;
case DatabaseMetaData.importedKeyRestrict:
if (database.supportsRestrictForeignKeys()) {
sql+=" ON UPDATE RESTRICT";
}
break;
case DatabaseMetaData.importedKeyNoAction:
break;
default :
break;
}
}
if (this.deleteRule != null) {
switch (this.deleteRule) {
case DatabaseMetaData.importedKeyCascade:
sql+=" ON DELETE CASCADE";
break;
case DatabaseMetaData.importedKeySetNull:
sql+=" ON DELETE SET NULL";
break;
case DatabaseMetaData.importedKeySetDefault:
sql+=" ON DELETE SET DEFAULT";
break;
case DatabaseMetaData.importedKeyRestrict:
if (database.supportsRestrictForeignKeys()) {
sql+=" ON DELETE RESTRICT";
}
break;
case DatabaseMetaData.importedKeyNoAction:
break;
default :
break;
}
}
if (isDeferrable() || isInitiallyDeferred()) {
if (!database.supportsInitiallyDeferrableColumns()) {
throw new StatementNotSupportedOnDatabaseException("Database does not support deferrable foreign keys",this,database);
}
if (isDeferrable()) {
sql+=" DEFERRABLE";
}
if (isInitiallyDeferred()) {
sql+=" INITIALLY DEFERRED";
}
}
return sql;
}
