{
  List<Integer> noParens=Arrays.asList(Types.ARRAY,Types.BIGINT,Types.BINARY,Types.BIT,Types.BLOB,Types.BOOLEAN,Types.CLOB,Types.DATALINK,Types.DATE,Types.DISTINCT,Types.INTEGER,Types.JAVA_OBJECT,Types.LONGVARBINARY,Types.NULL,Types.OTHER,Types.REF,Types.SMALLINT,Types.STRUCT,Types.TIME,Types.TIMESTAMP,Types.TINYINT,Types.LONGVARCHAR);
  List<Integer> oneParam=Arrays.asList(Types.CHAR,Types.VARCHAR,Types.VARBINARY);
  List<Integer> twoParams=Arrays.asList(Types.DECIMAL,Types.DOUBLE,Types.FLOAT,Types.NUMERIC,Types.REAL);
  String translatedTypeName=this.getTypeName();
  if (database instanceof PostgresDatabase) {
    if ("bpchar".equals(translatedTypeName)) {
      translatedTypeName="char";
    }
  }
  String dataType;
  if (noParens.contains(this.getDataType())) {
    dataType=translatedTypeName;
  }
 else   if (oneParam.contains(this.getDataType())) {
    if (database instanceof PostgresDatabase && translatedTypeName.equals("text")) {
      return translatedTypeName;
    }
 else     if (database instanceof MSSQLDatabase && translatedTypeName.equals("uniqueidentifier")) {
      return translatedTypeName;
    }
    dataType=translatedTypeName + "(" + this.getColumnSize()+ ")";
  }
 else   if (twoParams.contains(this.getDataType())) {
    if (database instanceof PostgresDatabase && this.getColumnSize() == 131089) {
      dataType="DECIMAL";
    }
 else     if (database instanceof MSSQLDatabase && translatedTypeName.equalsIgnoreCase("money")) {
      dataType=translatedTypeName.toUpperCase();
    }
 else {
      dataType=translatedTypeName + "(" + this.getColumnSize()+ ","+ this.getDecimalDigits()+ ")";
    }
  }
 else {
    throw new RuntimeException("Unknown Data Type: " + this.getDataType() + " ("+ this.getTypeName()+ ")");
  }
  return dataType;
}
