{
  ClassLoader cl=null;
  try {
    cl=getClassLoaderIncludingProjectClasspath();
    Thread.currentThread().setContextClassLoader(cl);
  }
 catch (  MojoExecutionException e) {
    throw new LiquibaseException("Could not create the class loader, " + e,e);
  }
  Database database=liquibase.getDatabase();
  getLog().info("Generating Change Log from database " + database.toString());
  try {
    DiffOutputControl diffOutputControl=new DiffOutputControl(outputDefaultCatalog,outputDefaultSchema,true,null);
    if (diffExcludeObjects != null && diffIncludeObjects != null) {
      throw new UnexpectedLiquibaseException("Cannot specify both excludeObjects and includeObjects");
    }
    if (diffExcludeObjects != null) {
      diffOutputControl.setObjectChangeFilter(new StandardObjectChangeFilter(StandardObjectChangeFilter.FilterType.EXCLUDE,diffExcludeObjects));
    }
    if (diffIncludeObjects != null) {
      diffOutputControl.setObjectChangeFilter(new StandardObjectChangeFilter(StandardObjectChangeFilter.FilterType.INCLUDE,diffIncludeObjects));
    }
    CommandLineUtils.doGenerateChangeLog(outputChangeLogFile,database,defaultCatalogName,defaultSchemaName,StringUtils.trimToNull(diffTypes),StringUtils.trimToNull(changeSetAuthor),StringUtils.trimToNull(changeSetContext),StringUtils.trimToNull(dataDir),diffOutputControl);
    getLog().info("Output written to Change Log file, " + outputChangeLogFile);
  }
 catch (  IOException e) {
    throw new LiquibaseException(e);
  }
catch (  ParserConfigurationException e) {
    throw new LiquibaseException(e);
  }
}
