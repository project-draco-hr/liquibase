{
  StringBuffer sql=new StringBuffer(super.getInsertStatement(insertOrUpdateStatement,database,sqlGeneratorChain));
  sql.deleteCharAt(sql.lastIndexOf(";"));
  StringBuffer updateClause=new StringBuffer("ON DUPLICATE KEY UPDATE ");
  String[] pkFields=insertOrUpdateStatement.getPrimaryKey().split(",");
  HashSet<String> hashPkFields=new HashSet<String>(Arrays.asList(pkFields));
  boolean hasFields=false;
  for (  String columnKey : insertOrUpdateStatement.getColumnValues().keySet()) {
    if (!hashPkFields.contains(columnKey)) {
      hasFields=true;
      updateClause.append(database.escapeObjectName(columnKey,Column.class)).append(" = ");
      Object columnValue=insertOrUpdateStatement.getColumnValue(columnKey);
      updateClause.append(DataTypeFactory.getInstance().fromObject(columnValue,database).objectToSql(columnValue,database));
      updateClause.append(",");
    }
  }
  if (hasFields) {
    updateClause.deleteCharAt(updateClause.lastIndexOf(","));
    sql.append(updateClause);
  }
 else {
    sql.insert(sql.indexOf("INSERT ") + "INSERT ".length(),"IGNORE ");
  }
  return sql.toString();
}
