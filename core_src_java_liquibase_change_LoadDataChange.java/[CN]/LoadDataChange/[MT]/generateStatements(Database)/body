{
  try {
    InputStream stream=getFileOpener().getResourceAsStream(getFile());
    if (stream == null) {
      throw new UnexpectedLiquibaseException("Data file " + getFile() + " was not found");
    }
    InputStreamReader streamReader;
    if (getEncoding() == null) {
      streamReader=new InputStreamReader(stream);
    }
 else {
      streamReader=new InputStreamReader(stream,getEncoding());
    }
    CSVReader reader=new CSVReader(streamReader);
    String[] headers=reader.readNext();
    if (headers == null) {
      throw new UnexpectedLiquibaseException("Data file " + getFile() + " was empty");
    }
    List<SqlStatement> statements=new ArrayList<SqlStatement>();
    String[] line=null;
    while ((line=reader.readNext()) != null) {
      InsertStatement insertStatement=new InsertStatement(getSchemaName(),getTableName());
      for (int i=0; i < headers.length; i++) {
        String columnName=null;
        Object value=line[i];
        ColumnConfig columnConfig=getColumnConfig(i,headers[i]);
        if (columnConfig != null) {
          columnName=columnConfig.getName();
          if (value.toString().equalsIgnoreCase("NULL")) {
            value="NULL";
          }
 else           if (columnConfig.getType() != null) {
            ColumnConfig valueConfig=new ColumnConfig();
            if (columnConfig.getType().equalsIgnoreCase("BOOLEAN")) {
              valueConfig.setValueBoolean(Boolean.parseBoolean(value.toString().toLowerCase()));
            }
 else             if (columnConfig.getType().equalsIgnoreCase("NUMERIC")) {
              valueConfig.setValueNumeric(value.toString());
            }
 else             if (columnConfig.getType().equalsIgnoreCase("DATE")) {
              valueConfig.setValueDate(value.toString());
            }
 else             if (columnConfig.getType().equalsIgnoreCase("STRING")) {
              valueConfig.setValue(value.toString());
            }
 else {
              throw new UnexpectedLiquibaseException("loadData type of " + columnConfig.getType() + " is not supported.  Please use BOOLEAN, NUMERIC, DATE, or STRING");
            }
            value=valueConfig.getValueObject();
          }
        }
        if (columnName == null) {
          columnName=headers[i];
        }
        insertStatement.addColumnValue(columnName,value);
      }
      statements.add(insertStatement);
    }
    return statements.toArray(new SqlStatement[statements.size()]);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
