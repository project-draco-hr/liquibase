{
  if (!snapshot.getSnapshotControl().shouldInclude(Index.class)) {
    return;
  }
  if (foundObject instanceof Table) {
    Table table=(Table)foundObject;
    Database database=snapshot.getDatabase();
    Schema schema;
    schema=table.getSchema();
    List<CachedRow> rs=null;
    JdbcDatabaseSnapshot.CachingDatabaseMetaData databaseMetaData=null;
    try {
      databaseMetaData=((JdbcDatabaseSnapshot)snapshot).getMetaData();
      rs=databaseMetaData.getIndexInfo(((AbstractJdbcDatabase)database).getJdbcCatalogName(schema),((AbstractJdbcDatabase)database).getJdbcSchemaName(schema),table.getName(),null);
      Map<String,Index> foundIndexes=new HashMap<String,Index>();
      for (      CachedRow row : rs) {
        String indexName=row.getString("INDEX_NAME");
        if (indexName == null) {
          continue;
        }
        Index index=foundIndexes.get(indexName);
        if (index == null) {
          index=new Index();
          index.setName(indexName);
          index.setTable(table);
          short type=row.getShort("TYPE");
          if (type == DatabaseMetaData.tableIndexClustered) {
            index.setClustered(true);
          }
 else           if (database instanceof MSSQLDatabase) {
            index.setClustered(false);
          }
          foundIndexes.put(indexName,index);
        }
        index.addColumn(new Column(row.getString("COLUMN_NAME")).setRelation(index.getTable()));
      }
      for (      Index exampleIndex : foundIndexes.values()) {
        table.getIndexes().add(exampleIndex);
      }
    }
 catch (    Exception e) {
      throw new DatabaseException(e);
    }
  }
  if (foundObject instanceof UniqueConstraint && !(snapshot.getDatabase() instanceof DB2Database) && !(snapshot.getDatabase() instanceof DerbyDatabase)) {
    Index exampleIndex=new Index().setTable(((UniqueConstraint)foundObject).getTable()).setName(foundObject.getName());
    exampleIndex.getColumns().addAll(((UniqueConstraint)foundObject).getColumns());
    ((UniqueConstraint)foundObject).setBackingIndex(exampleIndex);
  }
}
