{
  Statement stmt=null;
  ResultSet rs=null;
  try {
    Data data=(Data)missingObject;
    Table table=data.getTable();
    if (referenceDatabase.isLiquibaseObject(table)) {
      return null;
    }
    String sql="SELECT * FROM " + referenceDatabase.escapeTableName(table.getSchema().getCatalogName(),table.getSchema().getName(),table.getName());
    stmt=((JdbcConnection)referenceDatabase.getConnection()).createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
    stmt.setFetchSize(1000);
    rs=stmt.executeQuery(sql);
    List<String> columnNames=new ArrayList<String>();
    for (int i=0; i < rs.getMetaData().getColumnCount(); i++) {
      columnNames.add(rs.getMetaData().getColumnName(i + 1));
    }
    List<Change> changes=new ArrayList<Change>();
    while (rs.next()) {
      InsertDataChange change=new InsertDataChange();
      if (outputControl.getIncludeCatalog()) {
        change.setCatalogName(table.getSchema().getCatalogName());
      }
      if (outputControl.getIncludeSchema()) {
        change.setSchemaName(table.getSchema().getName());
      }
      change.setTableName(table.getName());
      for (int i=0; i < columnNames.size(); i++) {
        ColumnConfig column=new ColumnConfig();
        column.setName(columnNames.get(i));
        Object value=JdbcUtils.getResultSetValue(rs,i + 1);
        if (value == null) {
          column.setValue(null);
        }
 else         if (value instanceof Number) {
          column.setValueNumeric((Number)value);
        }
 else         if (value instanceof Boolean) {
          column.setValueBoolean((Boolean)value);
        }
 else         if (value instanceof Date) {
          column.setValueDate((Date)value);
        }
 else         if (value instanceof byte[]) {
          if (referenceDatabase instanceof InformixDatabase) {
            column.setValue(new String((byte[])value,StandardCharsets.UTF_8));
          }
          column.setValueComputed(new DatabaseFunction("UNSUPPORTED FOR DIFF: BINARY DATA"));
        }
 else {
          column.setValue(value.toString().replace("\\","\\\\"));
        }
        change.addColumn(column);
      }
      changes.add(change);
    }
    return changes.toArray(new Change[changes.size()]);
  }
 catch (  Exception e) {
    throw new UnexpectedLiquibaseException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException ignore) {
      }
    }
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException ignore) {
      }
    }
  }
}
