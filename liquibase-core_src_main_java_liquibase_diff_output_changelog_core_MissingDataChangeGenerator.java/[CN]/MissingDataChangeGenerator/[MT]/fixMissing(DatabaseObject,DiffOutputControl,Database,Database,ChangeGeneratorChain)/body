{
  Statement stmt=null;
  ResultSet rs=null;
  try {
    Data data=(Data)missingObject;
    Table table=data.getTable();
    if (referenceDatabase.isLiquibaseObject(table)) {
      return null;
    }
    String sql="SELECT * FROM " + referenceDatabase.escapeTableName(table.getSchema().getCatalogName(),table.getSchema().getName(),table.getName());
    stmt=((JdbcConnection)referenceDatabase.getConnection()).createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);
    stmt.setFetchSize(1000);
    rs=stmt.executeQuery(sql);
    List<String> columnNames=new ArrayList<String>();
    for (int i=0; i < rs.getMetaData().getColumnCount(); i++) {
      columnNames.add(rs.getMetaData().getColumnName(i + 1));
    }
    String dataDir=outputControl.getDataDir();
    if (dataDir != null) {
      String fileName=table.getName().toLowerCase() + ".csv";
      if (dataDir != null) {
        fileName=dataDir + "/" + fileName;
      }
      File parentDir=new File(dataDir);
      if (!parentDir.exists()) {
        parentDir.mkdirs();
      }
      if (!parentDir.isDirectory()) {
        throw new RuntimeException(parentDir + " is not a directory");
      }
      CSVWriter outputFile=new CSVWriter(new BufferedWriter(new FileWriter(fileName)));
      String[] dataTypes=new String[columnNames.size()];
      String[] line=new String[columnNames.size()];
      for (int i=0; i < columnNames.size(); i++) {
        line[i]=columnNames.get(i);
      }
      outputFile.writeNext(line);
      while (rs.next()) {
        line=new String[columnNames.size()];
        for (int i=0; i < columnNames.size(); i++) {
          Object value=rs.getObject(i + 1);
          if (dataTypes[i] == null && value != null) {
            if (value instanceof Number) {
              dataTypes[i]="NUMERIC";
            }
 else             if (value instanceof Boolean) {
              dataTypes[i]="BOOLEAN";
            }
 else             if (value instanceof Date) {
              dataTypes[i]="DATE";
            }
 else {
              dataTypes[i]="STRING";
            }
          }
          if (value == null) {
            line[i]="NULL";
          }
 else {
            if (value instanceof Date) {
              line[i]=new ISODateFormat().format(((Date)value));
            }
 else {
              line[i]=value.toString();
            }
          }
        }
        outputFile.writeNext(line);
      }
      outputFile.flush();
      outputFile.close();
      LoadDataChange change=new LoadDataChange();
      change.setFile(fileName);
      change.setEncoding("UTF-8");
      if (outputControl.isIncludeCatalog()) {
        change.setCatalogName(table.getSchema().getCatalogName());
      }
      if (outputControl.isIncludeSchema()) {
        change.setSchemaName(table.getSchema().getName());
      }
      change.setTableName(table.getName());
      for (int i=0; i < columnNames.size(); i++) {
        String colName=columnNames.get(i);
        LoadDataColumnConfig columnConfig=new LoadDataColumnConfig();
        columnConfig.setHeader(colName);
        columnConfig.setName(colName);
        columnConfig.setType(dataTypes[i]);
        change.addColumn(columnConfig);
      }
      return new Change[]{change};
    }
 else {
      List<Change> changes=new ArrayList<Change>();
      while (rs.next()) {
        InsertDataChange change=new InsertDataChange();
        if (outputControl.isIncludeCatalog()) {
          change.setCatalogName(table.getSchema().getCatalog().getName());
        }
        if (outputControl.isIncludeSchema()) {
          change.setSchemaName(table.getSchema().getName());
        }
        change.setTableName(table.getName());
        for (int i=0; i < columnNames.size(); i++) {
          ColumnConfig column=new ColumnConfig();
          column.setName(columnNames.get(i));
          Object value=rs.getObject(i + 1);
          if (value == null) {
            column.setValue(null);
          }
 else           if (value instanceof Number) {
            column.setValueNumeric((Number)value);
          }
 else           if (value instanceof Boolean) {
            column.setValueBoolean((Boolean)value);
          }
 else           if (value instanceof Date) {
            column.setValueDate((Date)value);
          }
 else {
            column.setValue(value.toString().replace("\\","\\\\"));
          }
          change.addColumn(column);
        }
        changes.add(change);
      }
      return changes.toArray(new Change[changes.size()]);
    }
  }
 catch (  Exception e) {
    throw new UnexpectedLiquibaseException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException ignore) {
      }
    }
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException ignore) {
      }
    }
  }
}
