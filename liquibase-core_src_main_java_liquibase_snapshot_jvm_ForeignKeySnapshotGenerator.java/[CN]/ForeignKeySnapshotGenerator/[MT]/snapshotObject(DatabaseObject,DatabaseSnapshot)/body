{
  Database database=snapshot.getDatabase();
  List<CachedRow> importedKeyMetadataResultSet;
  try {
    Table fkTable=((ForeignKey)example).getForeignKeyTable();
    String searchCatalog=((AbstractJdbcDatabase)database).getJdbcCatalogName(fkTable.getSchema());
    String searchSchema=((AbstractJdbcDatabase)database).getJdbcSchemaName(fkTable.getSchema());
    String searchTableName=database.correctObjectName(fkTable.getName(),Table.class);
    importedKeyMetadataResultSet=((JdbcDatabaseSnapshot)snapshot).getMetaData().getForeignKeys(searchCatalog,searchSchema,searchTableName,example.getName());
    ForeignKey foreignKey=null;
    for (    CachedRow row : importedKeyMetadataResultSet) {
      String fk_name=cleanNameFromDatabase(row.getString("FK_NAME"),database);
      if (snapshot.getDatabase().isCaseSensitive()) {
        if (!fk_name.equals(example.getName())) {
          continue;
        }
 else         if (!fk_name.equalsIgnoreCase(example.getName())) {
          continue;
        }
      }
      if (foreignKey == null) {
        foreignKey=new ForeignKey();
      }
      foreignKey.setName(fk_name);
      String fkTableCatalog=cleanNameFromDatabase(row.getString("FKTABLE_CAT"),database);
      String fkTableSchema=cleanNameFromDatabase(row.getString("FKTABLE_SCHEM"),database);
      String fkTableName=cleanNameFromDatabase(row.getString("FKTABLE_NAME"),database);
      Table foreignKeyTable=new Table().setName(fkTableName);
      foreignKeyTable.setSchema(new Schema(new Catalog(fkTableCatalog),fkTableSchema));
      foreignKey.setForeignKeyTable(foreignKeyTable);
      foreignKey.addForeignKeyColumn(new Column(cleanNameFromDatabase(row.getString("FKCOLUMN_NAME"),database)).setRelation(foreignKeyTable));
      CatalogAndSchema pkTableSchema=((AbstractJdbcDatabase)database).getSchemaFromJdbcInfo(row.getString("PKTABLE_CAT"),row.getString("PKTABLE_SCHEM"));
      Table tempPkTable=(Table)new Table().setName(row.getString("PKTABLE_NAME")).setSchema(new Schema(pkTableSchema.getCatalogName(),pkTableSchema.getSchemaName()));
      foreignKey.setPrimaryKeyTable(tempPkTable);
      foreignKey.addPrimaryKeyColumn(new Column(cleanNameFromDatabase(row.getString("PKCOLUMN_NAME"),database)).setRelation(tempPkTable));
      ForeignKeyConstraintType updateRule=convertToForeignKeyConstraintType(row.getInt("UPDATE_RULE"),database);
      foreignKey.setUpdateRule(updateRule);
      ForeignKeyConstraintType deleteRule=convertToForeignKeyConstraintType(row.getInt("DELETE_RULE"),database);
      foreignKey.setDeleteRule(deleteRule);
      short deferrability=row.getShort("DEFERRABILITY");
      if (deferrability == 0 || deferrability == DatabaseMetaData.importedKeyNotDeferrable) {
        foreignKey.setDeferrable(false);
        foreignKey.setInitiallyDeferred(false);
      }
 else       if (deferrability == DatabaseMetaData.importedKeyInitiallyDeferred) {
        foreignKey.setDeferrable(true);
        foreignKey.setInitiallyDeferred(true);
      }
 else       if (deferrability == DatabaseMetaData.importedKeyInitiallyImmediate) {
        foreignKey.setDeferrable(true);
        foreignKey.setInitiallyDeferred(false);
      }
 else {
        throw new RuntimeException("Unknown deferrability result: " + deferrability);
      }
      if (database.createsIndexesForForeignKeys()) {
        Index exampleIndex=new Index().setTable(foreignKey.getForeignKeyTable());
        exampleIndex.getColumns().addAll(foreignKey.getForeignKeyColumns());
        foreignKey.setBackingIndex(exampleIndex);
      }
    }
    return foreignKey;
  }
 catch (  Exception e) {
    throw new DatabaseException(e);
  }
}
