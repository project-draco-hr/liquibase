{
  boolean dbmsreturnvalue=true;
  boolean orReturnValue=true;
  boolean notReturnValue=true;
  boolean userExistsReturnValue=true;
  List<FailedPrecondition> failedPreconditions=new ArrayList<FailedPrecondition>();
  try {
    if (dbmsArray.size() > 0) {
      for (int i=0; i < dbmsArray.size(); i++) {
        DBMSPrecondition dbmsPrecondition=dbmsArray.get(i);
        if (dbmsPrecondition.checkDatabaseType(migrator)) {
          dbmsreturnvalue=true;
        }
 else {
          dbmsreturnvalue=false;
          failedPreconditions.add(new FailedPrecondition("DBMS Precondition failed",changeLog,dbmsPrecondition));
          break;
        }
      }
    }
 else     if (or != null) {
      if (or.checkDbmsType(migrator)) {
        orReturnValue=true;
      }
 else {
        orReturnValue=false;
        failedPreconditions.add(new FailedPrecondition("Or Precondition failed",changeLog,or));
      }
    }
 else     if (not != null) {
      if (not.checkNotPrecondition(migrator)) {
        notReturnValue=true;
      }
 else {
        notReturnValue=false;
        failedPreconditions.add(new FailedPrecondition("Not Precondition failed",changeLog,not));
      }
    }
    if (runningAs != null) {
      if (runningAs.checkUserName(migrator)) {
        userExistsReturnValue=true;
      }
 else {
        userExistsReturnValue=false;
        failedPreconditions.add(new FailedPrecondition("runningAs Precondition failed",changeLog,runningAs));
      }
    }
    if (!(dbmsreturnvalue && orReturnValue && notReturnValue&& userExistsReturnValue)) {
      throw new PreconditionFailedException(failedPreconditions);
    }
  }
 catch (  PreconditionFailedException ePrecondExcep) {
    throw ePrecondExcep;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
