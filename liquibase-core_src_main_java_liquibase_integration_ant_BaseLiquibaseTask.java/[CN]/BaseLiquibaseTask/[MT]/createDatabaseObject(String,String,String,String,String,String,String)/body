{
  String[] strings=classpath.list();
  final List<URL> taskClassPath=new ArrayList<URL>();
  for (  String string : strings) {
    URL url=new File(string).toURI().toURL();
    taskClassPath.add(url);
  }
  URLClassLoader loader=AccessController.doPrivileged(new PrivilegedAction<URLClassLoader>(){
    @Override public URLClassLoader run(){
      return new URLClassLoader(taskClassPath.toArray(new URL[taskClassPath.size()]),Database.class.getClassLoader());
    }
  }
);
  Database database;
  if (databaseClass != null) {
    try {
      DatabaseFactory.getInstance().register((Database)Class.forName(databaseClass,true,loader).newInstance());
    }
 catch (    ClassCastException e) {
      DatabaseFactory.getInstance().register((Database)Class.forName(databaseClass).newInstance());
    }
  }
  if (driverClassName == null) {
    driverClassName=DatabaseFactory.getInstance().findDefaultDriver(databaseUrl);
  }
  if (driverClassName == null) {
    throw new DatabaseException("driver not specified and no default could be found for " + databaseUrl);
  }
  Driver driver=(Driver)Class.forName(driverClassName,true,loader).newInstance();
  Properties info=new Properties();
  if (username != null) {
    info.put("user",username);
  }
  if (password != null) {
    info.put("password",password);
  }
  Connection connection=driver.connect(databaseUrl,info);
  if (connection == null) {
    throw new DatabaseException("Connection could not be created to " + databaseUrl + " with driver "+ driver.getClass().getName()+ ".  Possibly the wrong driver for the given database URL");
  }
  database=DatabaseFactory.getInstance().findCorrectDatabaseImplementation(new JdbcConnection(connection));
  database.setDefaultCatalogName(defaultCatalogName);
  database.setDefaultSchemaName(defaultSchemaName);
  database.setOutputDefaultSchema(isOutputDefaultSchema());
  database.setOutputDefaultCatalog(isOutputDefaultCatalog());
  if (getDatabaseChangeLogTableName() != null)   database.setDatabaseChangeLogTableName(getDatabaseChangeLogTableName());
  if (getDatabaseChangeLogLockTableName() != null)   database.setDatabaseChangeLogLockTableName(getDatabaseChangeLogLockTableName());
  if (getDatabaseChangeLogObjectsTablespace() != null)   database.setLiquibaseTablespaceName(getDatabaseChangeLogObjectsTablespace());
  if (getCurrentDateTimeFunction() != null) {
    database.setCurrentDateTimeFunction(getCurrentDateTimeFunction());
  }
  return database;
}
