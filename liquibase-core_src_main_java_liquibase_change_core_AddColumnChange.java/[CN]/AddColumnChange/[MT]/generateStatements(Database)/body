{
  List<SqlStatement> sql=new ArrayList<SqlStatement>();
  for (  AddColumnConfig column : getColumns()) {
    Set<ColumnConstraint> constraints=new HashSet<ColumnConstraint>();
    if (column.getConstraints() != null) {
      if (column.getConstraints().isNullable() != null && !column.getConstraints().isNullable()) {
        constraints.add(new NotNullConstraint());
      }
      if (column.getConstraints().isUnique() != null && column.getConstraints().isUnique()) {
        constraints.add(new UniqueConstraint());
      }
      if (column.getConstraints().isPrimaryKey() != null && column.getConstraints().isPrimaryKey()) {
        constraints.add(new PrimaryKeyConstraint(column.getConstraints().getPrimaryKeyName()));
      }
      if (column.getConstraints().getReferences() != null) {
        constraints.add(new ForeignKeyConstraint(column.getConstraints().getForeignKeyName(),column.getConstraints().getReferences()));
      }
    }
    if (column.isAutoIncrement() != null && column.isAutoIncrement()) {
      constraints.add(new AutoIncrementConstraint(column.getName(),column.getStartWith(),column.getIncrementBy()));
    }
    AddColumnStatement addColumnStatement=new AddColumnStatement(getCatalogName(),getSchemaName(),getTableName(),column.getName(),column.getType(),column.getDefaultValueObject(),constraints.toArray(new ColumnConstraint[constraints.size()]));
    AddColumnConfig.Position position=column.getPosition();
    if (position != null) {
      if ((database instanceof MySQLDatabase) && (position.getAfterColumn() != null)) {
        addColumnStatement.setAddAfterColumn(position.getAfterColumn());
      }
 else       if (((database instanceof HsqlDatabase) || (database instanceof H2Database)) && (position.getBeforeColumn() != null)) {
        addColumnStatement.setAddBeforeColumn(position.getBeforeColumn());
      }
 else       if ((database instanceof FirebirdDatabase) && (position.getPosition() != null)) {
        addColumnStatement.setAddAtPosition(position.getPosition());
      }
    }
    sql.add(addColumnStatement);
    if (database instanceof DB2Database) {
      sql.add(new ReorganizeTableStatement(getCatalogName(),getSchemaName(),getTableName()));
    }
    if (column.getValueObject() != null) {
      UpdateStatement updateStatement=new UpdateStatement(getCatalogName(),getSchemaName(),getTableName());
      updateStatement.addNewColumnValue(column.getName(),column.getValueObject());
      sql.add(updateStatement);
    }
  }
  for (  ColumnConfig column : getColumns()) {
    String columnRemarks=StringUtils.trimToNull(column.getRemarks());
    if (columnRemarks != null) {
      SetColumnRemarksStatement remarksStatement=new SetColumnRemarksStatement(catalogName,schemaName,tableName,column.getName(),columnRemarks);
      if (SqlGeneratorFactory.getInstance().supports(remarksStatement,database)) {
        sql.add(remarksStatement);
      }
    }
  }
  return sql.toArray(new SqlStatement[sql.size()]);
}
