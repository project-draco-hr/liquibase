{
  SortedMap<String,List<TestPermutation>> permutationsByTable=new TreeMap<String,List<TestPermutation>>();
  for (  TestPermutation permutation : test.getPermutations()) {
    if (permutation.getRowDescriptionParameter() == null) {
      continue;
    }
    String tableKey=permutation.getTableKey();
    if (!permutationsByTable.containsKey(tableKey)) {
      permutationsByTable.put(tableKey,new ArrayList<TestPermutation>());
    }
    permutationsByTable.get(tableKey).add(permutation);
  }
  if (permutationsByTable.isEmpty()) {
    return;
  }
  for (  Map.Entry<String,List<TestPermutation>> entry : permutationsByTable.entrySet()) {
    String tableKey=entry.getKey();
    List<TestPermutation> permutations=new ArrayList<TestPermutation>();
    for (    TestPermutation permutation : entry.getValue()) {
      if (permutation.isValid()) {
        permutations.add(permutation);
      }
    }
    if (permutations.size() == 0) {
      continue;
    }
    out.append("## Permutation Group for ").append(permutations.get(0).getRowDescriptionParameter()).append(": ").append(MD5Util.computeMD5(tableKey)).append(" ##\n\n");
    for (    Map.Entry<String,TestPermutation.Value> descriptionEntry : permutations.get(0).getDescription().entrySet()) {
      appendMapEntry(descriptionEntry,out);
    }
    SortedMap<String,Integer> maxColumnLengths=new TreeMap<String,Integer>();
    int permutationNameColLength="Permutation".length();
    int verifiedColLength="Verified".length();
    for (    TestPermutation permutation : permutations) {
      if (permutation.getKey().length() > permutationNameColLength) {
        permutationNameColLength=permutation.getKey().length();
      }
      String verifiedMessage=getVerifiedMessage(permutation);
      if (verifiedMessage.length() > verifiedColLength) {
        verifiedColLength=verifiedMessage.length();
      }
      Map<String,TestPermutation.Value> columnMap=permutation.getRowDescription();
      for (      Map.Entry<String,TestPermutation.Value> columnEntry : columnMap.entrySet()) {
        Integer oldMax=maxColumnLengths.get(columnEntry.getKey());
        if (oldMax == null) {
          oldMax=columnEntry.getKey().length();
          maxColumnLengths.put(columnEntry.getKey(),oldMax);
        }
        String value=columnEntry.getValue().serialize();
        if (value != null) {
          if (oldMax < value.length()) {
            maxColumnLengths.put(columnEntry.getKey(),value.length());
          }
        }
      }
    }
    out.append("\n");
    out.append("| ").append(StringUtils.pad("Permutation",permutationNameColLength)).append(" | ").append(StringUtils.pad("Verified",verifiedColLength)).append(" |");
    for (    Map.Entry<String,Integer> columnEntry : maxColumnLengths.entrySet()) {
      out.append(" ").append(StringUtils.pad(columnEntry.getKey(),columnEntry.getValue())).append(" |");
    }
    out.append(" DETAILS\n");
    SortedMap<String,String> permutationRows=new TreeMap<String,String>();
    for (    TestPermutation permutation : permutations) {
      StringBuilder row=new StringBuilder();
      row.append("| ").append(StringUtils.pad(permutation.getKey(),permutationNameColLength)).append(" | ").append(StringUtils.pad(getVerifiedMessage(permutation),verifiedColLength)).append(" |");
      String rowKey="";
      for (      Map.Entry<String,Integer> columnAndLength : maxColumnLengths.entrySet()) {
        TestPermutation.Value cellValue=permutation.getRowDescription().get(columnAndLength.getKey());
        String cellString;
        if (cellValue == null) {
          cellString="";
        }
 else {
          cellString=clean(cellValue.serialize());
        }
        rowKey+=" " + StringUtils.pad(cellString,columnAndLength.getValue()) + " |";
      }
      row.append(rowKey);
      List<String> details=new ArrayList<String>();
      for (      Map.Entry<String,TestPermutation.Value> notesEntry : permutation.getNotes().entrySet()) {
        details.add(" __" + notesEntry.getKey() + "__: "+ clean(notesEntry.getValue().serialize()));
      }
      for (      Map.Entry<String,TestPermutation.Value> dataEntry : permutation.getData().entrySet()) {
        details.add(" **" + dataEntry.getKey() + "**: "+ clean(dataEntry.getValue().serialize()));
      }
      for (int i=0; i < details.size(); i++) {
        if (i > 0) {
          row.append("| ").append(StringUtils.pad("",permutationNameColLength)).append(" | ").append(StringUtils.pad("",verifiedColLength)).append(" |");
          for (          Map.Entry<String,Integer> nameAndLength : maxColumnLengths.entrySet()) {
            row.append(" ").append(StringUtils.pad("",nameAndLength.getValue())).append(" |");
          }
        }
        row.append(details.get(i)).append("\n");
      }
      permutationRows.put(rowKey,row.toString());
    }
    out.append(StringUtils.join(permutationRows.values(),""));
    out.append("\n\n");
  }
}
