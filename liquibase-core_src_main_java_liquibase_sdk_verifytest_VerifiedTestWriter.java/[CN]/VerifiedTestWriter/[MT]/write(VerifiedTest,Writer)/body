{
  out.append("# Test: ").append(test.getTestClass()).append(" \"").append(test.getTestName()).append("\" #\n\n");
  out.append("NOTE: This output is generated when the test is ran. DO NOT EDIT MANUALLY\n\n");
  List<TestPermutation> permutations=new ArrayList(test.getPermutations());
  Collections.sort(permutations,new Comparator<TestPermutation>(){
    @Override public int compare(    TestPermutation o1,    TestPermutation o2){
      return o1.getLongKey().compareTo(o2.getLongKey());
    }
  }
);
  for (  TestPermutation permutation : permutations) {
    if (!permutation.isValid()) {
      continue;
    }
    out.append("## Permutation: ").append(permutation.getKey()).append(" ##\n\n");
    out.append("- _VERIFIED:_ ").append(String.valueOf(permutation.getVerified()));
    if (!permutation.getVerified() && StringUtils.trimToNull(permutation.getNotRanMessage()) != null) {
      out.append(" ").append(StringUtils.trimToEmpty(permutation.getNotRanMessage()));
    }
    out.append("\n");
    for (    Map.Entry<String,TestPermutation.Value> entry : permutation.getDescription().entrySet()) {
      appendMapEntry(entry,out);
    }
    if (permutation.getNotes().size() > 0) {
      out.append("\n");
      out.append("#### Notes ####\n");
      out.append("\n");
      for (      Map.Entry<String,TestPermutation.Value> entry : permutation.getNotes().entrySet()) {
        appendMapEntry(entry,out);
      }
    }
    if (permutation.getData().entrySet().size() > 0) {
      out.append("\n");
      out.append("#### Data ####\n");
      out.append("\n");
      for (      Map.Entry<String,TestPermutation.Value> entry : permutation.getData().entrySet()) {
        appendMapEntry(entry,out);
      }
    }
    out.append("\n\n");
  }
  out.flush();
}
