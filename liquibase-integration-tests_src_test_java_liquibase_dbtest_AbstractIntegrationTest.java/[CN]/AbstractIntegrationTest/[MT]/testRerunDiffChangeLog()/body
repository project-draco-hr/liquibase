{
  if (database == null) {
    return;
  }
  for (int run=0; run < 2; run++) {
    boolean outputCsv=run == 1;
    runCompleteChangeLog();
    SnapshotControl snapshotControl=new SnapshotControl(database);
    DatabaseSnapshot originalSnapshot=SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(),database,snapshotControl);
    CompareControl compareControl=new CompareControl();
    compareControl.addSuppressedField(Column.class,"defaultValue");
    compareControl.addSuppressedField(Column.class,"autoIncrementInformation");
    if (database instanceof OracleDatabase) {
      compareControl.addSuppressedField(Column.class,"type");
    }
    DiffOutputControl diffOutputControl=new DiffOutputControl();
    File tempFile=File.createTempFile("liquibase-test",".xml");
    FileUtil.deleteOnExit(tempFile);
    if (outputCsv) {
      diffOutputControl.setDataDir(new File(tempFile.getParentFile(),"liquibase-data").getCanonicalPath().replaceFirst("\\w:",""));
    }
    DiffResult diffResult=DiffGeneratorFactory.getInstance().compare(database,null,compareControl);
    FileOutputStream output=new FileOutputStream(tempFile);
    try {
      new DiffToChangeLog(diffResult,new DiffOutputControl()).print(new PrintStream(output));
      output.flush();
    }
  finally {
      output.close();
    }
    Liquibase liquibase=createLiquibase(tempFile.getName());
    clearDatabase(liquibase);
    DatabaseSnapshot emptySnapshot=SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(),database,new SnapshotControl(database));
    liquibase=createLiquibase(tempFile.getName());
    try {
      liquibase.update(this.contexts);
    }
 catch (    ValidationFailedException e) {
      e.printDescriptiveError(System.out);
      throw e;
    }
    DatabaseSnapshot migratedSnapshot=SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(),database,new SnapshotControl(database));
    DiffResult finalDiffResult=DiffGeneratorFactory.getInstance().compare(originalSnapshot,migratedSnapshot,compareControl);
    try {
      assertTrue(finalDiffResult.areEqual());
    }
 catch (    AssertionError e) {
      new DiffToReport(finalDiffResult,System.err).print();
      throw e;
    }
    DiffResult emptyDiffResult=DiffGeneratorFactory.getInstance().compare(emptySnapshot,migratedSnapshot,compareControl);
    output=new FileOutputStream(tempFile);
    try {
      new DiffToChangeLog(emptyDiffResult,new DiffOutputControl(true,true,true)).print(new PrintStream(output));
      output.flush();
    }
  finally {
      output.close();
    }
    liquibase=createLiquibase(tempFile.getName());
    System.out.println("updating from " + tempFile.getCanonicalPath());
    try {
      liquibase.update(this.contexts);
    }
 catch (    LiquibaseException e) {
      throw e;
    }
    DatabaseSnapshot emptyAgainSnapshot=SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(),database,new SnapshotControl(database));
    assertEquals(2,emptyAgainSnapshot.get(Table.class).size());
    assertEquals(0,emptyAgainSnapshot.get(View.class).size());
  }
}
