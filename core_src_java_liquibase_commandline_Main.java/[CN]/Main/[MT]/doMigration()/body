{
  if ("help".equalsIgnoreCase(command)) {
    printHelp(System.out);
    return;
  }
  try {
    if (null != logFile) {
      LogFactory.setLoggingLevel(logLevel,logFile);
    }
 else {
      LogFactory.setLoggingLevel(logLevel);
    }
  }
 catch (  IllegalArgumentException e) {
    throw new CommandLineParsingException(e.getMessage(),e);
  }
  FileSystemFileOpener fsOpener=new FileSystemFileOpener();
  CommandLineFileOpener clOpener=new CommandLineFileOpener(classLoader);
  Database database=CommandLineUtils.createDatabaseObject(classLoader,this.url,this.username,this.password,this.driver,this.defaultSchemaName,this.databaseClass);
  try {
    CompositeFileOpener fileOpener=new CompositeFileOpener(fsOpener,clOpener);
    if ("diff".equalsIgnoreCase(command)) {
      CommandLineUtils.doDiff(database,createDatabaseFromCommandParams(commandParams));
      return;
    }
 else     if ("diffChangeLog".equalsIgnoreCase(command)) {
      CommandLineUtils.doDiffToChangeLog(changeLogFile,database,createDatabaseFromCommandParams(commandParams));
      return;
    }
 else     if ("generateChangeLog".equalsIgnoreCase(command)) {
      CommandLineUtils.doGenerateChangeLog(changeLogFile,database,defaultSchemaName);
      return;
    }
    Liquibase liquibase=new Liquibase(changeLogFile,fileOpener,database);
    if ("listLocks".equalsIgnoreCase(command)) {
      liquibase.reportLocks(System.out);
      return;
    }
 else     if ("releaseLocks".equalsIgnoreCase(command)) {
      LockHandler.getInstance(database).forceReleaseLock();
      System.out.println("Successfully released all database change log locks for " + liquibase.getDatabase().getConnectionUsername() + "@"+ liquibase.getDatabase().getConnectionURL());
      return;
    }
 else     if ("tag".equalsIgnoreCase(command)) {
      liquibase.tag(commandParams.iterator().next());
      System.out.println("Successfully tagged " + liquibase.getDatabase().getConnectionUsername() + "@"+ liquibase.getDatabase().getConnectionURL());
      return;
    }
 else     if ("dropAll".equals(command)) {
      liquibase.dropAll();
      System.out.println("All objects dropped from " + liquibase.getDatabase().getConnectionUsername() + "@"+ liquibase.getDatabase().getConnectionURL());
      return;
    }
 else     if ("status".equalsIgnoreCase(command)) {
      boolean runVerbose=false;
      if (commandParams.contains("--verbose")) {
        runVerbose=true;
      }
      liquibase.reportStatus(runVerbose,contexts,getOutputWriter());
      return;
    }
 else     if ("validate".equalsIgnoreCase(command)) {
      try {
        liquibase.validate();
      }
 catch (      ValidationFailedException e) {
        e.printDescriptiveError(System.out);
        return;
      }
      System.out.println("No validation errors found");
      return;
    }
 else     if ("clearCheckSums".equalsIgnoreCase(command)) {
      liquibase.clearCheckSums();
      return;
    }
 else     if ("dbdoc".equalsIgnoreCase(command)) {
      if (commandParams.size() == 0) {
        throw new CommandLineParsingException("dbdoc requires an output directory");
      }
      if (changeLogFile == null) {
        throw new CommandLineParsingException("dbdoc requires a changeLog parameter");
      }
      liquibase.generateDocumentation(commandParams.iterator().next());
      return;
    }
    DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    try {
      if ("update".equalsIgnoreCase(command)) {
        liquibase.update(contexts);
      }
 else       if ("changelogSync".equalsIgnoreCase(command)) {
        liquibase.changeLogSync(contexts);
      }
 else       if ("changelogSyncSQL".equalsIgnoreCase(command)) {
        liquibase.changeLogSync(contexts,getOutputWriter());
      }
 else       if ("updateCount".equalsIgnoreCase(command)) {
        liquibase.update(Integer.parseInt(commandParams.iterator().next()),contexts);
      }
 else       if ("updateCountSQL".equalsIgnoreCase(command)) {
        liquibase.update(Integer.parseInt(commandParams.iterator().next()),contexts,getOutputWriter());
      }
 else       if ("updateSQL".equalsIgnoreCase(command)) {
        liquibase.update(contexts,getOutputWriter());
      }
 else       if ("rollback".equalsIgnoreCase(command)) {
        if (commandParams == null) {
          throw new CommandLineParsingException("rollback requires a rollback tag");
        }
        liquibase.rollback(commandParams.iterator().next(),contexts);
      }
 else       if ("rollbackToDate".equalsIgnoreCase(command)) {
        if (commandParams == null) {
          throw new CommandLineParsingException("rollback requires a rollback date");
        }
        liquibase.rollback(dateFormat.parse(commandParams.iterator().next()),contexts);
      }
 else       if ("rollbackCount".equalsIgnoreCase(command)) {
        liquibase.rollback(Integer.parseInt(commandParams.iterator().next()),contexts);
      }
 else       if ("rollbackSQL".equalsIgnoreCase(command)) {
        if (commandParams == null) {
          throw new CommandLineParsingException("rollbackSQL requires a rollback tag");
        }
        liquibase.rollback(commandParams.iterator().next(),contexts,getOutputWriter());
      }
 else       if ("rollbackToDateSQL".equalsIgnoreCase(command)) {
        if (commandParams == null) {
          throw new CommandLineParsingException("rollbackToDateSQL requires a rollback date");
        }
        liquibase.rollback(dateFormat.parse(commandParams.iterator().next()),contexts,getOutputWriter());
      }
 else       if ("rollbackCountSQL".equalsIgnoreCase(command)) {
        if (commandParams == null) {
          throw new CommandLineParsingException("rollbackCountSQL requires a rollback tag");
        }
        liquibase.rollback(Integer.parseInt(commandParams.iterator().next()),contexts,getOutputWriter());
      }
 else       if ("futureRollbackSQL".equalsIgnoreCase(command)) {
        liquibase.futureRollbackSQL(contexts,getOutputWriter());
      }
 else {
        throw new CommandLineParsingException("Unknown command: " + command);
      }
    }
 catch (    ParseException e) {
      throw new CommandLineParsingException("Unexpected date/time format.  Use 'yyyy-MM-dd HH:mm:ss'");
    }
  }
  finally {
    try {
      database.rollback();
      database.close();
    }
 catch (    JDBCException e) {
      LogFactory.getLogger().log(Level.WARNING,"problem closing connection",e);
    }
  }
}
