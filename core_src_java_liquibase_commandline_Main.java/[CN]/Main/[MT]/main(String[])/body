{
  String shouldRunProperty=System.getProperty(Liquibase.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty)) {
    System.out.println("LiquiBase did not run because '" + Liquibase.SHOULD_RUN_SYSTEM_PROPERTY + "' system property was set to false");
    return;
  }
  Main main=new Main();
  if (args.length == 1 && "--help".equals(args[0])) {
    main.printHelp(System.out);
    return;
  }
 else   if (args.length == 1 && "--version".equals(args[0])) {
    System.out.println("LiquiBase Version: " + LiquibaseUtil.getBuildVersion() + StreamUtil.getLineSeparator());
    return;
  }
  main.parseOptions(args);
  File propertiesFile=new File(main.defaultsFile);
  if (propertiesFile.exists()) {
    main.parsePropertiesFile(new FileInputStream(propertiesFile));
  }
  List<String> setupMessages=main.checkSetup();
  if (setupMessages.size() > 0) {
    main.printHelp(setupMessages,System.out);
    return;
  }
  try {
    main.applyDefaults();
    main.configureClassLoader();
    main.doMigration();
  }
 catch (  Throwable e) {
    String message=e.getMessage();
    if (e.getCause() != null) {
      message=e.getCause().getMessage();
    }
    if (message == null) {
      message="Unknown Reason";
    }
    if (e.getCause() instanceof ValidationFailedException) {
      ((ValidationFailedException)e.getCause()).printDescriptiveError(System.out);
    }
 else {
      System.out.println("Migration Failed: " + message + generateLogLevelWarningMessage());
      LogFactory.getLogger().log(Level.SEVERE,message,e);
    }
    return;
  }
  if ("update".equals(main.command)) {
    System.out.println("Migration successful");
  }
 else   if (main.command.startsWith("rollback") && !main.command.endsWith("SQL")) {
    System.out.println("Rollback successful");
  }
}
