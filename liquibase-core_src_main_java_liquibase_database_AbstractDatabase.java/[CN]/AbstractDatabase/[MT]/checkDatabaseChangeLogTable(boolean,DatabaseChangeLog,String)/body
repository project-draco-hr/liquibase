{
  Executor executor=ExecutorService.getInstance().getExecutor(this);
  Table changeLogTable=DatabaseSnapshotGeneratorFactory.getInstance().getGenerator(this).getDatabaseChangeLogTable(this);
  List<SqlStatement> statementsToExecute=new ArrayList<SqlStatement>();
  boolean changeLogCreateAttempted=false;
  if (changeLogTable != null) {
    boolean hasDescription=changeLogTable.getColumn("DESCRIPTION") != null;
    boolean hasComments=changeLogTable.getColumn("COMMENTS") != null;
    boolean hasTag=changeLogTable.getColumn("TAG") != null;
    boolean hasLiquibase=changeLogTable.getColumn("LIQUIBASE") != null;
    boolean liquibaseColumnNotRightSize=changeLogTable.getColumn("LIQUIBASE").getType().getColumnSize() != 20;
    boolean hasOrderExecuted=changeLogTable.getColumn("ORDEREXECUTED") != null;
    boolean checksumNotRightSize=changeLogTable.getColumn("MD5SUM").getType().getColumnSize() != 35;
    boolean hasExecTypeColumn=changeLogTable.getColumn("EXECTYPE") != null;
    if (!hasDescription) {
      executor.comment("Adding missing databasechangelog.description column");
      statementsToExecute.add(new AddColumnStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"DESCRIPTION","VARCHAR(255)",null));
    }
    if (!hasTag) {
      executor.comment("Adding missing databasechangelog.tag column");
      statementsToExecute.add(new AddColumnStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"TAG","VARCHAR(255)",null));
    }
    if (!hasComments) {
      executor.comment("Adding missing databasechangelog.comments column");
      statementsToExecute.add(new AddColumnStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"COMMENTS","VARCHAR(255)",null));
    }
    if (!hasLiquibase) {
      executor.comment("Adding missing databasechangelog.liquibase column");
      statementsToExecute.add(new AddColumnStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"LIQUIBASE","VARCHAR(255)",null));
    }
    if (!hasOrderExecuted) {
      executor.comment("Adding missing databasechangelog.orderexecuted column");
      statementsToExecute.add(new AddColumnStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"ORDEREXECUTED","INT",null));
      statementsToExecute.add(new UpdateStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName()).addNewColumnValue("ORDEREXECUTED",-1));
      statementsToExecute.add(new SetNullableStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"ORDEREXECUTED","INT",false));
    }
    if (checksumNotRightSize) {
      executor.comment("Modifying size of databasechangelog.md5sum column");
      statementsToExecute.add(new ModifyDataTypeStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"MD5SUM","VARCHAR(35)"));
    }
    if (liquibaseColumnNotRightSize) {
      executor.comment("Modifying size of databasechangelog.liquibase column");
      statementsToExecute.add(new ModifyDataTypeStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"LIQUIBASE","VARCHAR(20)"));
    }
    if (!hasExecTypeColumn) {
      executor.comment("Adding missing databasechangelog.exectype column");
      statementsToExecute.add(new AddColumnStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"EXECTYPE","VARCHAR(10)",null));
      statementsToExecute.add(new UpdateStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName()).addNewColumnValue("EXECTYPE","EXECUTED"));
      statementsToExecute.add(new SetNullableStatement(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"EXECTYPE","VARCHAR(10)",false));
    }
    List<Map> md5sumRS=ExecutorService.getInstance().getExecutor(this).queryForList(new SelectFromDatabaseChangeLogStatement(new SelectFromDatabaseChangeLogStatement.ByNotNullCheckSum(),"MD5SUM"));
    if (md5sumRS.size() > 0) {
      String md5sum=md5sumRS.get(0).get("MD5SUM").toString();
      if (!md5sum.startsWith(CheckSum.getCurrentVersion() + ":")) {
        executor.comment("DatabaseChangeLog checksums are an incompatible version.  Setting them to null so they will be updated on next database update");
        statementsToExecute.add(new RawSqlStatement("UPDATE " + escapeTableName(getLiquibaseCatalogName(),getLiquibaseSchemaName(),getDatabaseChangeLogTableName()) + " SET MD5SUM=null"));
      }
    }
  }
 else   if (!changeLogCreateAttempted) {
    executor.comment("Create Database Change Log Table");
    SqlStatement createTableStatement=new CreateDatabaseChangeLogTableStatement();
    if (!canCreateChangeLogTable()) {
      throw new DatabaseException("Cannot create " + escapeTableName(getDefaultCatalogName(),getDefaultSchemaName(),getDatabaseChangeLogTableName()) + " table for your database.\n\n"+ "Please construct it manually using the following SQL as a base and re-run Liquibase:\n\n"+ createTableStatement);
    }
    statementsToExecute.add(createTableStatement);
    LogFactory.getLogger().info("Creating database history table with name: " + escapeTableName(getDefaultCatalogName(),getDefaultSchemaName(),getDatabaseChangeLogTableName()));
  }
  for (  SqlStatement sql : statementsToExecute) {
    executor.execute(sql);
    this.commit();
  }
  if (updateExistingNullChecksums) {
    for (    RanChangeSet ranChangeSet : this.getRanChangeSetList()) {
      if (ranChangeSet.getLastCheckSum() == null) {
        ChangeSet changeSet=databaseChangeLog.getChangeSet(ranChangeSet);
        if (changeSet != null && new ContextChangeSetFilter(contexts).accepts(changeSet) && new DbmsChangeSetFilter(this).accepts(changeSet)) {
          LogFactory.getLogger().info("Updating null or out of date checksum on changeSet " + changeSet + " to correct value");
          executor.execute(new UpdateChangeSetChecksumStatement(changeSet));
        }
      }
    }
    commit();
    this.ranChangeSetList=null;
  }
}
