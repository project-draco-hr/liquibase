{
  try {
    DatabaseSnapshot snapshot=DatabaseSnapshotGeneratorFactory.getInstance().createSnapshot(this,schema,new HashSet<DiffStatusListener>());
    List<Change> dropChanges=new ArrayList<Change>();
    for (    View view : snapshot.getViews()) {
      DropViewChange dropChange=new DropViewChange();
      dropChange.setViewName(view.getName());
      dropChange.setSchemaName(schema);
      dropChanges.add(dropChange);
    }
    for (    ForeignKey fk : snapshot.getForeignKeys()) {
      DropForeignKeyConstraintChange dropFK=new DropForeignKeyConstraintChange();
      dropFK.setBaseTableSchemaName(schema);
      dropFK.setBaseTableName(fk.getForeignKeyTable().getName());
      dropFK.setConstraintName(fk.getName());
      dropChanges.add(dropFK);
    }
    for (    Table table : snapshot.getTables()) {
      DropTableChange dropChange=new DropTableChange();
      dropChange.setSchemaName(schema);
      dropChange.setTableName(table.getName());
      dropChange.setCascadeConstraints(true);
      dropChanges.add(dropChange);
    }
    if (this.supportsSequences()) {
      for (      Sequence seq : snapshot.getSequences()) {
        DropSequenceChange dropChange=new DropSequenceChange();
        dropChange.setSequenceName(seq.getName());
        dropChange.setSchemaName(schema);
        dropChanges.add(dropChange);
      }
    }
    if (snapshot.hasDatabaseChangeLogTable()) {
      dropChanges.add(new AnonymousChange(new ClearDatabaseChangeLogTableStatement()));
    }
    for (    Change change : dropChanges) {
      for (      SqlStatement statement : change.generateStatements(this)) {
        ExecutorService.getInstance().getExecutor(this).execute(statement,new ArrayList<SqlVisitor>());
      }
    }
  }
  finally {
    this.commit();
  }
}
