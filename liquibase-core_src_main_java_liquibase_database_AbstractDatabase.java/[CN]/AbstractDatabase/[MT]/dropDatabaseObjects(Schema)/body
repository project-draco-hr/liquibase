{
  schema=schema.clone(this);
  try {
    DatabaseSnapshot snapshot=DatabaseSnapshotGeneratorFactory.getInstance().createSnapshot(this,new DiffControl(schema));
    List<Change> dropChanges=new ArrayList<Change>();
    for (    View view : snapshot.getDatabaseObjects(schema,View.class)) {
      DropViewChange dropChange=new DropViewChange();
      dropChange.setViewName(view.getName());
      dropChange.setSchemaName(schema.getName(this));
      dropChange.setCatalogName(schema.getCatalogName(this));
      dropChanges.add(dropChange);
    }
    if (!supportsForeignKeyDisable()) {
      for (      ForeignKey fk : snapshot.getDatabaseObjects(schema,ForeignKey.class)) {
        DropForeignKeyConstraintChange dropFK=new DropForeignKeyConstraintChange();
        dropFK.setBaseTableSchemaName(schema.getName(this));
        dropFK.setBaseTableCatalogName(schema.getCatalogName(this));
        dropFK.setBaseTableName(fk.getForeignKeyTable().getName());
        dropFK.setConstraintName(fk.getName());
        dropChanges.add(dropFK);
      }
    }
    for (    Table table : snapshot.getDatabaseObjects(schema,Table.class)) {
      DropTableChange dropChange=new DropTableChange();
      dropChange.setSchemaName(schema.getName(this));
      dropChange.setCatalogName(schema.getCatalogName(this));
      dropChange.setTableName(table.getName());
      if (supportsDropTableCascadeConstraints()) {
        dropChange.setCascadeConstraints(true);
      }
      dropChanges.add(dropChange);
    }
    if (this.supportsSequences()) {
      for (      Sequence seq : snapshot.getDatabaseObjects(schema,Sequence.class)) {
        DropSequenceChange dropChange=new DropSequenceChange();
        dropChange.setSequenceName(seq.getName());
        dropChange.setSchemaName(schema.getName(this));
        dropChange.setCatalogName(schema.getCatalogName(this));
        dropChanges.add(dropChange);
      }
    }
    if (snapshot.hasDatabaseChangeLogTable()) {
      dropChanges.add(new AnonymousChange(new ClearDatabaseChangeLogTableStatement(schema.getCatalogName(this),schema.getName(this))));
    }
    final boolean reEnableFK=supportsForeignKeyDisable() && disableForeignKeyChecks();
    try {
      for (      Change change : dropChanges) {
        for (        SqlStatement statement : change.generateStatements(this)) {
          ExecutorService.getInstance().getExecutor(this).execute(statement);
        }
      }
    }
  finally {
      if (reEnableFK) {
        enableForeignKeyChecks();
      }
    }
  }
  finally {
    this.commit();
  }
}
