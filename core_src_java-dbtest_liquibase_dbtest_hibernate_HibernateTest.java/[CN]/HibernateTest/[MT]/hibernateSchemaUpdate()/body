{
  new DatabaseTestTemplate().testOnAvailableDatabases(new DatabaseTest(){
    public void performTest(    Database database) throws Exception {
      if (!(database instanceof MySQLDatabase)) {
        return;
      }
      SimpleNamingContextBuilder builder=SimpleNamingContextBuilder.emptyActivatedContextBuilder();
      Connection connection=database.getConnection().getUnderlyingConnection();
      SingleConnectionDataSource ds=new SingleConnectionDataSource(connection,true);
      builder.bind("java:/data",ds);
      Configuration cfg=new Configuration();
      cfg.configure(HIBERNATE_CONFIG_FILE);
      SchemaExport export=new SchemaExport(cfg);
      export.execute(false,true,false,false);
      connection.setAutoCommit(false);
      Database hibernateDatabase=new HibernateDatabase(HIBERNATE_CONFIG_FILE);
      Diff diff=new Diff(hibernateDatabase,database);
      DiffResult diffResult=diff.compare();
      assertEquals(0,diffResult.getMissingTables().size());
      assertEquals(0,diffResult.getMissingColumns().size());
      assertEquals(0,diffResult.getMissingPrimaryKeys().size());
      assertEquals(0,diffResult.getMissingIndexes().size());
      assertEquals(0,diffResult.getMissingViews().size());
      assertEquals(0,diffResult.getMissingForeignKeys().size());
      assertEquals(0,diffResult.getUnexpectedTables().size());
      assertEquals(0,diffResult.getUnexpectedColumns().size());
      assertEquals(0,diffResult.getUnexpectedPrimaryKeys().size());
      assertEquals(0,diffResult.getUnexpectedIndexes().size());
      assertEquals(0,diffResult.getUnexpectedViews().size());
      assertEquals(0,diffResult.getUnexpectedForeignKeys().size());
    }
  }
);
}
