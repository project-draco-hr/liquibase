{
  log=Logger.getLogger(Migrator.DEFAULT_LOG_NAME);
  if (changeLogFile != null) {
    this.changeLogFile=changeLogFile.replace("\\","/");
  }
  this.fileOpener=fileOpener;
  SAXParserFactory saxParserFactory=SAXParserFactory.newInstance();
  if (System.getProperty("java.vm.version").startsWith("1.4")) {
    saxParserFactory.setValidating(false);
    saxParserFactory.setNamespaceAware(false);
  }
 else {
    saxParserFactory.setValidating(true);
    saxParserFactory.setNamespaceAware(true);
  }
  try {
    SAXParser parser=saxParserFactory.newSAXParser();
    try {
      parser.setProperty("http://java.sun.com/xml/jaxp/properties/schemaLanguage","http://www.w3.org/2001/XMLSchema");
    }
 catch (    SAXNotRecognizedException e) {
      ;
    }
catch (    SAXNotSupportedException e) {
      ;
    }
    xmlReader=parser.getXMLReader();
    xmlReader.setEntityResolver(new MigratorSchemaResolver());
    xmlReader.setErrorHandler(new ErrorHandler(){
      public void warning(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).warning(exception.getMessage());
        throw exception;
      }
      public void error(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
      public void fatalError(      SAXParseException exception) throws SAXException {
        Logger.getLogger(Migrator.DEFAULT_LOG_NAME).severe(exception.getMessage());
        throw exception;
      }
    }
);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  setMode(Mode.EXECUTE_MODE);
  this.hasChangeLogLock=alreadyHasChangeLogLock;
  this.buildVersion=findVersion();
}
