{
  AddColumnChange refactoring=new AddColumnChange();
  refactoring.setSchemaName("SCHEMA");
  refactoring.setTableName("TAB");
  AddColumnConfig column=new AddColumnConfig();
  column.setName("NEWCOL");
  column.setType("TYP");
  ConstraintsConfig constraints=new ConstraintsConfig();
  constraints.setNullable(Boolean.FALSE);
  column.setConstraints(constraints);
  refactoring.addColumn(column);
  testChangeOnAll(refactoring,new GenerateAllValidator(){
    @Override public void validate(    SqlStatement[] sqlStatements,    Database database){
      if (database instanceof DB2Database) {
        assertEquals(2,sqlStatements.length);
        assertTrue(sqlStatements[0] instanceof AddColumnStatement);
        assertTrue(sqlStatements[1] instanceof ReorganizeTableStatement);
      }
 else {
        assertEquals(1,sqlStatements.length);
        assertTrue(sqlStatements[0] instanceof AddColumnStatement);
      }
      assertEquals("SCHEMA",((AddColumnStatement)sqlStatements[0]).getSchemaName());
      assertEquals("TAB",((AddColumnStatement)sqlStatements[0]).getTableName());
      assertEquals("NEWCOL",((AddColumnStatement)sqlStatements[0]).getColumnName());
      assertEquals("TYP",((AddColumnStatement)sqlStatements[0]).getColumnType());
      assertFalse(((AddColumnStatement)sqlStatements[0]).isPrimaryKey());
      assertFalse(((AddColumnStatement)sqlStatements[0]).isNullable());
    }
  }
);
}
