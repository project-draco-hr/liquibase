{
  StringBuffer buffer=new StringBuffer();
  buffer.append("CREATE TABLE ").append(database.escapeTableName(getSchemaName(),getTableName())).append(" ");
  buffer.append("(");
  Iterator<String> columnIterator=getColumns().iterator();
  while (columnIterator.hasNext()) {
    String column=columnIterator.next();
    boolean isAutoIncrement=autoIncrementColumns.contains(column);
    buffer.append(column);
    buffer.append(" ").append(database.getColumnType(columnTypes.get(column),isAutoIncrement));
    if (getDefaultValue(column) != null) {
      if (database instanceof MSSQLDatabase) {
        buffer.append(" CONSTRAINT ").append(((MSSQLDatabase)database).generateDefaultConstraintName(tableName,column));
      }
      buffer.append(" DEFAULT ");
      buffer.append(getDefaultValue(column));
    }
    if (isAutoIncrement) {
      buffer.append(" ").append(database.getAutoIncrementClause()).append(" ");
    }
    if (getNotNullColumns().contains(column)) {
      buffer.append(" NOT NULL");
    }
 else {
      if (database instanceof SybaseDatabase) {
        buffer.append(" NULL");
      }
    }
    if (columnIterator.hasNext()) {
      buffer.append(", ");
    }
  }
  if (getPrimaryKeyConstraint() != null && getPrimaryKeyConstraint().getColumns().size() > 0) {
    buffer.append(",");
    if (getPrimaryKeyConstraint().getConstraintName() != null) {
      buffer.append(" CONSTRAINT ");
      buffer.append(StringUtils.trimToEmpty(getPrimaryKeyConstraint().getConstraintName()));
    }
    buffer.append(" PRIMARY KEY (");
    buffer.append(StringUtils.join(getPrimaryKeyConstraint().getColumns(),", "));
    buffer.append(")");
    buffer.append(",");
  }
  for (  ForeignKeyConstraint fkConstraint : getForeignKeyConstraints()) {
    buffer.append(" CONSTRAINT ").append(fkConstraint.getForeignKeyName()).append(" FOREIGN KEY (").append(fkConstraint.getColumn()).append(") REFERENCES ").append(fkConstraint.getReferences());
    if (fkConstraint.isDeleteCascade()) {
      buffer.append(" ON DELETE CASCADE");
    }
    if (fkConstraint.isInitiallyDeferred()) {
      buffer.append(" INITIALLY DEFERRED");
    }
    if (fkConstraint.isDeferrable()) {
      buffer.append(" DEFERRABLE");
    }
    buffer.append(",");
  }
  for (  UniqueConstraint uniqueConstraint : getUniqueConstraints()) {
    buffer.append(" CONSTRAINT ");
    buffer.append(uniqueConstraint.getConstraintName());
    buffer.append(" UNIQUE (");
    buffer.append(StringUtils.join(uniqueConstraint.getColumns(),", "));
    buffer.append("),");
  }
  String sql=buffer.toString().replaceFirst(",\\s*$","") + ")";
  if (getTablespace() != null && database.supportsTablespaces()) {
    if (database instanceof MSSQLDatabase) {
      sql+=" ON " + getTablespace();
    }
 else     if (database instanceof DB2Database) {
      sql+=" IN " + getTablespace();
    }
 else {
      sql+=" TABLESPACE " + getTablespace();
    }
  }
  return sql;
}
