{
  StringBuffer buffer=new StringBuffer();
  buffer.append("CREATE TABLE ").append(database.escapeTableName(getSchemaName(),getTableName())).append(" ");
  buffer.append("(");
  Iterator<String> columnIterator=getColumns().iterator();
  while (columnIterator.hasNext()) {
    String column=columnIterator.next();
    boolean isAutoIncrement=autoIncrementColumns.contains(column);
    buffer.append(database.escapeColumnName(getSchemaName(),getTableName(),column));
    buffer.append(" ").append(database.getColumnType(columnTypes.get(column),isAutoIncrement));
    if ((database instanceof SQLiteDatabase) && (getPrimaryKeyConstraint() != null) && (getPrimaryKeyConstraint().getColumns().size() == 1)&& (getPrimaryKeyConstraint().getColumns().contains(column))&& isAutoIncrement) {
      String pkName=StringUtils.trimToNull(getPrimaryKeyConstraint().getConstraintName());
      if (pkName == null) {
        pkName=database.generatePrimaryKeyName(getTableName());
      }
      buffer.append(" CONSTRAINT ");
      buffer.append(database.escapeConstraintName(pkName));
      buffer.append(" PRIMARY KEY AUTOINCREMENT");
    }
    if (getDefaultValue(column) != null) {
      if (database instanceof MSSQLDatabase) {
        buffer.append(" CONSTRAINT ").append(((MSSQLDatabase)database).generateDefaultConstraintName(tableName,column));
      }
      buffer.append(" DEFAULT ");
      buffer.append(getDefaultValue(column));
    }
    if (isAutoIncrement && (database.getAutoIncrementClause() != null) && (!database.getAutoIncrementClause().equals(""))) {
      if (database.supportsAutoIncrement()) {
        buffer.append(" ").append(database.getAutoIncrementClause()).append(" ");
      }
 else {
        LogFactory.getLogger().log(Level.WARNING,database.getProductName() + " does not support autoincrement columns as request for " + (database.escapeTableName(getSchemaName(),getTableName())));
      }
    }
    if (getNotNullColumns().contains(column)) {
      buffer.append(" NOT NULL");
    }
 else {
      if (database instanceof SybaseDatabase || database instanceof SybaseASADatabase) {
        buffer.append(" NULL");
      }
    }
    if (columnIterator.hasNext()) {
      buffer.append(", ");
    }
  }
  buffer.append(",");
  if (!((database instanceof SQLiteDatabase) && (getPrimaryKeyConstraint() != null) && (getPrimaryKeyConstraint().getColumns().size() == 1)&& autoIncrementColumns.contains(getPrimaryKeyConstraint().getColumns().get(0)))) {
    if (getPrimaryKeyConstraint() != null && getPrimaryKeyConstraint().getColumns().size() > 0) {
      String pkName=StringUtils.trimToNull(getPrimaryKeyConstraint().getConstraintName());
      if (pkName == null) {
        pkName=database.generatePrimaryKeyName(getTableName());
      }
      buffer.append(" CONSTRAINT ");
      buffer.append(database.escapeConstraintName(pkName));
      buffer.append(" PRIMARY KEY (");
      buffer.append(database.escapeColumnNameList(StringUtils.join(getPrimaryKeyConstraint().getColumns(),", ")));
      buffer.append(")");
      buffer.append(",");
    }
  }
  for (  ForeignKeyConstraint fkConstraint : getForeignKeyConstraints()) {
    buffer.append(" CONSTRAINT ").append(database.escapeConstraintName(fkConstraint.getForeignKeyName())).append(" FOREIGN KEY (").append(database.escapeColumnName(getSchemaName(),getTableName(),fkConstraint.getColumn())).append(") REFERENCES ").append(fkConstraint.getReferences());
    if (fkConstraint.isDeleteCascade()) {
      buffer.append(" ON DELETE CASCADE");
    }
    if (fkConstraint.isInitiallyDeferred()) {
      buffer.append(" INITIALLY DEFERRED");
    }
    if (fkConstraint.isDeferrable()) {
      buffer.append(" DEFERRABLE");
    }
    buffer.append(",");
  }
  for (  UniqueConstraint uniqueConstraint : getUniqueConstraints()) {
    if (uniqueConstraint.getConstraintName() != null) {
      buffer.append(" CONSTRAINT ");
      buffer.append(database.escapeConstraintName(uniqueConstraint.getConstraintName()));
    }
    buffer.append(" UNIQUE (");
    buffer.append(database.escapeColumnNameList(StringUtils.join(uniqueConstraint.getColumns(),", ")));
    buffer.append("),");
  }
  String sql=buffer.toString().replaceFirst(",\\s*$","") + ")";
  if (getTablespace() != null && database.supportsTablespaces()) {
    if (database instanceof MSSQLDatabase || database instanceof SybaseASADatabase) {
      sql+=" ON " + getTablespace();
    }
 else     if (database instanceof DB2Database) {
      sql+=" IN " + getTablespace();
    }
 else {
      sql+=" TABLESPACE " + getTablespace();
    }
  }
  return sql;
}
