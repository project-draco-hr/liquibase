{
  Database database=snapshot.getDatabase();
  updateListeners("Reading foreign keys for " + database.toString() + " ...");
  for (  Table table : snapshot.getDatabaseObjects(schema,Table.class)) {
    Schema rawSchema=getSchemaFromJdbcInfo(table.getRawSchemaName(),table.getRawCatalogName(),database);
    ResultSet importedKeyMetadataResultSet=getMetaData(database).getImportedKeys(getJdbcCatalogName(rawSchema),getJdbcSchemaName(rawSchema),table.getName());
    try {
      while (importedKeyMetadataResultSet.next()) {
        ForeignKey newFk=readForeignKey(importedKeyMetadataResultSet,snapshot);
        if (newFk != null) {
          snapshot.addDatabaseObjects(newFk);
        }
      }
    }
  finally {
      importedKeyMetadataResultSet.close();
    }
    for (    ForeignKey fk : snapshot.getDatabaseObjects(schema,ForeignKey.class)) {
      Table tempPKTable=fk.getPrimaryKeyTable();
      Table pkTable=snapshot.getDatabaseObject(schema,tempPKTable.getName(),Table.class);
      if (pkTable == null) {
        LogFactory.getLogger().warning("Foreign key " + fk.getName() + " references table "+ tempPKTable+ ", which is in a different schema. Retaining FK in diff, but table will not be diffed.");
      }
      Table tempFkTable=fk.getForeignKeyTable();
      Table fkTable=snapshot.getDatabaseObject(schema,tempFkTable.getName(),Table.class);
      if (fkTable == null) {
        LogFactory.getLogger().warning("Foreign key " + fk.getName() + " is in table "+ tempFkTable+ ", which we cannot find. Ignoring.");
        continue;
      }
      snapshot.addDatabaseObjects(fk);
    }
  }
}
