{
  Object val=columnMetadataResultSet.get("COLUMN_DEF");
  if (!(val instanceof String)) {
    return val;
  }
  String stringVal=(String)val;
  if (stringVal.isEmpty()) {
    return null;
  }
  if (stringVal.startsWith("'") && stringVal.endsWith("'")) {
    stringVal=stringVal.substring(1,stringVal.length() - 1);
  }
 else   if (stringVal.startsWith("(") && stringVal.endsWith(")")) {
    return new DatabaseFunction(stringVal.substring(1,stringVal.length() - 1));
  }
  int type=columnInfo.getType().getDataTypeId();
  String typeName=columnInfo.getType().getTypeName();
  Scanner scanner=new Scanner(stringVal.trim());
  try {
    if (type == Types.ARRAY) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.BIGINT && scanner.hasNextBigInteger()) {
      return scanner.nextBigInteger();
    }
 else     if (type == Types.BINARY) {
      return new DatabaseFunction(stringVal.trim());
    }
 else     if (type == Types.BIT) {
      if (stringVal.startsWith("b'")) {
        stringVal=stringVal.replaceFirst("b'","").replaceFirst("'$","");
      }
      stringVal=stringVal.trim();
      if (scanner.hasNextBoolean()) {
        return scanner.nextBoolean();
      }
 else {
        return new Integer(stringVal);
      }
    }
 else     if (type == Types.BLOB) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.BOOLEAN && scanner.hasNextBoolean()) {
      return scanner.nextBoolean();
    }
 else     if (type == Types.CHAR) {
      return stringVal;
    }
 else     if (type == Types.DATALINK) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.DATE) {
      return new java.sql.Date(getDateFormat().parse(stringVal.trim()).getTime());
    }
 else     if (type == Types.DECIMAL && scanner.hasNextBigDecimal()) {
      return scanner.nextBigDecimal();
    }
 else     if (type == Types.DISTINCT) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.DOUBLE && scanner.hasNextDouble()) {
      return scanner.nextDouble();
    }
 else     if (type == Types.FLOAT && scanner.hasNextFloat()) {
      return scanner.nextFloat();
    }
 else     if (type == Types.INTEGER && scanner.hasNextInt()) {
      return scanner.nextInt();
    }
 else     if (type == Types.JAVA_OBJECT) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.LONGNVARCHAR) {
      return stringVal;
    }
 else     if (type == Types.LONGVARBINARY) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.LONGVARCHAR) {
      return stringVal;
    }
 else     if (type == Types.NCHAR) {
      return stringVal;
    }
 else     if (type == Types.NCLOB) {
      return stringVal;
    }
 else     if (type == Types.NULL) {
      return null;
    }
 else     if (type == Types.NUMERIC && scanner.hasNextBigDecimal()) {
      return scanner.nextBigDecimal();
    }
 else     if (type == Types.NVARCHAR) {
      return stringVal;
    }
 else     if (type == Types.OTHER) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.REAL) {
      return new BigDecimal(stringVal.trim());
    }
 else     if (type == Types.REF) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.ROWID) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.SMALLINT && scanner.hasNextInt()) {
      return scanner.nextInt();
    }
 else     if (type == Types.SQLXML) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.STRUCT) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.TIME) {
      return new java.sql.Time(getTimeFormat().parse(stringVal).getTime());
    }
 else     if (type == Types.TIMESTAMP) {
      return new Timestamp(getDateTimeFormat().parse(stringVal).getTime());
    }
 else     if (type == Types.TINYINT && scanner.hasNextInt()) {
      return scanner.nextInt();
    }
 else     if (type == Types.VARBINARY) {
      return new DatabaseFunction(stringVal);
    }
 else     if (type == Types.VARCHAR) {
      return stringVal;
    }
 else {
      LogFactory.getLogger().info("Unknown default value: value [" + stringVal + "] type ["+ typeName+ " "+ type+ "]");
      return new DatabaseFunction(stringVal);
    }
  }
 catch (  ParseException e) {
    return new DatabaseFunction(stringVal);
  }
}
