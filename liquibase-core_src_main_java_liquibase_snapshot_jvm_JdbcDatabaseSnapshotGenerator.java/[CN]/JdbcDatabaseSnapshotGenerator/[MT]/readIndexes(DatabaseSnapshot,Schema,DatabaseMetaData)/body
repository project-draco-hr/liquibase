{
  Database database=snapshot.getDatabase();
  updateListeners("Reading indexes for " + database.toString() + " ...");
  for (  Table table : snapshot.getDatabaseObjects(schema,Table.class)) {
    ResultSet rs=null;
    Statement statement=null;
    try {
      if (database instanceof OracleDatabase) {
        statement=((JdbcConnection)database.getConnection()).getUnderlyingConnection().createStatement();
        String sql="SELECT INDEX_NAME, 3 AS TYPE, TABLE_NAME, COLUMN_NAME, COLUMN_POSITION AS ORDINAL_POSITION, null AS FILTER_CONDITION FROM ALL_IND_COLUMNS WHERE TABLE_OWNER='" + schema.getName() + "' AND TABLE_NAME='"+ table.getName()+ "' ORDER BY INDEX_NAME, ORDINAL_POSITION";
        rs=statement.executeQuery(sql);
      }
 else {
        rs=databaseMetaData.getIndexInfo(schema.getCatalogName(),schema.getName(),table.getName(),false,true);
      }
      Map<String,Index> indexMap=new HashMap<String,Index>();
      while (rs.next()) {
        String indexName=cleanObjectNameFromDatabase(rs.getString("INDEX_NAME"));
        if (database instanceof InformixDatabase && indexName.startsWith(" ")) {
          indexName="_generated_index_" + indexName.substring(1);
        }
        short type=rs.getShort("TYPE");
        boolean nonUnique=true;
        try {
          nonUnique=rs.getBoolean("NON_UNIQUE");
        }
 catch (        SQLException e) {
        }
        String columnName=cleanObjectNameFromDatabase(rs.getString("COLUMN_NAME"));
        short position=rs.getShort("ORDINAL_POSITION");
        if (database instanceof InformixDatabase && type != DatabaseMetaData.tableIndexStatistic && position == 0) {
          System.out.println(this.getClass().getName() + ": corrected position to " + ++position);
        }
        String filterCondition=rs.getString("FILTER_CONDITION");
        if (type == DatabaseMetaData.tableIndexStatistic) {
          continue;
        }
        if (columnName == null) {
          continue;
        }
        Index indexInformation;
        if (indexMap.containsKey(indexName)) {
          indexInformation=indexMap.get(indexName);
        }
 else {
          indexInformation=new Index();
          indexInformation.setTable(table);
          indexInformation.setName(indexName);
          indexInformation.setUnique(!nonUnique);
          indexInformation.setFilterCondition(filterCondition);
          if (!includeInSnapshot(indexInformation)) {
            continue;
          }
          indexMap.put(indexName,indexInformation);
        }
        for (int i=indexInformation.getColumns().size(); i < position; i++) {
          indexInformation.getColumns().add(null);
        }
        indexInformation.getColumns().set(position - 1,columnName);
      }
      for (      Map.Entry<String,Index> entry : indexMap.entrySet()) {
        snapshot.addDatabaseObjects(entry.getValue());
      }
    }
  finally {
      if (rs != null) {
        try {
          rs.close();
        }
 catch (        SQLException ignored) {
        }
      }
      if (statement != null) {
        try {
          statement.close();
        }
 catch (        SQLException ignored) {
        }
      }
    }
  }
  Set<Index> indexesToRemove=new HashSet<Index>();
  for (  Index index : snapshot.getDatabaseObjects(schema,Index.class)) {
    for (    PrimaryKey pk : snapshot.getDatabaseObjects(schema,PrimaryKey.class)) {
      if (index.getTable().getName().equalsIgnoreCase(pk.getTable().getName()) && index.getColumnNames().equals(pk.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_PRIMARY_KEY);
      }
    }
    for (    ForeignKey fk : snapshot.getDatabaseObjects(schema,ForeignKey.class)) {
      if (index.getTable().getName().equalsIgnoreCase(fk.getForeignKeyTable().getName()) && index.getColumnNames().equals(fk.getForeignKeyColumns())) {
        index.addAssociatedWith(Index.MARK_FOREIGN_KEY);
      }
    }
    for (    UniqueConstraint uc : snapshot.getDatabaseObjects(schema,UniqueConstraint.class)) {
      if (index.getTable().getName().equalsIgnoreCase(uc.getTable().getName()) && index.getColumnNames().equals(uc.getColumnNames())) {
        index.addAssociatedWith(Index.MARK_UNIQUE_CONSTRAINT);
      }
    }
  }
  snapshot.removeDatabaseObjects(schema,indexesToRemove.toArray(new Index[indexesToRemove.size()]));
}
