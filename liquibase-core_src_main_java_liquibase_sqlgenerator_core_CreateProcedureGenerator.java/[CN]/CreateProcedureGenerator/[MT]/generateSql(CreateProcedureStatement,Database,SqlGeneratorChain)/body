{
  List<Sql> sql=new ArrayList<Sql>();
  String schemaName=statement.getSchemaName();
  if (schemaName == null && LiquibaseConfiguration.getInstance().getConfiguration(GlobalConfiguration.class).getAlwaysOverrideStoredLogicSchema()) {
    schemaName=database.getDefaultSchemaName();
  }
  String procedureText=addSchemaToText(statement.getProcedureText(),schemaName,"PROCEDURE",database);
  if (statement.getReplaceIfExists() != null && statement.getReplaceIfExists()) {
    String fullyQualifiedName=database.escapeObjectName(statement.getProcedureName(),StoredProcedure.class);
    if (schemaName != null) {
      fullyQualifiedName=database.escapeObjectName(schemaName,Schema.class) + "." + fullyQualifiedName;
    }
    sql.add(new UnparsedSql("if object_id('" + fullyQualifiedName + "', 'p') is null exec ('create procedure "+ fullyQualifiedName+ " as select 1 a')"));
    StringClauses parsedSql=SqlParser.parse(procedureText,true,true);
    StringClauses.ClauseIterator clauseIterator=parsedSql.getClauseIterator();
    Object next="START";
    while (next != null && !(next.toString().equalsIgnoreCase("create") || next.toString().equalsIgnoreCase("alter")) && clauseIterator.hasNext()) {
      next=clauseIterator.nextNonWhitespace();
    }
    clauseIterator.replace("ALTER");
    procedureText=parsedSql.toString();
  }
  procedureText=removeTrailingDelimiter(procedureText,statement.getEndDelimiter());
  if (database instanceof MSSQLDatabase && procedureText.toLowerCase().contains("merge") && !procedureText.endsWith(";")) {
    StringClauses parsed=SqlParser.parse(procedureText);
    StringClauses.ClauseIterator clauseIterator=parsed.getClauseIterator();
    boolean reallyMerge=false;
    while (clauseIterator.hasNext()) {
      Object clause=clauseIterator.nextNonWhitespace();
      if (((String)clause).equalsIgnoreCase("merge")) {
        reallyMerge=true;
      }
    }
    if (reallyMerge) {
      procedureText=procedureText + ";";
    }
  }
  sql.add(new UnparsedSql(procedureText,statement.getEndDelimiter()));
  surroundWithSchemaSets(sql,statement.getSchemaName(),database);
  return sql.toArray(new Sql[sql.size()]);
}
