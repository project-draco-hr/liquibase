{
  if (example == null) {
    return null;
  }
  if (database.isSystemObject(example)) {
    return null;
  }
  if (example instanceof Schema && example.getName() == null && (((Schema)example).getCatalog() == null || ((Schema)example).getCatalogName() == null)) {
    CatalogAndSchema catalogAndSchema=((Schema)example).toCatalogAndSchema().customize(database);
    example=(T)new Schema(catalogAndSchema.getCatalogName(),catalogAndSchema.getSchemaName());
  }
  if (!snapshotControl.shouldInclude(example.getClass())) {
    return example;
  }
  T existing=get(example);
  if (existing != null) {
    return existing;
  }
  if (isKnownNull(example)) {
    return null;
  }
  SnapshotListener snapshotListener=snapshotControl.getSnapshotListener();
  SnapshotGeneratorChain chain=createGeneratorChain(example.getClass(),database);
  if (snapshotListener != null) {
    snapshotListener.willSnapshot(example,database);
  }
  T object=chain.snapshot(example,this);
  if (object == null) {
    Set<DatabaseObject> collection=knownNull.get(example.getClass());
    if (collection == null) {
      collection=new HashSet<DatabaseObject>();
      knownNull.put(example.getClass(),collection);
    }
    collection.add(example);
  }
 else {
    allFound.add(object);
    try {
      includeNestedObjects(object);
    }
 catch (    InstantiationException e) {
      throw new UnexpectedLiquibaseException(e);
    }
catch (    IllegalAccessException e) {
      throw new UnexpectedLiquibaseException(e);
    }
  }
  if (snapshotListener != null) {
    snapshotListener.finishedSnapshot(example,object,database);
  }
  return object;
}
