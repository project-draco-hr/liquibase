{
  if (database instanceof InformixDatabase) {
    AbstractSqlGenerator<CreateTableStatement> gen=new CreateTableGeneratorInformix();
    return gen.generateSql(statement,database,sqlGeneratorChain);
  }
  List<Sql> additionalSql=new ArrayList<Sql>();
  StringBuffer buffer=new StringBuffer();
  buffer.append("CREATE TABLE ").append(database.escapeTableName(statement.getCatalogName(),statement.getSchemaName(),statement.getTableName())).append(" ");
  buffer.append("(");
  boolean isSinglePrimaryKeyColumn=statement.getPrimaryKeyConstraint() != null && statement.getPrimaryKeyConstraint().getColumns().size() == 1;
  boolean isPrimaryKeyAutoIncrement=false;
  Iterator<String> columnIterator=statement.getColumns().iterator();
  List<String> primaryKeyColumns=new LinkedList<String>();
  while (columnIterator.hasNext()) {
    String column=columnIterator.next();
    DatabaseDataType columnType=statement.getColumnTypes().get(column).toDatabaseDataType(database);
    buffer.append(database.escapeColumnName(statement.getCatalogName(),statement.getSchemaName(),statement.getTableName(),column));
    buffer.append(" ").append(columnType);
    AutoIncrementConstraint autoIncrementConstraint=null;
    for (    AutoIncrementConstraint currentAutoIncrementConstraint : statement.getAutoIncrementConstraints()) {
      if (column.equals(currentAutoIncrementConstraint.getColumnName())) {
        autoIncrementConstraint=currentAutoIncrementConstraint;
        break;
      }
    }
    boolean isAutoIncrementColumn=autoIncrementConstraint != null;
    boolean isPrimaryKeyColumn=statement.getPrimaryKeyConstraint() != null && statement.getPrimaryKeyConstraint().getColumns().contains(column);
    isPrimaryKeyAutoIncrement=isPrimaryKeyAutoIncrement || isPrimaryKeyColumn && isAutoIncrementColumn;
    if (isPrimaryKeyColumn) {
      primaryKeyColumns.add(column);
    }
    if ((database instanceof SQLiteDatabase) && isSinglePrimaryKeyColumn && isPrimaryKeyColumn&& isAutoIncrementColumn) {
      String pkName=StringUtils.trimToNull(statement.getPrimaryKeyConstraint().getConstraintName());
      if (pkName == null) {
        pkName=database.generatePrimaryKeyName(statement.getTableName());
      }
      if (pkName != null) {
        buffer.append(" CONSTRAINT ");
        buffer.append(database.escapeConstraintName(pkName));
      }
      buffer.append(" PRIMARY KEY AUTOINCREMENT");
    }
    if (!columnType.isAutoIncrement() && statement.getDefaultValue(column) != null) {
      Object defaultValue=statement.getDefaultValue(column);
      if (database instanceof MSSQLDatabase) {
        buffer.append(" CONSTRAINT ").append(((MSSQLDatabase)database).generateDefaultConstraintName(statement.getTableName(),column));
      }
      buffer.append(" DEFAULT ");
      buffer.append(statement.getColumnTypes().get(column).objectToSql(defaultValue,database));
    }
    if (isAutoIncrementColumn) {
      if (database.supportsAutoIncrement()) {
        String autoIncrementClause=database.getAutoIncrementClause(autoIncrementConstraint.getStartWith(),autoIncrementConstraint.getIncrementBy());
        if (!"".equals(autoIncrementClause)) {
          buffer.append(" ").append(autoIncrementClause);
        }
        if (database instanceof PostgresDatabase && autoIncrementConstraint.getStartWith() != null) {
          String sequenceName=statement.getTableName() + "_" + column+ "_seq";
          additionalSql.add(new UnparsedSql("alter sequence " + database.escapeSequenceName(statement.getCatalogName(),statement.getSchemaName(),sequenceName) + " start with "+ autoIncrementConstraint.getStartWith(),new Sequence().setName(sequenceName).setSchema(statement.getCatalogName(),statement.getSchemaName())));
        }
      }
 else {
        LogFactory.getLogger().warning(database.getShortName() + " does not support autoincrement columns as request for " + (database.escapeTableName(statement.getCatalogName(),statement.getSchemaName(),statement.getTableName())));
      }
    }
    if (statement.getNotNullColumns().contains(column)) {
      buffer.append(" NOT NULL");
    }
 else {
      if (database instanceof SybaseDatabase || database instanceof SybaseASADatabase || database instanceof MySQLDatabase) {
        if (database instanceof MySQLDatabase && statement.getColumnTypes().get(column).getName().equalsIgnoreCase("timestamp")) {
        }
 else {
          buffer.append(" NULL");
        }
      }
    }
    if (database instanceof InformixDatabase && isSinglePrimaryKeyColumn && isPrimaryKeyColumn) {
    }
    if (columnIterator.hasNext()) {
      buffer.append(", ");
    }
  }
  buffer.append(",");
  if (!((database instanceof SQLiteDatabase) && isSinglePrimaryKeyColumn && isPrimaryKeyAutoIncrement) && !((database instanceof InformixDatabase) && isSinglePrimaryKeyColumn)) {
    if (statement.getPrimaryKeyConstraint() != null && statement.getPrimaryKeyConstraint().getColumns().size() > 0) {
      if (!(database instanceof InformixDatabase)) {
        String pkName=StringUtils.trimToNull(statement.getPrimaryKeyConstraint().getConstraintName());
        if (pkName == null) {
          pkName=database.generatePrimaryKeyName(statement.getTableName());
        }
        if (pkName != null) {
          buffer.append(" CONSTRAINT ");
          buffer.append(database.escapeConstraintName(pkName));
        }
      }
      buffer.append(" PRIMARY KEY (");
      buffer.append(database.escapeColumnNameList(StringUtils.join(statement.getPrimaryKeyConstraint().getColumns(),", ")));
      buffer.append(")");
      if (database instanceof OracleDatabase && statement.getPrimaryKeyConstraint().getTablespace() != null) {
        buffer.append(" USING INDEX TABLESPACE ");
        buffer.append(statement.getPrimaryKeyConstraint().getTablespace());
      }
      buffer.append(",");
    }
  }
  for (  ForeignKeyConstraint fkConstraint : statement.getForeignKeyConstraints()) {
    if (!(database instanceof InformixDatabase)) {
      buffer.append(" CONSTRAINT ");
      buffer.append(database.escapeConstraintName(fkConstraint.getForeignKeyName()));
    }
    String referencesString=fkConstraint.getReferences();
    buffer.append(" FOREIGN KEY (").append(database.escapeColumnName(statement.getCatalogName(),statement.getSchemaName(),statement.getTableName(),fkConstraint.getColumn())).append(") REFERENCES ");
    if (referencesString != null) {
      if (!referencesString.contains(".") && database.getDefaultSchemaName() != null && database.getOutputDefaultSchema()) {
        referencesString=database.getDefaultSchemaName() + "." + referencesString;
      }
      buffer.append(referencesString);
    }
 else {
      buffer.append(database.escapeObjectName(fkConstraint.getReferencedTableName(),Table.class)).append("(").append(database.escapeColumnNameList(fkConstraint.getReferencedColumnNames())).append(")");
    }
    if (fkConstraint.isDeleteCascade()) {
      buffer.append(" ON DELETE CASCADE");
    }
    if ((database instanceof InformixDatabase)) {
      buffer.append(" CONSTRAINT ");
      buffer.append(database.escapeConstraintName(fkConstraint.getForeignKeyName()));
    }
    if (fkConstraint.isInitiallyDeferred()) {
      buffer.append(" INITIALLY DEFERRED");
    }
    if (fkConstraint.isDeferrable()) {
      buffer.append(" DEFERRABLE");
    }
    buffer.append(",");
  }
  for (  UniqueConstraint uniqueConstraint : statement.getUniqueConstraints()) {
    if (uniqueConstraint.getConstraintName() != null && !constraintNameAfterUnique(database)) {
      buffer.append(" CONSTRAINT ");
      buffer.append(database.escapeConstraintName(uniqueConstraint.getConstraintName()));
    }
    buffer.append(" UNIQUE (");
    buffer.append(database.escapeColumnNameList(StringUtils.join(uniqueConstraint.getColumns(),", ")));
    buffer.append(")");
    if (uniqueConstraint.getConstraintName() != null && constraintNameAfterUnique(database)) {
      buffer.append(" CONSTRAINT ");
      buffer.append(database.escapeConstraintName(uniqueConstraint.getConstraintName()));
    }
    buffer.append(",");
  }
  String sql=buffer.toString().replaceFirst(",\\s*$","") + ")";
  if (statement.getTablespace() != null && database.supportsTablespaces()) {
    if (database instanceof MSSQLDatabase || database instanceof SybaseASADatabase) {
      sql+=" ON " + statement.getTablespace();
    }
 else     if (database instanceof DB2Database || database instanceof InformixDatabase) {
      sql+=" IN " + statement.getTablespace();
    }
 else {
      sql+=" TABLESPACE " + statement.getTablespace();
    }
  }
  additionalSql.add(0,new UnparsedSql(sql,getAffectedTable(statement)));
  return additionalSql.toArray(new Sql[additionalSql.size()]);
}
