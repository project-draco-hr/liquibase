{
  ChangeLogParameters params=new ChangeLogParameters();
  params.set("tablename","table4");
  DatabaseChangeLog changeLog=new MockFormattedSqlChangeLogParser(VALID_CHANGELOG).parse("asdf.sql",params,new JUnitResourceAccessor());
  assertEquals("asdf.sql",changeLog.getLogicalFilePath());
  assertEquals(9,changeLog.getChangeSets().size());
  assertEquals("nvoxland",changeLog.getChangeSets().get(0).getAuthor());
  assertEquals("1",changeLog.getChangeSets().get(0).getId());
  assertEquals(1,changeLog.getChangeSets().get(0).getChanges().size());
  assertEquals("select * from table1;",((RawSQLChange)changeLog.getChangeSets().get(0).getChanges().get(0)).getSql());
  assertNull(((RawSQLChange)changeLog.getChangeSets().get(0).getChanges().get(0)).getEndDelimiter());
  assertTrue(((RawSQLChange)changeLog.getChangeSets().get(0).getChanges().get(0)).isSplitStatements());
  assertTrue(((RawSQLChange)changeLog.getChangeSets().get(0).getChanges().get(0)).isStripComments());
  assertFalse(changeLog.getChangeSets().get(0).isAlwaysRun());
  assertFalse(changeLog.getChangeSets().get(0).isRunOnChange());
  assertTrue(changeLog.getChangeSets().get(0).isRunInTransaction());
  assertTrue(changeLog.getChangeSets().get(0).getContexts().isEmpty());
  assertNull(changeLog.getChangeSets().get(0).getDbmsSet());
  assertEquals("nvoxland",changeLog.getChangeSets().get(1).getAuthor());
  assertEquals("2",changeLog.getChangeSets().get(1).getId());
  assertEquals(1,changeLog.getChangeSets().get(1).getChanges().size());
  assertEquals("create table table1 (\n" + "  id int primary key\n" + ");",((RawSQLChange)changeLog.getChangeSets().get(1).getChanges().get(0)).getSql());
  assertEquals("X",((RawSQLChange)changeLog.getChangeSets().get(1).getChanges().get(0)).getEndDelimiter());
  assertFalse(((RawSQLChange)changeLog.getChangeSets().get(1).getChanges().get(0)).isSplitStatements());
  assertFalse(((RawSQLChange)changeLog.getChangeSets().get(1).getChanges().get(0)).isStripComments());
  assertEquals("X",((RawSQLChange)changeLog.getChangeSets().get(1).getChanges().get(0)).getEndDelimiter());
  assertFalse(((RawSQLChange)changeLog.getChangeSets().get(1).getChanges().get(0)).isSplitStatements());
  assertFalse(((RawSQLChange)changeLog.getChangeSets().get(1).getChanges().get(0)).isStripComments());
  assertTrue(changeLog.getChangeSets().get(1).isAlwaysRun());
  assertTrue(changeLog.getChangeSets().get(1).isRunOnChange());
  assertFalse(changeLog.getChangeSets().get(1).isRunInTransaction());
  assertEquals("y",changeLog.getChangeSets().get(1).getContexts().toString());
  assertEquals("mysql",StringUtils.join(changeLog.getChangeSets().get(1).getDbmsSet(),","));
  assertEquals(1,changeLog.getChangeSets().get(1).getRollBackChanges().length);
  assertEquals("delete from table1;\n" + "drop table table1;",((RawSQLChange)changeLog.getChangeSets().get(1).getRollBackChanges()[0]).getSql());
  assertEquals("nvoxland",changeLog.getChangeSets().get(2).getAuthor());
  assertEquals("3",changeLog.getChangeSets().get(2).getId());
  assertEquals(1,changeLog.getChangeSets().get(2).getChanges().size());
  assertEquals("create table table2 (\n" + "  id int primary key\n" + ");\n"+ "create table table3 (\n"+ "  id int primary key\n"+ ");",((RawSQLChange)changeLog.getChangeSets().get(2).getChanges().get(0)).getSql());
  assertNull(((RawSQLChange)changeLog.getChangeSets().get(2).getChanges().get(0)).getEndDelimiter());
  assertTrue(((RawSQLChange)changeLog.getChangeSets().get(2).getChanges().get(0)).isSplitStatements());
  assertTrue(((RawSQLChange)changeLog.getChangeSets().get(2).getChanges().get(0)).isStripComments());
  assertEquals(1,changeLog.getChangeSets().get(2).getRollBackChanges().length);
  assertTrue(changeLog.getChangeSets().get(2).getRollBackChanges()[0] instanceof RawSQLChange);
  assertEquals("drop table table2;",((RawSQLChange)changeLog.getChangeSets().get(2).getRollBackChanges()[0]).getSql());
  assertEquals("alwyn",changeLog.getChangeSets().get(3).getAuthor());
  assertEquals("4",changeLog.getChangeSets().get(3).getId());
  assertEquals(1,changeLog.getChangeSets().get(3).getRollBackChanges().length);
  assertTrue(changeLog.getChangeSets().get(3).getRollBackChanges()[0] instanceof EmptyChange);
  assertEquals("nvoxland",changeLog.getChangeSets().get(4).getAuthor());
  assertEquals("5",changeLog.getChangeSets().get(4).getId());
  assertEquals(1,changeLog.getChangeSets().get(4).getRollBackChanges().length);
  assertTrue(changeLog.getChangeSets().get(4).getRollBackChanges()[0] instanceof EmptyChange);
  assertEquals("paikens",changeLog.getChangeSets().get(5).getAuthor());
  assertEquals("6",changeLog.getChangeSets().get(5).getId());
  assertEquals(1,changeLog.getChangeSets().get(5).getChanges().size());
  assertTrue(changeLog.getChangeSets().get(5).getChanges().get(0) instanceof RawSQLChange);
  assertEquals("create table table4 (\n" + "  id int primary key\n" + ");",((RawSQLChange)changeLog.getChangeSets().get(5).getChanges().get(0)).getSql());
  assertEquals(1,changeLog.getChangeSets().get(5).getRollBackChanges().length);
  assertTrue(changeLog.getChangeSets().get(5).getRollBackChanges()[0] instanceof RawSQLChange);
  assertEquals("drop table table4;",((RawSQLChange)changeLog.getChangeSets().get(5).getRollBackChanges()[0]).getSql());
  assertEquals("mysql",changeLog.getChangeSets().get(6).getAuthor());
  assertEquals("1",changeLog.getChangeSets().get(6).getId());
  assertEquals(1,changeLog.getChangeSets().get(6).getChanges().size());
  assertTrue(changeLog.getChangeSets().get(6).getChanges().get(0) instanceof RawSQLChange);
  assertEquals("create table mysql_boo (\n" + "  id int primary key\n" + ");",((RawSQLChange)changeLog.getChangeSets().get(6).getChanges().get(0)).getSql());
  assertEquals(1,changeLog.getChangeSets().get(6).getRollBackChanges().length);
  assertTrue(changeLog.getChangeSets().get(6).getRollBackChanges()[0] instanceof RawSQLChange);
  assertEquals("drop table mysql_boo;",((RawSQLChange)changeLog.getChangeSets().get(6).getRollBackChanges()[0]).getSql());
  assertEquals("multicontext",changeLog.getChangeSets().get(7).getAuthor());
  assertEquals("1",changeLog.getChangeSets().get(7).getId());
  assertEquals(1,changeLog.getChangeSets().get(7).getChanges().size());
  assertTrue(changeLog.getChangeSets().get(7).getChanges().get(0) instanceof RawSQLChange);
  assertEquals("select 1;",((RawSQLChange)changeLog.getChangeSets().get(7).getChanges().get(0)).getSql());
  assertEquals(0,changeLog.getChangeSets().get(7).getRollBackChanges().length);
  assertTrue(changeLog.getChangeSets().get(7).getContexts().toString().contains("first"));
  assertTrue(changeLog.getChangeSets().get(7).getContexts().toString().contains("second"));
  assertTrue(changeLog.getChangeSets().get(7).getContexts().toString().contains("third"));
  ChangeSet cs=changeLog.getChangeSets().get(8);
  assertEquals("bboisvert",cs.getAuthor());
  assertEquals("with_preconditions",cs.getId());
  PreconditionContainer pc=cs.getPreconditions();
  assertNotNull(pc);
  assertEquals(PreconditionContainer.FailOption.MARK_RAN,pc.getOnFail());
  assertEquals(PreconditionContainer.ErrorOption.HALT,pc.getOnError());
  assertEquals(PreconditionContainer.OnSqlOutputOption.FAIL,pc.getOnSqlOutput());
  assertEquals(2,pc.getNestedPreconditions().size());
  assertTrue(pc.getNestedPreconditions().get(0) instanceof SqlPrecondition);
  SqlPrecondition p0=(SqlPrecondition)pc.getNestedPreconditions().get(0);
  assertEquals("0 table(s)",p0.getExpectedResult());
  assertEquals("select count(*) || ' table(s)' from information_schema.tables where table_name = 'my_table'",p0.getSql());
  assertTrue(pc.getNestedPreconditions().get(1) instanceof SqlPrecondition);
  SqlPrecondition p1=(SqlPrecondition)pc.getNestedPreconditions().get(1);
  assertEquals("0",p1.getExpectedResult());
  assertEquals("select count(*) from information_schema.columns where table_name = 'my_table' and column_name = 'id'",p1.getSql());
  assertEquals(1,cs.getChanges().size());
  assertTrue(cs.getChanges().get(0) instanceof RawSQLChange);
  assertEquals("create table my_table (\n" + "  id int primary key\n" + ");",((RawSQLChange)cs.getChanges().get(0)).getSql());
  assertEquals(1,cs.getRollBackChanges().length);
  assertTrue(cs.getRollBackChanges()[0] instanceof RawSQLChange);
  assertEquals("drop table my_table;",((RawSQLChange)cs.getRollBackChanges()[0]).getSql());
}
