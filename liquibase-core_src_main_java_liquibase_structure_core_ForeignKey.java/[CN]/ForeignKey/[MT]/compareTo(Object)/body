{
  StringUtils.StringUtilsFormatter formatter=new StringUtils.StringUtilsFormatter<Column>(){
    @Override public String toString(    Column obj){
      return obj.toString(false);
    }
  }
;
  ForeignKey o=(ForeignKey)other;
  int returnValue=0;
  if (this.getForeignKeyTable() != null && o.getForeignKeyTable() != null) {
    returnValue=this.getForeignKeyTable().compareTo(o.getForeignKeyTable());
  }
  if (returnValue == 0 && this.getForeignKeyColumns() != null && o.getForeignKeyColumns() != null) {
    returnValue=StringUtils.join(this.getForeignKeyColumns(),",",formatter).compareToIgnoreCase(StringUtils.join(o.getForeignKeyColumns(),",",formatter));
  }
  if (returnValue == 0 && this.getName() != null && o.getName() != null) {
    returnValue=this.getName().compareToIgnoreCase(o.getName());
  }
  if (returnValue == 0 && this.getPrimaryKeyTable() != null && o.getPrimaryKeyTable() != null) {
    returnValue=this.getPrimaryKeyTable().compareTo(o.getPrimaryKeyTable());
  }
  if (returnValue == 0 && this.getPrimaryKeyColumns() != null && o.getPrimaryKeyColumns() != null) {
    returnValue=StringUtils.join(this.getPrimaryKeyColumns(),",",formatter).compareToIgnoreCase(StringUtils.join(o.getPrimaryKeyColumns(),",",formatter));
  }
  if (returnValue == 0 && this.getUpdateRule() != null && o.getUpdateRule() != null)   returnValue=this.getUpdateRule().compareTo(o.getUpdateRule());
  if (returnValue == 0 && this.getDeleteRule() != null && o.getDeleteRule() != null)   returnValue=this.getDeleteRule().compareTo(o.getDeleteRule());
  return returnValue;
}
