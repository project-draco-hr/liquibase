{
  Element node=currentChangeLogFileDOM.createElement(change.getChangeMetaData().getName());
  try {
    List<Field> allFields=new ArrayList<Field>();
    Class classToExtractFieldsFrom=change.getClass();
    while (!classToExtractFieldsFrom.equals(Object.class)) {
      allFields.addAll(Arrays.asList(classToExtractFieldsFrom.getDeclaredFields()));
      classToExtractFieldsFrom=classToExtractFieldsFrom.getSuperclass();
    }
    for (    Field field : allFields) {
      field.setAccessible(true);
      ChangeProperty changePropertyAnnotation=field.getAnnotation(ChangeProperty.class);
      if (changePropertyAnnotation != null && !changePropertyAnnotation.includeInSerialization()) {
        continue;
      }
      String propertyName=field.getName();
      if (field.getType().equals(ColumnConfig.class)) {
        node.appendChild(createNode((ColumnConfig)field.get(change)));
      }
 else       if (Collection.class.isAssignableFrom(field.getType())) {
        for (        Object object : (Collection)field.get(change)) {
          if (object instanceof ColumnConfig) {
            node.appendChild(createNode((ColumnConfig)object));
          }
        }
      }
 else {
        Object value=field.get(change);
        if (value != null) {
          if (propertyName.equals("procedureBody") || propertyName.equals("sql") || propertyName.equals("selectQuery")) {
            node.setTextContent(value.toString());
          }
 else {
            node.setAttribute(propertyName,value.toString());
          }
        }
      }
    }
  }
 catch (  Exception e) {
    throw new UnexpectedLiquibaseException(e);
  }
  return node;
}
