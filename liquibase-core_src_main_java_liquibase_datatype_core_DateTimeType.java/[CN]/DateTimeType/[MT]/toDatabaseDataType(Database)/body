{
  boolean allowFractional=supportsFractionalDigits(database);
  if (database instanceof DB2Database || database instanceof DerbyDatabase || database instanceof FirebirdDatabase|| database instanceof H2Database|| database instanceof HsqlDatabase) {
    return new DatabaseDataType("TIMESTAMP");
  }
  if (database instanceof OracleDatabase) {
    return new DatabaseDataType("TIMESTAMP",getParameters());
  }
  if (database instanceof MSSQLDatabase) {
    if ((getParameters().length > 0 && "16".equals(getParameters()[0])) || "SMALLDATETIME".equalsIgnoreCase(getRawDefinition())) {
      return new DatabaseDataType("SMALLDATETIME");
    }
 else     if (getRawDefinition().toLowerCase().startsWith("datetime2")) {
      return new DatabaseDataType(getRawDefinition());
    }
  }
  if (database instanceof InformixDatabase) {
    if (getAdditionalInformation() == null || getAdditionalInformation().length() == 0) {
      if (getParameters() != null && getParameters().length > 0) {
        String parameter=String.valueOf(getParameters()[0]);
        if ("4365".equals(parameter)) {
          return new DatabaseDataType("DATETIME YEAR TO FRACTION(3)");
        }
        if ("3594".equals(parameter)) {
          return new DatabaseDataType("DATETIME YEAR TO SECOND");
        }
        if ("3080".equals(parameter)) {
          return new DatabaseDataType("DATETIME YEAR TO MINUTE");
        }
        if ("2052".equals(parameter)) {
          return new DatabaseDataType("DATETIME YEAR TO DAY");
        }
      }
    }
    if (getAdditionalInformation() != null && getAdditionalInformation().length() > 0) {
      return new DatabaseDataType(getRawDefinition());
    }
    return new DatabaseDataType("DATETIME YEAR TO FRACTION",5);
  }
  if (database instanceof PostgresDatabase) {
    String rawDefinition=getRawDefinition().toLowerCase();
    Object[] params=getParameters();
    if (rawDefinition.contains("tz") || rawDefinition.contains("with time zone")) {
      if (params.length == 0 || !allowFractional) {
        return new DatabaseDataType("TIMESTAMP WITH TIME ZONE");
      }
 else {
        return new DatabaseDataType("TIMESTAMP(" + params[0] + ") WITH TIME ZONE");
      }
    }
 else {
      if (params.length == 0 || !allowFractional) {
        return new DatabaseDataType("TIMESTAMP WITHOUT TIME ZONE");
      }
 else {
        return new DatabaseDataType("TIMESTAMP(" + params[0] + ") WITHOUT TIME ZONE");
      }
    }
  }
  if (database instanceof SQLiteDatabase) {
    return new DatabaseDataType("TEXT");
  }
  if (database instanceof MySQLDatabase) {
    if (getParameters().length == 0 || !allowFractional) {
      return new DatabaseDataType(getName());
    }
    Object[] params=getParameters();
    Integer precision=Integer.valueOf(params[0].toString());
    if (precision > 6) {
      LogFactory.getInstance().getLog().warning("MySQL does not support a timestamp precision" + " of '" + precision + "' - resetting to"+ " the maximum of '6'");
      params=new Object[]{6};
    }
    return new DatabaseDataType(getName(),params);
  }
  return new DatabaseDataType(getName());
}
