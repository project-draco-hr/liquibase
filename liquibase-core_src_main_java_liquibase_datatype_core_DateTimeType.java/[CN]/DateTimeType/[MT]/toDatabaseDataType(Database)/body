{
  String originalDefinition=StringUtils.trimToEmpty(getRawDefinition());
  boolean allowFractional=supportsFractionalDigits(database);
  if (database instanceof DerbyDatabase || database instanceof FirebirdDatabase || database instanceof H2Database|| database instanceof HsqlDatabase) {
    return new DatabaseDataType("TIMESTAMP");
  }
  if (database instanceof DB2Database || database instanceof OracleDatabase) {
    return new DatabaseDataType("TIMESTAMP",getParameters());
  }
  if (database instanceof MSSQLDatabase) {
    Object[] parameters=getParameters();
    if (originalDefinition.toLowerCase().startsWith("smalldatetime") || originalDefinition.toLowerCase().startsWith("[smalldatetime")) {
      return new DatabaseDataType(database.escapeDataTypeName("smalldatetime"));
    }
 else     if (originalDefinition.equalsIgnoreCase("datetime2") || originalDefinition.equals("[datetime2]") || originalDefinition.matches("(?i)datetime2\\s*\\(.+")|| originalDefinition.matches("\\[datetime2\\]\\s*\\(.+")) {
      try {
        if (database.getDatabaseMajorVersion() <= 9) {
          return new DatabaseDataType(database.escapeDataTypeName("datetime"));
        }
      }
 catch (      DatabaseException ignore) {
      }
      if (parameters.length == 0) {
        parameters=new Object[]{7};
      }
 else       if (parameters.length > 1) {
        parameters=new Object[]{parameters[1]};
      }
      return new DatabaseDataType(database.escapeDataTypeName("datetime2"),parameters);
    }
    return new DatabaseDataType(database.escapeDataTypeName("datetime"));
  }
  if (database instanceof InformixDatabase) {
    if (getAdditionalInformation() == null || getAdditionalInformation().length() == 0) {
      if (getParameters() != null && getParameters().length > 0) {
        String parameter=String.valueOf(getParameters()[0]);
        if ("4365".equals(parameter)) {
          return new DatabaseDataType("DATETIME YEAR TO FRACTION(3)");
        }
        if ("3594".equals(parameter)) {
          return new DatabaseDataType("DATETIME YEAR TO SECOND");
        }
        if ("3080".equals(parameter)) {
          return new DatabaseDataType("DATETIME YEAR TO MINUTE");
        }
        if ("2052".equals(parameter)) {
          return new DatabaseDataType("DATETIME YEAR TO DAY");
        }
      }
    }
    if (getAdditionalInformation() != null && getAdditionalInformation().length() > 0) {
      return new DatabaseDataType(originalDefinition);
    }
    return new DatabaseDataType("DATETIME YEAR TO FRACTION",5);
  }
  if (database instanceof PostgresDatabase) {
    String rawDefinition=originalDefinition.toLowerCase();
    Object[] params=getParameters();
    if (rawDefinition.contains("tz") || rawDefinition.contains("with time zone")) {
      if (params.length == 0 || !allowFractional) {
        return new DatabaseDataType("TIMESTAMP WITH TIME ZONE");
      }
 else {
        Object param=params[0];
        if (params.length == 2) {
          param=params[1];
        }
        return new DatabaseDataType("TIMESTAMP(" + param + ") WITH TIME ZONE");
      }
    }
 else {
      if (params.length == 0 || !allowFractional) {
        return new DatabaseDataType("TIMESTAMP WITHOUT TIME ZONE");
      }
 else {
        Object param=params[0];
        if (params.length == 2) {
          param=params[1];
        }
        return new DatabaseDataType("TIMESTAMP(" + param + ") WITHOUT TIME ZONE");
      }
    }
  }
  if (database instanceof SQLiteDatabase) {
    return new DatabaseDataType("TEXT");
  }
  if (database instanceof MySQLDatabase) {
    if (getParameters().length == 0 || !allowFractional) {
      return new DatabaseDataType(getName());
    }
    Object[] params=getParameters();
    Integer precision=Integer.valueOf(params[0].toString());
    if (precision > 6) {
      LogFactory.getInstance().getLog().warning("MySQL does not support a timestamp precision" + " of '" + precision + "' - resetting to"+ " the maximum of '6'");
      params=new Object[]{6};
    }
    return new DatabaseDataType(getName(),params);
  }
  return new DatabaseDataType(getName());
}
