{
  ChangeLogWriter changeLogWriter=new ChangeLogWriter(resourceAccessor,rootOutputDir);
  HTMLWriter authorWriter=new AuthorWriter(rootOutputDir,database);
  HTMLWriter tableWriter=new TableWriter(rootOutputDir,database);
  HTMLWriter columnWriter=new ColumnWriter(rootOutputDir,database);
  HTMLWriter pendingChangesWriter=new PendingChangesWriter(rootOutputDir,database);
  HTMLWriter recentChangesWriter=new RecentChangesWriter(rootOutputDir,database);
  HTMLWriter pendingSQLWriter=new PendingSQLWriter(rootOutputDir,database,rootChangeLog);
  copyFile("liquibase/dbdoc/stylesheet.css",rootOutputDir);
  copyFile("liquibase/dbdoc/index.html",rootOutputDir);
  copyFile("liquibase/dbdoc/globalnav.html",rootOutputDir);
  copyFile("liquibase/dbdoc/overview-summary.html",rootOutputDir);
  DatabaseSnapshot snapshot=SnapshotGeneratorFactory.getInstance().createSnapshot(database.getDefaultSchema(),database,new SnapshotControl(database));
  new ChangeLogListWriter(rootOutputDir).writeHTML(changeLogs);
  SortedSet<Table> tables=new TreeSet<Table>(snapshot.get(Table.class));
  Iterator<Table> tableIterator=tables.iterator();
  while (tableIterator.hasNext()) {
    if (database.isLiquibaseObject(tableIterator.next())) {
      tableIterator.remove();
    }
  }
  new TableListWriter(rootOutputDir).writeHTML(tables);
  new AuthorListWriter(rootOutputDir).writeHTML(new TreeSet<Object>(changesByAuthor.keySet()));
  for (  String author : changesByAuthor.keySet()) {
    authorWriter.writeHTML(author,changesByAuthor.get(author),changesToRunByAuthor.get(author),rootChangeLogName);
  }
  for (  Table table : tables) {
    if (database.isLiquibaseObject(table)) {
      continue;
    }
    tableWriter.writeHTML(table,changesByObject.get(table),changesToRunByObject.get(table),rootChangeLogName);
  }
  for (  Column column : snapshot.get(Column.class)) {
    if (database.isLiquibaseObject(column.getRelation())) {
      continue;
    }
    columnWriter.writeHTML(column,changesByObject.get(column),changesToRunByObject.get(column),rootChangeLogName);
  }
  for (  ChangeLogInfo changeLog : changeLogs) {
    changeLogWriter.writeChangeLog(changeLog.logicalPath,changeLog.physicalPath);
  }
  pendingChangesWriter.writeHTML("index",null,changesToRun,rootChangeLogName);
  pendingSQLWriter.writeHTML("sql",null,changesToRun,rootChangeLogName);
  if (recentChanges.size() > MAX_RECENT_CHANGE) {
    recentChanges=recentChanges.subList(0,MAX_RECENT_CHANGE);
  }
  recentChangesWriter.writeHTML("index",recentChanges,null,rootChangeLogName);
}
