{
  Database database=createMock(Database.class);
  WriteExecutor writeExecutor=createMock(WriteExecutor.class);
  ReadExecutor readExecutor=createMock(ReadExecutor.class);
  database.checkDatabaseChangeLogLockTable();
  expectLastCall().anyTimes();
  expect(readExecutor.queryForObject(isA(SelectFromDatabaseChangeLogLockStatement.class),eq(Boolean.class),isA(ArrayList.class))).andReturn(true);
  expect(readExecutor.queryForObject(isA(SelectFromDatabaseChangeLogLockStatement.class),eq(Boolean.class),isA(ArrayList.class))).andReturn(true);
  expect(readExecutor.queryForObject(isA(SelectFromDatabaseChangeLogLockStatement.class),eq(Boolean.class),isA(ArrayList.class))).andReturn(true);
  expect(readExecutor.queryForObject(isA(SelectFromDatabaseChangeLogLockStatement.class),eq(Boolean.class),isA(ArrayList.class))).andReturn(false);
  writeExecutor.comment("Lock Database");
  expectLastCall();
  database.rollback();
  expectLastCall().anyTimes();
  expect(writeExecutor.update(isA(LockDatabaseChangeLogStatement.class),isA(ArrayList.class))).andReturn(1);
  database.commit();
  expectLastCall();
  replay(database);
  replay(writeExecutor);
  replay(readExecutor);
  ExecutorService.getInstance().setWriteExecutor(database,writeExecutor);
  LockService service=LockService.getInstance(database);
  service.setChangeLogLockRecheckTime(1);
  service.waitForLock();
  verify(database);
  verify(readExecutor);
  verify(writeExecutor);
}
