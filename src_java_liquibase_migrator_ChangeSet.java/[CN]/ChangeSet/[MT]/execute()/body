{
  Migrator migrator=getDatabaseChangeLog().getMigrator();
  Connection connection=migrator.getDatabase().getConnection();
  try {
    Writer outputSQLWriter=getDatabaseChangeLog().getMigrator().getOutputSQLWriter();
    if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
      log.finest("Reading ChangeSet: " + toString());
      for (      Change change : getChanges()) {
        change.executeStatements(migrator.getDatabase());
        log.finest(change.getConfirmationMessage());
      }
      connection.commit();
      log.finest("ChangeSet " + toString() + " has been successfully ran.");
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_SQL_MODE)) {
      outputSQLWriter.write("-- Changeset " + toString() + StreamUtil.getLineSeparator());
      writeComments(outputSQLWriter);
      for (      Change change : getChanges()) {
        change.saveStatements(getDatabaseChangeLog().getMigrator().getDatabase(),outputSQLWriter);
      }
    }
 else     if (migrator.getMode().equals(Migrator.Mode.EXECUTE_ROLLBACK_MODE)) {
      log.finest("Rolling Back ChangeSet: " + toString());
      if (rollBackStatements != null && rollBackStatements.length > 0) {
        Statement statement=connection.createStatement();
        for (        String rollback : rollBackStatements) {
          try {
            statement.execute(rollback);
          }
 catch (          SQLException e) {
            throw new RollbackFailedException("Error executing custom SQL [" + rollback + "]");
          }
        }
        statement.close();
      }
 else {
        List<Change> changes=getChanges();
        for (int i=changes.size() - 1; i >= 0; i--) {
          Change change=changes.get(i);
          change.executeRollbackStatements(migrator.getDatabase());
          log.finest(change.getConfirmationMessage());
        }
      }
      connection.commit();
      log.finest("ChangeSet " + toString() + " has been successfully rolled back.");
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_ROLLBACK_SQL_MODE) || migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
      outputSQLWriter.write("-- Changeset " + toString() + StreamUtil.getLineSeparator());
      writeComments(outputSQLWriter);
      if (rollBackStatements != null && rollBackStatements.length > 0) {
        for (        String statement : rollBackStatements) {
          outputSQLWriter.append(statement).append(";").append(StreamUtil.getLineSeparator()).append(StreamUtil.getLineSeparator());
        }
      }
 else {
        for (int i=changes.size() - 1; i >= 0; i--) {
          Change change=changes.get(i);
          change.saveRollbackStatement(getDatabaseChangeLog().getMigrator().getDatabase(),outputSQLWriter);
        }
      }
    }
 else     if (migrator.getMode().equals(Migrator.Mode.OUTPUT_CHANGELOG_ONLY_SQL_MODE)) {
    }
 else {
      throw new MigrationFailedException("Unexpected mode: " + migrator.getMode());
    }
    connection.commit();
  }
 catch (  Exception e) {
    try {
      connection.rollback();
    }
 catch (    SQLException e1) {
      throw new MigrationFailedException("Unable to process change set: " + toString() + ": "+ e.getMessage(),e);
    }
    throw new MigrationFailedException("Unable to process change set: " + toString() + ": "+ e.getMessage(),e);
  }
}
