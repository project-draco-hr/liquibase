{
  CSVReader reader=null;
  try {
    reader=getCSVReader();
    if (reader == null) {
      throw new UnexpectedLiquibaseException("Unable to read file " + this.getFile());
    }
    String[] headers=reader.readNext();
    if (headers == null) {
      throw new UnexpectedLiquibaseException("Data file " + getFile() + " was empty");
    }
    List<SqlStatement> statements=new ArrayList<SqlStatement>();
    boolean anyPreparedStatements=false;
    String[] line;
    int lineNumber=1;
    boolean isCommentingEnabled=StringUtils.isNotEmpty(commentLineStartsWith);
    while ((line=reader.readNext()) != null) {
      lineNumber++;
      if (line.length == 0 || (line.length == 1 && StringUtils.trimToNull(line[0]) == null) || (isCommentingEnabled && isLineCommented(line))) {
        continue;
      }
      if (line.length != headers.length) {
        throw new UnexpectedLiquibaseException("CSV file " + getFile() + " Line "+ lineNumber+ " has "+ line.length+ " values defined, Header has "+ headers.length+ ". Numbers MUST be equal (check for unquoted string with embedded commas)");
      }
      boolean needsPreparedStatement=false;
      List<ColumnConfig> columns=new ArrayList<ColumnConfig>();
      for (int i=0; i < headers.length; i++) {
        Object value=line[i].trim();
        String columnName=headers[i].trim();
        ColumnConfig valueConfig=new ColumnConfig();
        ColumnConfig columnConfig=getColumnConfig(i,headers[i].trim());
        if (columnConfig != null) {
          if ("skip".equalsIgnoreCase(columnConfig.getType())) {
            continue;
          }
          if (columnConfig.getName() != null) {
            columnName=columnConfig.getName();
          }
          valueConfig.setName(columnName);
          if (columnConfig.getType() != null) {
            if (columnConfig.getType().equalsIgnoreCase("BOOLEAN")) {
              if (value.toString().equalsIgnoreCase("NULL")) {
                valueConfig.setValue(null);
              }
 else {
                valueConfig.setValueBoolean(BooleanParser.parseBoolean(value.toString().toLowerCase()));
              }
            }
 else             if (columnConfig.getType().equalsIgnoreCase("NUMERIC")) {
              if (value.toString().equalsIgnoreCase("NULL")) {
                valueConfig.setValue(null);
              }
 else {
                valueConfig.setValueNumeric(value.toString());
              }
            }
 else             if (columnConfig.getType().toLowerCase().contains("date") || columnConfig.getType().toLowerCase().contains("time")) {
              if (value.toString().equalsIgnoreCase("NULL")) {
                valueConfig.setValue(null);
              }
 else {
                valueConfig.setValueDate(value.toString());
              }
            }
 else             if (columnConfig.getType().equalsIgnoreCase("STRING")) {
              if (value.toString().equalsIgnoreCase("NULL")) {
                valueConfig.setValue(null);
              }
 else {
                valueConfig.setValue(value.toString());
              }
            }
 else             if (columnConfig.getType().equalsIgnoreCase("COMPUTED")) {
              if (value.toString().equalsIgnoreCase("NULL")) {
                valueConfig.setValue(null);
              }
 else {
                liquibase.statement.DatabaseFunction function=new liquibase.statement.DatabaseFunction(value.toString());
                valueConfig.setValueComputed(function);
              }
            }
 else             if (columnConfig.getType().equalsIgnoreCase("SEQUENCE")) {
              String sequenceName;
              if (value.toString().equalsIgnoreCase("NULL")) {
                sequenceName=columnConfig.getDefaultValue();
                if (sequenceName == null) {
                  throw new UnexpectedLiquibaseException("Must set a sequence name in the loadData column defaultValue attribute");
                }
              }
 else {
                sequenceName=value.toString();
              }
              liquibase.statement.SequenceNextValueFunction function=new liquibase.statement.SequenceNextValueFunction(sequenceName);
              valueConfig.setValueComputed(function);
            }
 else             if (columnConfig.getType().equalsIgnoreCase("BLOB")) {
              if (value.toString().equalsIgnoreCase("NULL")) {
                valueConfig.setValue(null);
              }
 else {
                valueConfig.setValueBlobFile(value.toString());
                needsPreparedStatement=true;
              }
            }
 else             if (columnConfig.getType().equalsIgnoreCase("CLOB")) {
              if (value.toString().equalsIgnoreCase("NULL")) {
                valueConfig.setValue(null);
              }
 else {
                valueConfig.setValueClobFile(value.toString());
                needsPreparedStatement=true;
              }
            }
 else {
              throw new UnexpectedLiquibaseException("loadData type of " + columnConfig.getType() + " is not supported.  Please use BOOLEAN, NUMERIC, DATE, STRING, COMPUTED, SEQUENCE or SKIP");
            }
          }
        }
 else {
          if (columnName.contains("(") || columnName.contains(")") && database instanceof AbstractJdbcDatabase) {
            columnName=((AbstractJdbcDatabase)database).quoteObject(columnName,Column.class);
          }
          valueConfig.setName(columnName);
          if (value.toString().equalsIgnoreCase("NULL")) {
            valueConfig.setValue((String)value);
          }
        }
        columns.add(valueConfig);
      }
      if (needsPreparedStatement) {
        anyPreparedStatements=true;
        statements.add(new InsertExecutablePreparedStatement(database,getCatalogName(),getSchemaName(),getTableName(),columns,getChangeSet(),getResourceAccessor()));
      }
 else {
        InsertStatement insertStatement=this.createStatement(getCatalogName(),getSchemaName(),getTableName());
        for (        ColumnConfig column : columns) {
          String columnName=column.getName();
          Object value=column.getValueObject();
          if (value == null) {
            value="NULL";
          }
          insertStatement.addColumnValue(columnName,value);
        }
        statements.add(insertStatement);
      }
    }
    if (anyPreparedStatements) {
      return statements.toArray(new SqlStatement[statements.size()]);
    }
 else {
      InsertSetStatement statementSet=this.createStatementSet(getCatalogName(),getSchemaName(),getTableName());
      for (      SqlStatement stmt : statements) {
        statementSet.addInsertStatement((InsertStatement)stmt);
      }
      if (database instanceof MSSQLDatabase || database instanceof MySQLDatabase || database instanceof PostgresDatabase) {
        List<InsertStatement> innerStatements=statementSet.getStatements();
        if (innerStatements != null && innerStatements.size() > 0 && innerStatements.get(0) instanceof InsertOrUpdateStatement) {
          return statementSet.getStatementsArray();
        }
        return new SqlStatement[]{statementSet};
      }
 else {
        return statementSet.getStatementsArray();
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  UnexpectedLiquibaseException ule) {
    if (getChangeSet() != null && getChangeSet().getFailOnError() != null && !getChangeSet().getFailOnError()) {
      Logger log=LogFactory.getLogger();
      log.info("Change set " + getChangeSet().toString(false) + " failed, but failOnError was false.  Error: "+ ule.getMessage());
      return new SqlStatement[0];
    }
 else {
      throw ule;
    }
  }
 finally {
    if (null != reader) {
      try {
        reader.close();
      }
 catch (      IOException e) {
        ;
      }
    }
  }
}
