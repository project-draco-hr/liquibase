{
  WriteExecutor writeExecutor=ExecutorService.getInstance().getWriteExecutor(this);
  if (!writeExecutor.executesStatements()) {
    if (((LoggingExecutor)writeExecutor).alreadyCreatedChangeTable()) {
      return;
    }
 else {
      ((LoggingExecutor)writeExecutor).setAlreadyCreatedChangeTable(true);
    }
  }
  DatabaseConnection connection=getConnection();
  ResultSet checkColumnsRS=null;
  List<SqlStatement> statementsToExecute=new ArrayList<SqlStatement>();
  boolean changeLogCreateAttempted=false;
  try {
    if (doesChangeLogTableExist()) {
      checkColumnsRS=connection.getMetaData().getColumns(convertRequestedSchemaToCatalog(getLiquibaseSchemaName()),convertRequestedSchemaToSchema(getLiquibaseSchemaName()),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      boolean hasOrderExecuted=false;
      boolean checksumNotRightSize=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString("COLUMN_NAME");
        if ("DESCRIPTION".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if ("COMMENTS".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if ("TAG".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if ("LIQUIBASE".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
 else         if ("ORDEREXECUTED".equalsIgnoreCase(columnName)) {
          hasOrderExecuted=true;
        }
 else         if ("MD5SUM".equalsIgnoreCase(columnName) && checkColumnsRS.getInt("COLUMN_SIZE") != 35) {
          checksumNotRightSize=true;
        }
      }
      if (!hasDescription) {
        writeExecutor.comment("Adding missing databasechangelog.description column");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"DESCRIPTION","VARCHAR(255)",null));
      }
      if (!hasTag) {
        writeExecutor.comment("Adding missing databasechangelog.tag column");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"TAG","VARCHAR(255)",null));
      }
      if (!hasComments) {
        writeExecutor.comment("Adding missing databasechangelog.comments column");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"COMMENTS","VARCHAR(255)",null));
      }
      if (!hasLiquibase) {
        writeExecutor.comment("Adding missing databasechangelog.liquibase column");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"LIQUIBASE","VARCHAR(255)",null));
      }
      if (!hasOrderExecuted) {
        writeExecutor.comment("Adding missing databasechangelog.orderexecuted column");
        statementsToExecute.add(new AddColumnStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),"ORDEREXECUTED","BIGINT",null,new NotNullConstraint(),new UniqueConstraint()));
      }
      if (!checksumNotRightSize) {
        writeExecutor.comment("Modifying size of databasechangelog.md5sum column");
        ColumnConfig checksumColumn=new ColumnConfig();
        checksumColumn.setName("MD5SUM");
        checksumColumn.setType("VARCHAR(35)");
        statementsToExecute.add(new ModifyColumnsStatement(getLiquibaseSchemaName(),getDatabaseChangeLogTableName(),checksumColumn));
      }
      ResultSet md5sumRS=connection.createStatement().executeQuery("SELECT MD5SUM FROM " + escapeTableName(getLiquibaseSchemaName(),getDatabaseChangeLogTableName()) + " WHERE MD5SUM IS NOT NULL");
      if (md5sumRS.next()) {
        String md5sum=md5sumRS.getString(1);
        if (!md5sum.startsWith(CheckSum.getCurrentVersion() + ":")) {
          writeExecutor.comment("DatabaseChangeLog checksums are an incompatible version.  Setting them to null so they will be updated on next database update");
          statementsToExecute.add(new RawSqlStatement("UPDATE " + escapeTableName(getLiquibaseSchemaName(),getDatabaseChangeLogTableName()) + " SET MD5SUM=null"));
        }
      }
    }
 else     if (!changeLogCreateAttempted) {
      writeExecutor.comment("Create Database Change Log Table");
      SqlStatement createTableStatement=new CreateDatabaseChangeLogTableStatement();
      if (!canCreateChangeLogTable()) {
        throw new JDBCException("Cannot create " + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()) + " table for your database.\n\n"+ "Please construct it manually using the following SQL as a base and re-run LiquiBase:\n\n"+ createTableStatement);
      }
      statementsToExecute.add(createTableStatement);
      log.info("Creating database history table with name: " + escapeTableName(getDefaultSchemaName(),getDatabaseChangeLogTableName()));
    }
    for (    SqlStatement sql : statementsToExecute) {
      writeExecutor.execute(sql,new ArrayList<SqlVisitor>());
      this.commit();
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}
