{
  getLog().info(MavenUtils.LOG_SEPARATOR);
  String shouldRunProperty=System.getProperty(Liquibase.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty)) {
    getLog().warn("LiquiBase did not run because '" + Liquibase.SHOULD_RUN_SYSTEM_PROPERTY + "' system property was set to false");
    return;
  }
  ClassLoader artifactClassLoader=getMavenArtifactClassLoader();
  configureFieldsAndValues(getFileOpener(artifactClassLoader));
  try {
    LogFactory.setLoggingLevel(logging);
  }
 catch (  IllegalArgumentException e) {
    throw new MojoExecutionException("Failed to set logging level: " + e.getMessage(),e);
  }
  displayMojoSettings();
  checkRequiredParametersAreSpecified();
  Database database=null;
  try {
    String dbPassword=emptyPassword || password == null ? "" : password;
    database=CommandLineUtils.createDatabaseObject(artifactClassLoader,url,username,dbPassword,driver,defaultSchemaName,null);
    liquibase=createLiquibase(getFileOpener(artifactClassLoader),database);
    getLog().debug("expressionVars = " + String.valueOf(expressionVars));
    if (expressionVars != null) {
      for (      Map.Entry<Object,Object> var : expressionVars.entrySet()) {
        this.liquibase.setChangeLogParameter(var.getKey().toString(),var.getValue());
      }
    }
    getLog().debug("expressionVariables = " + String.valueOf(expressionVariables));
    if (expressionVariables != null) {
      for (      Map.Entry var : (Set<Map.Entry>)expressionVariables.entrySet()) {
        if (var.getValue() != null) {
          this.liquibase.setChangeLogParameter(var.getKey().toString(),var.getValue());
        }
      }
    }
    if (clearCheckSums) {
      getLog().info("Clearing the Liquibase Checksums on the database");
      liquibase.clearCheckSums();
    }
    getLog().info("Executing on Database: " + url);
    if (isPromptOnNonLocalDatabase()) {
      if (!liquibase.isSafeToRunMigration()) {
        if (UIFactory.getInstance().getFacade().promptForNonLocalDatabase(liquibase.getDatabase())) {
          throw new LiquibaseException("User decided not to run against non-local database");
        }
      }
    }
    performLiquibaseTask(liquibase);
  }
 catch (  LiquibaseException e) {
    cleanup(database);
    throw new MojoExecutionException("Error setting up or running Liquibase: " + e.getMessage(),e);
  }
  cleanup(database);
  getLog().info(MavenUtils.LOG_SEPARATOR);
  getLog().info("");
}
