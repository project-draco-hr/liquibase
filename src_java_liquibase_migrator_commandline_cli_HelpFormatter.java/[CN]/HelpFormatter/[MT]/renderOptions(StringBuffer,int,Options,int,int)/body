{
  final String lpad=createPadding(leftPad);
  final String dpad=createPadding(descPad);
  int max=0;
  StringBuffer optBuf;
  List prefixList=new ArrayList();
  Option option;
  List optList=options.helpOptions();
  Collections.sort(optList,new StringBufferComparator());
  for (Iterator i=optList.iterator(); i.hasNext(); ) {
    option=(Option)i.next();
    optBuf=new StringBuffer(8);
    if (option.getOpt().equals(" ")) {
      optBuf.append(lpad).append("   " + defaultLongOptPrefix).append(option.getLongOpt());
    }
 else {
      optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());
      if (option.hasLongOpt()) {
        optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
      }
    }
    if (option.hasArg()) {
      if (option.hasArgName()) {
        optBuf.append(" <").append(option.getArgName()).append('>');
      }
 else {
        optBuf.append(' ');
      }
    }
    prefixList.add(optBuf);
    max=optBuf.length() > max ? optBuf.length() : max;
  }
  int x=0;
  for (Iterator i=optList.iterator(); i.hasNext(); ) {
    option=(Option)i.next();
    optBuf=new StringBuffer(prefixList.get(x++).toString());
    if (optBuf.length() < max) {
      optBuf.append(createPadding(max - optBuf.length()));
    }
    optBuf.append(dpad);
    int nextLineTabStop=max + descPad;
    renderWrappedText(sb,width,nextLineTabStop,optBuf.append(option.getDescription()).toString());
    if (i.hasNext()) {
      sb.append(defaultNewLine);
    }
  }
  return sb;
}
