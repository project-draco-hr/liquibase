{
  childDropChanges=new ArrayList<DropForeignKeyConstraintChange>();
  Executor jdbc=database.getExecutor();
  FindForeignKeyConstraintsStatement sql=new FindForeignKeyConstraintsStatement(getBaseTableSchemaName(),getBaseTableName());
  try {
    List<Map> results=jdbc.queryForList(sql,new ArrayList<SqlVisitor>());
    if (results != null && results.size() > 0) {
      for (      Map result : results) {
        String baseTableName=(String)result.get(FindForeignKeyConstraintsStatement.RESULT_COLUMN_BASE_TABLE_NAME);
        String constraintName=(String)result.get(FindForeignKeyConstraintsStatement.RESULT_COLUMN_CONSTRAINT_NAME);
        if (getBaseTableName().equals(baseTableName)) {
          DropForeignKeyConstraintChange dropForeignKeyConstraintChange=new DropForeignKeyConstraintChange();
          dropForeignKeyConstraintChange.setBaseTableSchemaName(getBaseTableSchemaName());
          dropForeignKeyConstraintChange.setBaseTableName(baseTableName);
          dropForeignKeyConstraintChange.setConstraintName(constraintName);
          childDropChanges.add(dropForeignKeyConstraintChange);
        }
 else {
          throw new IllegalStateException("Expected to return only foreign keys for base table name: " + getBaseTableName() + " and got results for table: "+ baseTableName);
        }
      }
    }
  }
 catch (  JDBCException e) {
    throw new UnexpectedLiquibaseException("Failed to find foreign keys for table: " + getBaseTableName(),e);
  }
}
