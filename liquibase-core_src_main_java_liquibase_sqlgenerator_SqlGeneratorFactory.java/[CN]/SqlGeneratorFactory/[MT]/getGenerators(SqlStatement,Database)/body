{
  String databaseName=null;
  if (database == null) {
    databaseName="NULL";
  }
 else {
    databaseName=database.getShortName();
  }
  int version;
  try {
    version=database.getDatabaseMajorVersion();
  }
 catch (  Throwable e) {
    version=0;
  }
  String key=statement.getClass().getName() + ":" + databaseName+ ":"+ version;
  if (generatorsByKey.containsKey(key)) {
    return generatorsByKey.get(key);
  }
  SortedSet<SqlGenerator> validGenerators=new TreeSet<SqlGenerator>(new SqlGeneratorComparator());
  for (  SqlGenerator generator : getGenerators()) {
    Class clazz=generator.getClass();
    Type classType=null;
    while (clazz != null) {
      if (classType instanceof ParameterizedType) {
        checkType(classType,statement,generator,database,validGenerators);
      }
      for (      Type type : getGenericInterfaces(clazz)) {
        if (type instanceof ParameterizedType) {
          checkType(type,statement,generator,database,validGenerators);
        }
 else         if (isTypeEqual(type,SqlGenerator.class)) {
          if (generator.supports(statement,database)) {
            validGenerators.add(generator);
          }
        }
      }
      classType=getGenericSuperclass(clazz);
      clazz=clazz.getSuperclass();
    }
  }
  generatorsByKey.put(key,validGenerators);
  return validGenerators;
}
