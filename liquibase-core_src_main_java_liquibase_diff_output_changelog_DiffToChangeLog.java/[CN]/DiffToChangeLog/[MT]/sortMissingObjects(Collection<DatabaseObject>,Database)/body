{
  if (diffOutputControl.getSchemaComparisons() != null && missingObjects.size() > 0 && supportsSortingObjects(database) && database.getConnection() != null && !(database.getConnection() instanceof OfflineConnection)) {
    List<String> schemas=new ArrayList<String>();
    for (    CompareControl.SchemaComparison comparison : this.diffOutputControl.getSchemaComparisons()) {
      String schemaName=comparison.getReferenceSchema().getSchemaName();
      if (schemaName == null) {
        schemaName=database.getDefaultSchemaName();
      }
      schemas.add(schemaName);
    }
    if (schemas.size() == 0) {
      schemas.add(database.getDefaultSchemaName());
    }
    try {
      final List<String> dependencyOrder=new ArrayList<String>();
      DependencyUtil.NodeValueListener<String> nameListener=new DependencyUtil.NodeValueListener<String>(){
        @Override public void evaluating(        String nodeValue){
          dependencyOrder.add(nodeValue);
        }
      }
;
      DependencyUtil.DependencyGraph graph=new DependencyUtil.DependencyGraph(nameListener);
      addDependencies(graph,schemas,missingObjects,database);
      graph.computeDependencies();
      if (dependencyOrder.size() > 0) {
        List<DatabaseObject> toSort=new ArrayList<DatabaseObject>();
        List<DatabaseObject> toNotSort=new ArrayList<DatabaseObject>();
        for (        DatabaseObject obj : missingObjects) {
          if (!(obj instanceof Column)) {
            String schemaName=null;
            if (obj.getSchema() != null) {
              schemaName=obj.getSchema().getName();
            }
            String name=schemaName + "." + obj.getName();
            if (dependencyOrder.contains(name)) {
              toSort.add(obj);
            }
 else {
              toNotSort.add(obj);
            }
          }
 else {
            toNotSort.add(obj);
          }
        }
        Collections.sort(toSort,new Comparator<DatabaseObject>(){
          @Override public int compare(          DatabaseObject o1,          DatabaseObject o2){
            String o1Schema=null;
            if (o1.getSchema() != null) {
              o1Schema=o1.getSchema().getName();
            }
            String o2Schema=null;
            if (o2.getSchema() != null) {
              o2Schema=o2.getSchema().getName();
            }
            Integer o1Order=dependencyOrder.indexOf(o1Schema + "." + o1.getName());
            int o2Order=dependencyOrder.indexOf(o2Schema + "." + o2.getName());
            return o1Order.compareTo(o2Order);
          }
        }
);
        toSort.addAll(toNotSort);
        return toSort;
      }
    }
 catch (    DatabaseException e) {
      LogFactory.getInstance().getLog().debug("Cannot get object dependencies: " + e.getMessage());
    }
  }
  return new ArrayList<DatabaseObject>(missingObjects);
}
