{
  if (diffOutputControl.getSchemaComparisons() != null && missingObjects.size() > 0 && supportsSortingObjects(database) && database.getConnection() != null && !(database.getConnection() instanceof OfflineConnection)) {
    List<String> schemas=new ArrayList<String>();
    for (    CompareControl.SchemaComparison comparison : this.diffOutputControl.getSchemaComparisons()) {
      String schemaName=comparison.getReferenceSchema().getSchemaName();
      if (schemaName == null) {
        schemaName=database.getDefaultSchemaName();
      }
      schemas.add(schemaName);
    }
    if (schemas.size() == 0) {
      schemas.add(database.getDefaultSchemaName());
    }
    try {
      final List<String> dependencyOrder=new ArrayList<String>();
      DependencyUtil.NodeValueListener<String> nameListener=new DependencyUtil.NodeValueListener<String>(){
        @Override public void evaluating(        String nodeValue){
          dependencyOrder.add(nodeValue);
        }
      }
;
      DependencyUtil.DependencyGraph graph=new DependencyUtil.DependencyGraph(nameListener);
      addDependencies(graph,schemas,missingObjects,database);
      graph.computeDependencies();
      if (dependencyOrder.size() > 0) {
        List<DatabaseObject> toSortMissingObjects=new ArrayList<DatabaseObject>(missingObjects);
        final List<String> originalOrder=new ArrayList<String>();
        for (        DatabaseObject object : toSortMissingObjects) {
          originalOrder.add(createSortKey(object));
        }
        Collections.sort(toSortMissingObjects,new Comparator<DatabaseObject>(){
          @Override public int compare(          DatabaseObject o1,          DatabaseObject o2){
            if (o1.getSchema() != null && o2.getSchema() != null) {
              String schemaAndName1=o1.getSchema().getName() + "." + o1.getName();
              String schemaAndName2=o2.getSchema().getName() + "." + o2.getName();
              Integer index1=dependencyOrder.indexOf(schemaAndName1);
              Integer index2=dependencyOrder.indexOf(schemaAndName2);
              if (index1 >= 0 && index2 >= 0) {
                return index1.compareTo(index2);
              }
            }
            String o1Key=createSortKey(o1);
            String o2Key=createSortKey(o2);
            return ((Integer)originalOrder.indexOf(o1Key)).compareTo(originalOrder.indexOf(o2Key));
          }
        }
);
        return toSortMissingObjects;
      }
    }
 catch (    DatabaseException e) {
      LogFactory.getInstance().getLog().debug("Cannot get view dependencies: " + e.getMessage());
    }
  }
  return new ArrayList<DatabaseObject>(missingObjects);
}
