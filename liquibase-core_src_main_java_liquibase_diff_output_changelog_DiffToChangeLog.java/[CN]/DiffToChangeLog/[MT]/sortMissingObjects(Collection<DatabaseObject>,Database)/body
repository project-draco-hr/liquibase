{
  if (diffOutputControl.getSchemaComparisons() != null && missingObjects.size() > 0 && supportsSortingObjects(database) && database.getConnection() != null && !(database.getConnection() instanceof OfflineConnection)) {
    List<String> schemas=new ArrayList<String>();
    for (    CompareControl.SchemaComparison comparison : this.diffOutputControl.getSchemaComparisons()) {
      String schemaName=comparison.getReferenceSchema().getSchemaName();
      if (schemaName == null) {
        schemaName=database.getDefaultSchemaName();
      }
      schemas.add(schemaName);
    }
    if (schemas.size() == 0) {
      schemas.add(database.getDefaultSchemaName());
    }
    try {
      final List<String> dependencyOrder=new ArrayList<String>();
      DependencyUtil.NodeValueListener<String> nameListener=new DependencyUtil.NodeValueListener<String>(){
        @Override public void evaluating(        String nodeValue){
          dependencyOrder.add(nodeValue);
        }
      }
;
      DependencyUtil.DependencyGraph graph=new DependencyUtil.DependencyGraph(nameListener);
      addDependencies(graph,schemas,missingObjects,database);
      graph.computeDependencies();
      boolean sortAllObjects;
      if (database instanceof DB2Database) {
        sortAllObjects=true;
      }
 else       if (database instanceof MSSQLDatabase) {
        sortAllObjects=false;
      }
 else {
        throw new UnexpectedLiquibaseException("Do not know if " + database.getClass().getName() + " can sort all objects or just by type");
      }
      if (sortAllObjects) {
        List<DatabaseObject> toSort=sortObjects(missingObjects,dependencyOrder);
        if (toSort != null)         return toSort;
      }
 else {
        List<DatabaseObject> sortedObjects=new ArrayList<DatabaseObject>();
        List<DatabaseObject> missingObjectsByType=new ArrayList<DatabaseObject>();
        for (        DatabaseObject obj : missingObjects) {
          if (missingObjectsByType.size() == 0) {
            missingObjectsByType.add(obj);
          }
 else           if (missingObjectsByType.get(0).getClass().equals(obj.getClass())) {
            missingObjectsByType.add(obj);
          }
 else {
            sortObjects(missingObjectsByType,dependencyOrder);
            sortedObjects.addAll(missingObjectsByType);
            missingObjectsByType.clear();
            missingObjectsByType.add(obj);
          }
        }
        if (missingObjectsByType.size() > 0) {
          sortObjects(missingObjectsByType,dependencyOrder);
          sortedObjects.addAll(missingObjectsByType);
        }
        missingObjects=sortedObjects;
      }
    }
 catch (    DatabaseException e) {
      LogFactory.getInstance().getLog().debug("Cannot get view dependencies: " + e.getMessage());
    }
  }
  return new ArrayList<DatabaseObject>(missingObjects);
}
