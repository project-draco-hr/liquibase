{
  if (database instanceof DerbyDatabase) {
    throw new UnsupportedChangeException("Add Lookup Table currently not supported in Derby");
  }
 else   if (database instanceof HsqlDatabase) {
    throw new UnsupportedChangeException("Add Lookup Table currently not supported in HSQLDB");
  }
 else   if (database instanceof CacheDatabase) {
    throw new UnsupportedChangeException("Add Lookup Table not currently supported for Cache");
  }
 else   if (database instanceof FirebirdDatabase) {
    throw new UnsupportedChangeException("Add Lookup Table not currently supported for Firebird");
  }
 else   if (database instanceof InformixDatabase) {
    throw new UnsupportedChangeException("Add Lookup Table not currently supported for Informix");
  }
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  String newTableSchemaName=getNewTableSchemaName() == null ? database.getDefaultSchemaName() : getNewTableSchemaName();
  String existingTableSchemaName=getExistingTableSchemaName() == null ? database.getDefaultSchemaName() : getExistingTableSchemaName();
  SqlStatement[] createTablesSQL={new RawSqlStatement("CREATE TABLE " + database.escapeTableName(newTableSchemaName,getNewTableName()) + " AS SELECT DISTINCT "+ getExistingColumnName()+ " AS "+ getNewColumnName()+ " FROM "+ database.escapeTableName(existingTableSchemaName,getExistingTableName())+ " WHERE "+ getExistingColumnName()+ " IS NOT NULL")};
  if (database instanceof MSSQLDatabase) {
    createTablesSQL=new SqlStatement[]{new RawSqlStatement("SELECT DISTINCT " + getExistingColumnName() + " AS "+ getNewColumnName()+ " INTO "+ database.escapeTableName(newTableSchemaName,getNewTableName())+ " FROM "+ database.escapeTableName(existingTableSchemaName,getExistingTableName())+ " WHERE "+ getExistingColumnName()+ " IS NOT NULL")};
  }
 else   if (database instanceof SybaseASADatabase) {
    createTablesSQL=new SqlStatement[]{new RawSqlStatement("SELECT DISTINCT " + getExistingColumnName() + " AS "+ getNewColumnName()+ " INTO "+ database.escapeTableName(newTableSchemaName,getNewTableName())+ " FROM "+ database.escapeTableName(existingTableSchemaName,getExistingTableName())+ " WHERE "+ getExistingColumnName()+ " IS NOT NULL")};
  }
 else   if (database instanceof DB2Database) {
    createTablesSQL=new SqlStatement[]{new RawSqlStatement("CREATE TABLE " + database.escapeTableName(newTableSchemaName,getNewTableName()) + " AS (SELECT "+ getExistingColumnName()+ " AS "+ getNewColumnName()+ " FROM "+ database.escapeTableName(existingTableSchemaName,getExistingTableName())+ ") WITH NO DATA"),new RawSqlStatement("INSERT INTO " + database.escapeTableName(newTableSchemaName,getNewTableName()) + " SELECT DISTINCT "+ getExistingColumnName()+ " FROM "+ database.escapeTableName(existingTableSchemaName,getExistingTableName())+ " WHERE "+ getExistingColumnName()+ " IS NOT NULL")};
  }
  statements.addAll(Arrays.asList(createTablesSQL));
  if (!(database instanceof OracleDatabase)) {
    AddNotNullConstraintChange addNotNullChange=new AddNotNullConstraintChange();
    addNotNullChange.setSchemaName(newTableSchemaName);
    addNotNullChange.setTableName(getNewTableName());
    addNotNullChange.setColumnName(getNewColumnName());
    addNotNullChange.setColumnDataType(getNewColumnDataType());
    statements.addAll(Arrays.asList(addNotNullChange.generateStatements(database)));
  }
  if (database instanceof DB2Database) {
    statements.add(new ReorganizeTableStatement(newTableSchemaName,getNewTableName()));
  }
  AddPrimaryKeyChange addPKChange=new AddPrimaryKeyChange();
  addPKChange.setSchemaName(newTableSchemaName);
  addPKChange.setTableName(getNewTableName());
  addPKChange.setColumnNames(getNewColumnName());
  statements.addAll(Arrays.asList(addPKChange.generateStatements(database)));
  if (database instanceof DB2Database) {
    statements.add(new ReorganizeTableStatement(newTableSchemaName,getNewTableName()));
  }
  AddForeignKeyConstraintChange addFKChange=new AddForeignKeyConstraintChange();
  addFKChange.setBaseTableSchemaName(existingTableSchemaName);
  addFKChange.setBaseTableName(getExistingTableName());
  addFKChange.setBaseColumnNames(getExistingColumnName());
  addFKChange.setReferencedTableSchemaName(newTableSchemaName);
  addFKChange.setReferencedTableName(getNewTableName());
  addFKChange.setReferencedColumnNames(getNewColumnName());
  addFKChange.setConstraintName(getFinalConstraintName());
  statements.addAll(Arrays.asList(addFKChange.generateStatements(database)));
  return statements.toArray(new SqlStatement[statements.size()]);
}
