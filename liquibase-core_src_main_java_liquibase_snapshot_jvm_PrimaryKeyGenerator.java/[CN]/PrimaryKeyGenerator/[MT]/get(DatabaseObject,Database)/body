{
  updateListeners("Reading primary keys for " + database.toString() + " ...");
  Schema schema;
  Table relation=null;
  if (container instanceof Schema) {
    schema=(Schema)container;
  }
 else   if (container instanceof Table) {
    relation=(Table)container;
    schema=relation.getSchema();
  }
 else {
    return new PrimaryKey[0];
  }
  List<PrimaryKey> foundPKs=new ArrayList<PrimaryKey>();
  List<String> tables=new ArrayList<String>();
  if (relation == null) {
    tables.addAll(listAllTables(schema.toCatalogAndSchema(),database));
  }
 else {
    tables.add(relation.getName());
  }
  ResultSet rs=null;
  try {
    DatabaseMetaData metaData=getMetaData(database);
    for (    String tableName : tables) {
      Table otherTable=new Table().setName(tableName);
      rs=metaData.getPrimaryKeys(database.getJdbcCatalogName(schema),database.getJdbcSchemaName(schema),tableName);
      while (rs.next()) {
        String columnName=cleanNameFromDatabase(rs.getString("COLUMN_NAME"),database);
        short position=rs.getShort("KEY_SEQ");
        boolean foundExistingPK=false;
        for (        PrimaryKey pk : foundPKs) {
          if (pk.getTable().equals(otherTable,database)) {
            pk.addColumnName(position - 1,columnName);
            foundExistingPK=true;
          }
        }
        if (!foundExistingPK) {
          PrimaryKey primaryKey=new PrimaryKey();
          primaryKey.setTable(new Table().setName(tableName));
          primaryKey.addColumnName(position - 1,columnName);
          primaryKey.setName(database.correctObjectName(rs.getString("PK_NAME"),PrimaryKey.class));
          foundPKs.add(primaryKey);
        }
      }
      rs.close();
    }
  }
 catch (  SQLException e) {
    throw new DatabaseException(e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
    }
 catch (    SQLException ignored) {
    }
  }
  return foundPKs.toArray(new PrimaryKey[foundPKs.size()]);
}
