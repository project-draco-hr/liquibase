{
  LogFactory.getLogger().addHandler(new Handler(){
    public synchronized void publish(    LogRecord record){
      LiquibaseStatusServlet.logMessage(record);
    }
    public void flush(){
    }
    public void close() throws SecurityException {
    }
  }
);
  String hostName;
  try {
    hostName=NetUtil.getLocalHost().getHostName();
  }
 catch (  Exception e) {
    servletContextEvent.getServletContext().log("Cannot find hostname: " + e.getMessage());
    return;
  }
  String shouldRunProperty=System.getProperty(Liquibase.SHOULD_RUN_SYSTEM_PROPERTY);
  if (shouldRunProperty != null && !Boolean.valueOf(shouldRunProperty)) {
    LogFactory.getLogger().info("LiquiBase did not run on " + hostName + " because '"+ Liquibase.SHOULD_RUN_SYSTEM_PROPERTY+ "' system property was set to false");
    return;
  }
  String machineIncludes=servletContextEvent.getServletContext().getInitParameter("LIQUIBASE_HOST_INCLUDES");
  String machineExcludes=servletContextEvent.getServletContext().getInitParameter("LIQUIBASE_HOST_EXCLUDES");
  String failOnError=servletContextEvent.getServletContext().getInitParameter("LIQUIBASE_FAIL_ON_ERROR");
  boolean shouldRun=false;
  if (machineIncludes == null && machineExcludes == null) {
    shouldRun=true;
  }
 else   if (machineIncludes != null) {
    for (    String machine : machineIncludes.split(",")) {
      machine=machine.trim();
      if (hostName.equalsIgnoreCase(machine)) {
        shouldRun=true;
      }
    }
  }
 else   if (machineExcludes != null) {
    shouldRun=true;
    for (    String machine : machineExcludes.split(",")) {
      machine=machine.trim();
      if (hostName.equalsIgnoreCase(machine)) {
        shouldRun=false;
      }
    }
  }
  if (!shouldRun) {
    servletContextEvent.getServletContext().log("LiquibaseServletListener did not run due to LIQUIBASE_HOST_INCLUDES and/or LIQUIBASE_HOST_EXCLUDES");
    return;
  }
  setDataSource(servletContextEvent.getServletContext().getInitParameter("LIQUIBASE_DATA_SOURCE"));
  setChangeLogFile(servletContextEvent.getServletContext().getInitParameter("LIQUIBASE_CHANGELOG"));
  setContexts(servletContextEvent.getServletContext().getInitParameter("LIQUIBASE_CONTEXTS"));
  if (getChangeLogFile() == null) {
    throw new RuntimeException("Cannot run LiquiBase, LIQUIBASE_CHANGELOG is not set");
  }
  if (getDataSource() == null) {
    throw new RuntimeException("Cannot run LiquiBase, LIQUIBASE_DATA_SOURCE is not set");
  }
  try {
    Context ic=null;
    Connection connection=null;
    try {
      ic=new InitialContext();
      DataSource dataSource=(DataSource)ic.lookup(this.dataSource);
      connection=dataSource.getConnection();
      FileOpener clFO=new ClassLoaderFileOpener();
      FileOpener fsFO=new FileSystemFileOpener();
      Liquibase liquibase=new Liquibase(getChangeLogFile(),new CompositeFileOpener(clFO,fsFO),DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection));
      liquibase.update(getContexts());
    }
  finally {
      if (ic != null) {
        ic.close();
      }
      if (connection != null) {
        connection.close();
        connection.close();
      }
    }
  }
 catch (  Exception e) {
    if (!"false".equals(failOnError)) {
      throw new RuntimeException(e);
    }
  }
}
