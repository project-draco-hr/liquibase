{
  String textString=null;
  if (text != null && text.length() > 0) {
    textString=changeLogParameters.expandExpressions(StringUtils.trimToNull(text.toString()));
  }
  try {
    if (changeSubObjects.size() > 0) {
      Object subObject=changeSubObjects.pop();
      if (textString != null) {
        setProperty(subObject,"text",textString);
        text=null;
      }
    }
 else     if (rootPrecondition != null) {
      if ("preConditions".equals(qName)) {
        if (changeSet == null) {
          databaseChangeLog.setPreconditions(rootPrecondition);
          handlePreCondition(rootPrecondition);
        }
 else {
          changeSet.setPreconditions(rootPrecondition);
        }
        rootPrecondition=null;
      }
 else       if ("and".equals(qName)) {
        preconditionLogicStack.pop();
        currentPrecondition=null;
      }
 else       if ("or".equals(qName)) {
        preconditionLogicStack.pop();
        currentPrecondition=null;
      }
 else       if ("not".equals(qName)) {
        preconditionLogicStack.pop();
        currentPrecondition=null;
      }
 else       if (qName.equals("sqlCheck")) {
        ((SqlPrecondition)currentPrecondition).setSql(textString);
        currentPrecondition=null;
      }
 else       if (qName.equals("customPrecondition")) {
        ((CustomPreconditionWrapper)currentPrecondition).setClassLoader(resourceAccessor.toClassLoader());
        currentPrecondition=null;
      }
    }
 else     if (changeSet != null && "rollback".equals(qName)) {
      changeSet.addRollBackSQL(textString);
      inRollback=false;
    }
 else     if (change != null && change instanceof RawSQLChange && "comment".equals(qName)) {
      ((RawSQLChange)change).setComment(textString);
      text=new StringBuffer();
    }
 else     if (change != null && "where".equals(qName)) {
      if (change instanceof AbstractModifyDataChange) {
        ((AbstractModifyDataChange)change).setWhere(textString);
      }
 else {
        throw new RuntimeException("Unexpected change type: " + change.getClass().getName());
      }
      text=new StringBuffer();
    }
 else     if (change != null && change instanceof CreateProcedureChange && "comment".equals(qName)) {
      ((CreateProcedureChange)change).setComments(textString);
      text=new StringBuffer();
    }
 else     if (change != null && change instanceof CustomChangeWrapper && paramName != null && "param".equals(qName)) {
      ((CustomChangeWrapper)change).setParam(paramName,textString);
      text=new StringBuffer();
      paramName=null;
    }
 else     if (changeSet != null && "comment".equals(qName)) {
      changeSet.setComments(textString);
      text=new StringBuffer();
    }
 else     if (changeSet != null && "changeSet".equals(qName)) {
      handleChangeSet(changeSet);
      changeSet=null;
    }
 else     if (change != null && qName.equals("column") && textString != null) {
      if (change instanceof InsertDataChange) {
        List<ColumnConfig> columns=((InsertDataChange)change).getColumns();
        columns.get(columns.size() - 1).setValue(textString);
      }
 else       if (change instanceof UpdateDataChange) {
        List<ColumnConfig> columns=((UpdateDataChange)change).getColumns();
        columns.get(columns.size() - 1).setValue(textString);
      }
 else {
        throw new RuntimeException("Unexpected column with text: " + textString);
      }
      this.text=new StringBuffer();
    }
 else     if (change != null && change instanceof AbstractModifyDataChange && qName.equals("param") && textString != null) {
      List<ColumnConfig> columns=((AbstractModifyDataChange)change).getWhereParams();
      columns.get(columns.size() - 1).setValue(textString);
      this.text=new StringBuffer();
    }
 else     if (change != null && localName.equals(changeFactory.getChangeMetaData(change).getName())) {
      if (textString != null) {
        if (change instanceof RawSQLChange) {
          String expandedExpression=textString;
          if (!LiquibaseConfiguration.getInstance().getConfiguration(ChangeLogParserCofiguration.class).getSupportPropertyEscaping()) {
            expandedExpression=changeLogParameters.expandExpressions(textString);
          }
          ((RawSQLChange)change).setSql(expandedExpression);
        }
 else         if (change instanceof CreateProcedureChange) {
          ((CreateProcedureChange)change).setProcedureText(textString);
        }
 else         if (change instanceof CreateViewChange) {
          ((CreateViewChange)change).setSelectQuery(textString);
        }
 else         if (change instanceof StopChange) {
          ((StopChange)change).setMessage(textString);
        }
 else {
          boolean foundTextParam=false;
          for (          ChangeParameterMetaData metadata : changeFactory.getChangeMetaData(change).getParameters().values()) {
            if (metadata.getSerializationType() == LiquibaseSerializable.SerializationType.DIRECT_VALUE) {
              metadata.setValue(change,textString);
              foundTextParam=true;
              break;
            }
          }
          if (!foundTextParam) {
            throw new RuntimeException("Unexpected text in " + changeFactory.getChangeMetaData(change).getName());
          }
        }
      }
      text=null;
      if (inRollback) {
        changeSet.addRollbackChange(change);
      }
 else {
        changeSet.addChange(change);
      }
      change=null;
    }
 else     if (changeSet != null && "validCheckSum".equals(qName)) {
      changeSet.addValidCheckSum(text.toString());
      text=null;
    }
 else     if ("modifySql".equals(qName)) {
      inModifySql=false;
      modifySqlDbmsList=null;
      modifySqlContexts=null;
      modifySqlAppliedOnRollback=false;
    }
 else     if (change != null && textString != null) {
      setProperty(change,localName,textString);
    }
  }
 catch (  Exception e) {
    log.severe("Error thrown as a SAXException: " + e.getMessage(),e);
    throw new SAXException(databaseChangeLog.getPhysicalFilePath() + ": " + e.getMessage(),e);
  }
}
