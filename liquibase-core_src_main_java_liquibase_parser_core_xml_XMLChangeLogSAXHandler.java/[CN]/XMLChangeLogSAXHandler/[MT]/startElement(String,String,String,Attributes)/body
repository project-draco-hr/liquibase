{
  Attributes atts=new ExpandingAttributes(baseAttributes);
  try {
    if ("comment".equals(qName)) {
      text=new StringBuffer();
    }
 else     if ("validCheckSum".equals(qName)) {
      text=new StringBuffer();
    }
 else     if ("databaseChangeLog".equals(qName)) {
      String schemaLocation=atts.getValue("xsi:schemaLocation");
      if (schemaLocation != null) {
        Matcher matcher=Pattern.compile(".*dbchangelog-(\\d+\\.\\d+).xsd").matcher(schemaLocation);
        if (matcher.matches()) {
          String version=matcher.group(1);
          if (!version.equals(XMLChangeLogSAXParser.getSchemaVersion())) {
            log.info(databaseChangeLog.getPhysicalFilePath() + " is using schema version " + version+ " rather than version "+ XMLChangeLogSAXParser.getSchemaVersion());
          }
        }
      }
      databaseChangeLog.setLogicalFilePath(atts.getValue("logicalFilePath"));
    }
 else     if ("include".equals(qName)) {
      String fileName=atts.getValue("file");
      boolean isRelativeToChangelogFile=Boolean.parseBoolean(atts.getValue("relativeToChangelogFile"));
      handleIncludedChangeLog(fileName,isRelativeToChangelogFile,databaseChangeLog.getPhysicalFilePath());
    }
 else     if ("includeAll".equals(qName)) {
      String pathName=atts.getValue("path");
      if (!(pathName.endsWith("/") || pathName.endsWith("\\"))) {
        pathName=pathName + "/";
      }
      log.debug("includeAll for " + pathName);
      log.debug("Using file opener for includeAll: " + resourceAccessor.getClass().getName());
      Enumeration<URL> resources=resourceAccessor.getResources(pathName);
      boolean foundResource=false;
      while (resources.hasMoreElements()) {
        URL fileUrl=resources.nextElement();
        if (!fileUrl.toExternalForm().startsWith("file:")) {
          log.debug(fileUrl.toExternalForm() + " is not a file path");
          continue;
        }
        File file=new File(fileUrl.toURI());
        log.debug("includeAll using path " + file.getCanonicalPath());
        if (!file.exists()) {
          throw new SAXException("includeAll path " + pathName + " could not be found.  Tried in "+ file.toString());
        }
        if (file.isDirectory()) {
          log.debug(file.getCanonicalPath() + " is a directory");
          for (          File childFile : file.listFiles()) {
            if (handleIncludedChangeLog(pathName + childFile.getName(),false,databaseChangeLog.getPhysicalFilePath())) {
              foundResource=true;
            }
          }
        }
 else {
          if (handleIncludedChangeLog(pathName + file.getName(),false,databaseChangeLog.getPhysicalFilePath())) {
            foundResource=true;
          }
        }
      }
      if (!foundResource) {
        throw new SAXException("Could not find directory or directory was empty for includeAll '" + pathName + "'");
      }
    }
 else     if (changeSet == null && "changeSet".equals(qName)) {
      boolean alwaysRun=false;
      boolean runOnChange=false;
      if ("true".equalsIgnoreCase(atts.getValue("runAlways"))) {
        alwaysRun=true;
      }
      if ("true".equalsIgnoreCase(atts.getValue("runOnChange"))) {
        runOnChange=true;
      }
      String filePath=atts.getValue("movedFromPath");
      if (filePath == null || "".equals(filePath)) {
        filePath=databaseChangeLog.getFilePath();
      }
      changeSet=new ChangeSet(atts.getValue("id"),atts.getValue("author"),alwaysRun,runOnChange,filePath,databaseChangeLog.getPhysicalFilePath(),atts.getValue("context"),atts.getValue("dbms"),Boolean.valueOf(atts.getValue("runInTransaction")));
      if (StringUtils.trimToNull(atts.getValue("failOnError")) != null) {
        changeSet.setFailOnError(Boolean.parseBoolean(atts.getValue("failOnError")));
      }
    }
 else     if (changeSet != null && "rollback".equals(qName)) {
      text=new StringBuffer();
      String id=atts.getValue("changeSetId");
      if (id != null) {
        String path=atts.getValue("changeSetPath");
        if (path == null) {
          path=databaseChangeLog.getFilePath();
        }
        String author=atts.getValue("changeSetAuthor");
        ChangeSet changeSet=databaseChangeLog.getChangeSet(path,author,id);
        if (changeSet == null) {
          throw new SAXException("Could not find changeSet to use for rollback: " + path + ":"+ author+ ":"+ id);
        }
 else {
          for (          Change change : changeSet.getChanges()) {
            this.changeSet.addRollbackChange(change);
          }
        }
      }
      inRollback=true;
    }
 else     if ("preConditions".equals(qName)) {
      rootPrecondition=new PreconditionContainer();
      rootPrecondition.setOnFail(StringUtils.trimToNull(atts.getValue("onFail")));
      rootPrecondition.setOnError(StringUtils.trimToNull(atts.getValue("onError")));
      rootPrecondition.setOnFailMessage(StringUtils.trimToNull(atts.getValue("onFailMessage")));
      rootPrecondition.setOnErrorMessage(StringUtils.trimToNull(atts.getValue("onErrorMessage")));
      rootPrecondition.setOnSqlOutput(StringUtils.trimToNull(atts.getValue("onSqlOutput")));
      preconditionLogicStack.push(rootPrecondition);
    }
 else     if (currentPrecondition != null && currentPrecondition instanceof CustomPreconditionWrapper && qName.equals("param")) {
      ((CustomPreconditionWrapper)currentPrecondition).setParam(atts.getValue("name"),atts.getValue("value"));
    }
 else     if (rootPrecondition != null) {
      currentPrecondition=PreconditionFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(currentPrecondition,attributeName,attributeValue);
      }
      preconditionLogicStack.peek().addNestedPrecondition(currentPrecondition);
      if (currentPrecondition instanceof PreconditionLogic) {
        preconditionLogicStack.push(((PreconditionLogic)currentPrecondition));
      }
      if ("sqlCheck".equals(qName)) {
        text=new StringBuffer();
      }
    }
 else     if ("modifySql".equals(qName)) {
      inModifySql=true;
      if (StringUtils.trimToNull(atts.getValue("dbms")) != null) {
        modifySqlDbmsList=new HashSet<String>(StringUtils.splitAndTrim(atts.getValue("dbms"),","));
      }
      if (StringUtils.trimToNull(atts.getValue("context")) != null) {
        modifySqlContexts=new HashSet<String>(StringUtils.splitAndTrim(atts.getValue("context"),","));
      }
      if (StringUtils.trimToNull(atts.getValue("applyToRollback")) != null) {
        modifySqlAppliedOnRollback=Boolean.valueOf(atts.getValue("applyToRollback"));
      }
    }
 else     if (inModifySql) {
      SqlVisitor sqlVisitor=SqlVisitorFactory.getInstance().create(qName);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(sqlVisitor,attributeName,attributeValue);
      }
      sqlVisitor.setApplicableDbms(modifySqlDbmsList);
      sqlVisitor.setApplyToRollback(modifySqlAppliedOnRollback);
      sqlVisitor.setContexts(modifySqlContexts);
      changeSet.addSqlVisitor(sqlVisitor);
    }
 else     if (changeSet != null && change == null) {
      change=ChangeFactory.getInstance().create(localName);
      if (change == null) {
        throw new SAXException("Unknown LiquiBase extension: " + localName + ".  Are you missing a jar from your classpath?");
      }
      change.setChangeSet(changeSet);
      text=new StringBuffer();
      if (change == null) {
        throw new MigrationFailedException(changeSet,"Unknown change: " + localName);
      }
      change.setFileOpener(resourceAccessor);
      if (change instanceof CustomChangeWrapper) {
        ((CustomChangeWrapper)change).setClassLoader(resourceAccessor.toClassLoader());
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getLocalName(i);
        String attributeValue=atts.getValue(i);
        setProperty(change,attributeName,attributeValue);
      }
      change.init();
    }
 else     if (change != null && "column".equals(qName)) {
      ColumnConfig column;
      if (change instanceof LoadDataChange) {
        column=new LoadDataColumnConfig();
      }
 else {
        column=new ColumnConfig();
      }
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(column,attributeName,attributeValue);
      }
      if (change instanceof ChangeWithColumns) {
        ((ChangeWithColumns)change).addColumn(column);
      }
 else {
        throw new RuntimeException("Unexpected column tag for " + change.getClass().getName());
      }
    }
 else     if (change != null && "constraints".equals(qName)) {
      ConstraintsConfig constraints=new ConstraintsConfig();
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(constraints,attributeName,attributeValue);
      }
      ColumnConfig lastColumn;
      if (change instanceof AddColumnChange) {
        lastColumn=((AddColumnChange)change).getLastColumn();
      }
 else       if (change instanceof CreateTableChange) {
        lastColumn=((CreateTableChange)change).getColumns().get(((CreateTableChange)change).getColumns().size() - 1);
      }
 else {
        throw new RuntimeException("Unexpected change: " + change.getClass().getName());
      }
      lastColumn.setConstraints(constraints);
    }
 else     if ("param".equals(qName)) {
      if (change instanceof CustomChangeWrapper) {
        if (atts.getValue("value") == null) {
          paramName=atts.getValue("name");
          text=new StringBuffer();
        }
 else {
          ((CustomChangeWrapper)change).setParam(atts.getValue("name"),atts.getValue("value"));
        }
      }
 else {
        throw new MigrationFailedException(changeSet,"'param' unexpected in " + qName);
      }
    }
 else     if ("where".equals(qName)) {
      text=new StringBuffer();
    }
 else     if ("property".equals(qName)) {
      String context=StringUtils.trimToNull(atts.getValue("context"));
      String dbms=StringUtils.trimToNull(atts.getValue("dbms"));
      if (StringUtils.trimToNull(atts.getValue("file")) == null) {
        this.changeLogParameters.set(atts.getValue("name"),atts.getValue("value"),context,dbms);
      }
 else {
        Properties props=new Properties();
        InputStream propertiesStream=resourceAccessor.getResourceAsStream(atts.getValue("file"));
        if (propertiesStream == null) {
          log.info("Could not open properties file " + atts.getValue("file"));
        }
 else {
          props.load(propertiesStream);
          for (          Map.Entry entry : props.entrySet()) {
            this.changeLogParameters.set(entry.getKey().toString(),entry.getValue().toString(),context,dbms);
          }
        }
      }
    }
 else     if (change instanceof ExecuteShellCommandChange && "arg".equals(qName)) {
      ((ExecuteShellCommandChange)change).addArg(atts.getValue("value"));
    }
 else     if (change != null) {
      String creatorMethod="create" + localName.substring(0,1).toUpperCase() + localName.substring(1);
      Object objectToCreateFrom;
      if (changeSubObjects.size() == 0) {
        objectToCreateFrom=change;
      }
 else {
        objectToCreateFrom=changeSubObjects.peek();
      }
      Method method;
      try {
        method=objectToCreateFrom.getClass().getMethod(creatorMethod);
      }
 catch (      NoSuchMethodException e) {
        throw new MigrationFailedException(changeSet,"Could not find creator method " + creatorMethod + " for tag: "+ qName);
      }
      Object subObject=method.invoke(objectToCreateFrom);
      for (int i=0; i < atts.getLength(); i++) {
        String attributeName=atts.getQName(i);
        String attributeValue=atts.getValue(i);
        setProperty(subObject,attributeName,attributeValue);
      }
      changeSubObjects.push(subObject);
    }
 else {
      throw new MigrationFailedException(changeSet,"Unexpected tag: " + qName);
    }
  }
 catch (  Exception e) {
    log.severe("Error thrown as a SAXException: " + e.getMessage(),e);
    e.printStackTrace();
    throw new SAXException(e);
  }
}
