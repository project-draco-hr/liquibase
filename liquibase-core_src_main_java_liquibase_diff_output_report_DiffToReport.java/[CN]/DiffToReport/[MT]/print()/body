{
  final DatabaseObjectComparator comparator=new DatabaseObjectComparator();
  out.println("Reference Database: " + diffResult.getReferenceSnapshot().getDatabase());
  out.println("Comparison Database: " + diffResult.getComparisonSnapshot().getDatabase());
  CompareControl.SchemaComparison[] schemas=diffResult.getCompareControl().getSchemaComparisons();
  if (schemas != null && schemas.length > 0) {
    out.println("Compared Schemas: " + StringUtils.join(Arrays.asList(schemas),", ",new StringUtils.StringUtilsFormatter<CompareControl.SchemaComparison>(){
      @Override public String toString(      CompareControl.SchemaComparison obj){
        String referenceName;
        String comparisonName;
        Database referenceDatabase=diffResult.getReferenceSnapshot().getDatabase();
        Database comparisonDatabase=diffResult.getComparisonSnapshot().getDatabase();
        if (referenceDatabase.supportsSchemas()) {
          referenceName=obj.getReferenceSchema().getSchemaName();
          if (referenceName == null) {
            referenceName=referenceDatabase.getDefaultSchemaName();
          }
        }
 else         if (referenceDatabase.supportsCatalogs()) {
          referenceName=obj.getReferenceSchema().getCatalogName();
          if (referenceName == null) {
            referenceName=referenceDatabase.getDefaultCatalogName();
          }
        }
 else {
          return "";
        }
        if (comparisonDatabase.supportsSchemas()) {
          comparisonName=obj.getComparisonSchema().getSchemaName();
          if (comparisonName == null) {
            comparisonName=comparisonDatabase.getDefaultSchemaName();
          }
        }
 else         if (comparisonDatabase.supportsCatalogs()) {
          comparisonName=obj.getComparisonSchema().getCatalogName();
          if (comparisonName == null) {
            comparisonName=comparisonDatabase.getDefaultCatalogName();
          }
        }
 else {
          return "";
        }
        if (referenceName == null) {
          referenceName=StringUtils.trimToEmpty(referenceDatabase.getDefaultSchemaName());
        }
        if (comparisonName == null) {
          comparisonName=StringUtils.trimToEmpty(comparisonDatabase.getDefaultSchemaName());
        }
        if (referenceName.equalsIgnoreCase(comparisonName)) {
          return referenceName;
        }
 else {
          return referenceName + " -> " + comparisonName;
        }
      }
    }
,true));
  }
  printComparison("Product Name",diffResult.getProductNameDiff(),out);
  printComparison("Product Version",diffResult.getProductVersionDiff(),out);
  TreeSet<Class<? extends DatabaseObject>> types=new TreeSet<Class<? extends DatabaseObject>>(new Comparator<Class<? extends DatabaseObject>>(){
    @Override public int compare(    Class<? extends DatabaseObject> o1,    Class<? extends DatabaseObject> o2){
      return o1.getSimpleName().compareTo(o2.getSimpleName());
    }
  }
);
  types.addAll(diffResult.getCompareControl().getComparedTypes());
  for (  Class<? extends DatabaseObject> type : types) {
    if (type.equals(Schema.class) && !diffResult.getComparisonSnapshot().getDatabase().supportsSchemas()) {
      continue;
    }
    printSetComparison("Missing " + getTypeName(type),diffResult.getMissingObjects(type,comparator),out);
    printSetComparison("Unexpected " + getTypeName(type),diffResult.getUnexpectedObjects(type,comparator),out);
    printChangedComparison("Changed " + getTypeName(type),diffResult.getChangedObjects(type,comparator),out);
  }
}
