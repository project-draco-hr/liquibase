{
  final DatabaseObjectComparator comparator=new DatabaseObjectComparator();
  out.println("Reference Database: " + diffResult.getReferenceSnapshot().getDatabase());
  out.println("Comparison Database: " + diffResult.getComparisonSnapshot().getDatabase());
  Set<Schema> schemas=diffResult.getReferenceSnapshot().get(Schema.class);
  if (schemas != null && schemas.size() > 0) {
    out.println("Compared Schemas: " + StringUtils.join(schemas,", ",new StringUtils.StringUtilsFormatter<Schema>(){
      @Override public String toString(      Schema obj){
        String name=obj.getName();
        for (        CompareControl.SchemaComparison comparison : diffResult.getCompareControl().getSchemaComparisons()) {
          if (name.equals(comparison.getReferenceSchema().getCatalogName())) {
            name+=" -> " + comparison.getComparisonSchema().getCatalogName();
          }
 else           if (name.equals(comparison.getReferenceSchema().getSchemaName())) {
            name+=" -> " + comparison.getComparisonSchema().getSchemaName();
          }
 else           if (name.equals(comparison.getComparisonSchema().getCatalogName())) {
            name+=" -> " + comparison.getReferenceSchema().getCatalogName();
          }
 else           if (name.equals(comparison.getComparisonSchema().getSchemaName())) {
            name+=" -> " + comparison.getReferenceSchema().getSchemaName();
          }
        }
        return name;
      }
    }
,true));
  }
  printComparison("Product Name",diffResult.getProductNameDiff(),out);
  printComparison("Product Version",diffResult.getProductVersionDiff(),out);
  TreeSet<Class<? extends DatabaseObject>> types=new TreeSet<Class<? extends DatabaseObject>>(new Comparator<Class<? extends DatabaseObject>>(){
    @Override public int compare(    Class<? extends DatabaseObject> o1,    Class<? extends DatabaseObject> o2){
      return o1.getSimpleName().compareTo(o2.getSimpleName());
    }
  }
);
  types.addAll(diffResult.getCompareControl().getComparedTypes());
  for (  Class<? extends DatabaseObject> type : types) {
    if (type.equals(Schema.class) && !diffResult.getComparisonSnapshot().getDatabase().supportsSchemas()) {
      continue;
    }
    printSetComparison("Missing " + getTypeName(type),diffResult.getMissingObjects(type,comparator),out);
    printSetComparison("Unexpected " + getTypeName(type),diffResult.getUnexpectedObjects(type,comparator),out);
    printChangedComparison("Changed " + getTypeName(type),diffResult.getChangedObjects(type,comparator),out);
  }
}
