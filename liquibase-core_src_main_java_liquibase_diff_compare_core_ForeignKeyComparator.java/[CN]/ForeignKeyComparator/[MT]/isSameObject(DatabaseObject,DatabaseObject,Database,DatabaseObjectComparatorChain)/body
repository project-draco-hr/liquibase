{
  if (!(databaseObject1 instanceof ForeignKey && databaseObject2 instanceof ForeignKey)) {
    return false;
  }
  ForeignKey thisForeignKey=(ForeignKey)databaseObject1;
  ForeignKey otherForeignKey=(ForeignKey)databaseObject2;
  if (thisForeignKey.getName() != null && otherForeignKey.getName() != null) {
    if (chain.isSameObject(thisForeignKey,otherForeignKey,accordingTo)) {
      return true;
    }
  }
  if (thisForeignKey.getForeignKeyColumns() != null && thisForeignKey.getPrimaryKeyColumns() != null && otherForeignKey.getForeignKeyColumns() != null && otherForeignKey.getPrimaryKeyColumns() != null) {
    boolean columnsTheSame;
    StringUtils.StringUtilsFormatter formatter=new StringUtils.StringUtilsFormatter<Column>(){
      @Override public String toString(      Column obj){
        return obj.toString(false);
      }
    }
;
    if (accordingTo.isCaseSensitive()) {
      columnsTheSame=StringUtils.join(thisForeignKey.getForeignKeyColumns(),",",formatter).equals(StringUtils.join(otherForeignKey.getForeignKeyColumns(),",",formatter)) && StringUtils.join(thisForeignKey.getPrimaryKeyColumns(),",",formatter).equals(StringUtils.join(otherForeignKey.getPrimaryKeyColumns(),",",formatter));
    }
 else {
      columnsTheSame=StringUtils.join(thisForeignKey.getForeignKeyColumns(),",",formatter).equalsIgnoreCase(StringUtils.join(otherForeignKey.getForeignKeyColumns(),",",formatter)) && StringUtils.join(thisForeignKey.getPrimaryKeyColumns(),",",formatter).equalsIgnoreCase(StringUtils.join(otherForeignKey.getPrimaryKeyColumns(),",",formatter));
    }
    return columnsTheSame && DatabaseObjectComparatorFactory.getInstance().isSameObject(thisForeignKey.getForeignKeyTable(),otherForeignKey.getForeignKeyTable(),accordingTo) && DatabaseObjectComparatorFactory.getInstance().isSameObject(thisForeignKey.getPrimaryKeyTable(),otherForeignKey.getPrimaryKeyTable(),accordingTo);
  }
  return false;
}
