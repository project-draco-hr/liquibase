{
  StringBuffer sql=new StringBuffer("INSERT INTO " + database.escapeTableName(statement.getCatalogName(),statement.getSchemaName(),statement.getTableName()) + " (");
  for (  String column : statement.getColumnValues().keySet()) {
    sql.append(database.escapeColumnName(statement.getCatalogName(),statement.getSchemaName(),statement.getTableName(),column)).append(", ");
  }
  sql.deleteCharAt(sql.lastIndexOf(" "));
  int lastComma=sql.lastIndexOf(",");
  if (lastComma >= 0) {
    sql.deleteCharAt(lastComma);
  }
  sql.append(") VALUES (");
  for (  String column : statement.getColumnValues().keySet()) {
    Object newValue=statement.getColumnValues().get(column);
    if (newValue == null || newValue.toString().equalsIgnoreCase("NULL")) {
      sql.append("NULL");
    }
 else     if (newValue instanceof String && !looksLikeFunctionCall(((String)newValue),database)) {
      sql.append("'").append(database.escapeStringForDatabase((String)newValue)).append("'");
    }
 else     if (newValue instanceof Date) {
      sql.append(database.getDateLiteral(((Date)newValue)));
    }
 else     if (newValue instanceof Boolean) {
      if (((Boolean)newValue)) {
        sql.append(DataTypeFactory.getInstance().getTrueBooleanValue(database));
      }
 else {
        sql.append(DataTypeFactory.getInstance().getFalseBooleanValue(database));
      }
    }
 else     if (newValue instanceof DatabaseFunction) {
      sql.append(database.generateDatabaseFunctionValue((DatabaseFunction)newValue));
    }
 else {
      sql.append(newValue);
    }
    sql.append(", ");
  }
  sql.deleteCharAt(sql.lastIndexOf(" "));
  lastComma=sql.lastIndexOf(",");
  if (lastComma >= 0) {
    sql.deleteCharAt(lastComma);
  }
  sql.append(")");
  return new Sql[]{new UnparsedSql(sql.toString())};
}
