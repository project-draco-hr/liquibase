{
  expandExpressions(node);
  String nodeName=node.getName();
  if (nodeName.equals("changeSet")) {
    this.addChangeSet(createChangeSet(node,resourceAccessor));
  }
 else   if (nodeName.equals("include")) {
    String path=node.getChildValue(null,"file",String.class);
    if (path == null) {
      throw new UnexpectedLiquibaseException("No 'file' attribute on 'include'");
    }
    path=path.replace('\\','/');
    ContextExpression includeContexts=new ContextExpression(node.getChildValue(null,"context",String.class));
    try {
      include(path,node.getChildValue(null,"relativeToChangelogFile",false),resourceAccessor,includeContexts);
    }
 catch (    LiquibaseException e) {
      throw new SetupException(e);
    }
  }
 else   if (nodeName.equals("includeAll")) {
    String path=node.getChildValue(null,"path",String.class);
    String resourceFilterDef=node.getChildValue(null,"filter",String.class);
    if (resourceFilterDef == null) {
      resourceFilterDef=node.getChildValue(null,"resourceFilter",String.class);
    }
    IncludeAllFilter resourceFilter=null;
    if (resourceFilterDef != null) {
      try {
        resourceFilter=(IncludeAllFilter)Class.forName(resourceFilterDef).newInstance();
      }
 catch (      Exception e) {
        throw new SetupException(e);
      }
    }
    String resourceComparatorDef=node.getChildValue(null,"resourceComparator",String.class);
    Comparator<?> resourceComparator=null;
    if (resourceComparatorDef != null) {
      try {
        resourceComparator=(Comparator<?>)Class.forName(resourceComparatorDef).newInstance();
      }
 catch (      Exception e) {
        LogFactory.getInstance().getLog().info("no resourceComparator defined - taking default implementation");
        resourceComparator=getStandardChangeLogComparator();
      }
    }
    ContextExpression includeContexts=new ContextExpression(node.getChildValue(null,"context",String.class));
    includeAll(path,node.getChildValue(null,"relativeToChangelogFile",false),resourceFilter,node.getChildValue(null,"errorIfMissingOrEmpty",true),getStandardChangeLogComparator(),resourceAccessor,includeContexts);
  }
 else   if (nodeName.equals("preConditions")) {
    this.preconditionContainer=new PreconditionContainer();
    try {
      this.preconditionContainer.load(node,resourceAccessor);
    }
 catch (    ParsedNodeException e) {
      e.printStackTrace();
    }
  }
 else   if (nodeName.equals("property")) {
    try {
      String context=node.getChildValue(null,"context",String.class);
      String dbms=node.getChildValue(null,"dbms",String.class);
      String labels=node.getChildValue(null,"labels",String.class);
      Boolean global=node.getChildValue(null,"global",Boolean.class);
      if (global == null) {
        global=true;
      }
      String file=node.getChildValue(null,"file",String.class);
      if (file == null) {
        String name=node.getChildValue(null,"name",String.class);
        String value=node.getChildValue(null,"value",String.class);
        this.changeLogParameters.set(name,value,context,labels,dbms,global,this);
      }
 else {
        Properties props=new Properties();
        InputStream propertiesStream=StreamUtil.singleInputStream(file,resourceAccessor);
        if (propertiesStream == null) {
          LogFactory.getInstance().getLog().info("Could not open properties file " + file);
        }
 else {
          props.load(propertiesStream);
          for (          Map.Entry entry : props.entrySet()) {
            this.changeLogParameters.set(entry.getKey().toString(),entry.getValue().toString(),context,labels,dbms,global,this);
          }
        }
      }
    }
 catch (    IOException e) {
      throw new ParsedNodeException(e);
    }
  }
}
