{
  boolean shouldRun=true;
  if (os != null && os.size() > 0) {
    String currentOS=System.getProperty("os.name");
    if (!os.contains(currentOS)) {
      shouldRun=false;
      LogFactory.getLogger().info("Not executing on os " + currentOS + " when "+ os+ " was specified");
    }
  }
  boolean nonExecutedMode=false;
  Executor executor=ExecutorService.getInstance().getExecutor(database);
  if (executor instanceof LoggingExecutor) {
    nonExecutedMode=true;
  }
  if (shouldRun && !nonExecutedMode) {
    return new SqlStatement[]{new RuntimeStatement(){
      @Override public Sql[] generate(      Database database){
        List<String> commandArray=new ArrayList<String>();
        commandArray.add(executable);
        commandArray.addAll(args);
        try {
          ProcessBuilder pb=new ProcessBuilder(commandArray);
          pb.redirectErrorStream(true);
          Process p=pb.start();
          int returnCode=0;
          try {
            returnCode=p.waitFor();
          }
 catch (          InterruptedException e) {
            ;
          }
          ByteArrayOutputStream errorStream=new ByteArrayOutputStream();
          ByteArrayOutputStream inputStream=new ByteArrayOutputStream();
          StreamUtil.copy(p.getErrorStream(),errorStream);
          StreamUtil.copy(p.getInputStream(),inputStream);
          LogFactory.getLogger().severe(errorStream.toString());
          LogFactory.getLogger().info(inputStream.toString());
          if (returnCode != 0) {
            throw new RuntimeException(getCommandString() + " returned an code of " + returnCode);
          }
        }
 catch (        IOException e) {
          throw new UnexpectedLiquibaseException("Error executing command: " + e);
        }
        return null;
      }
    }
};
  }
  if (nonExecutedMode) {
    return new SqlStatement[]{new CommentStatement(getCommandString())};
  }
  return new SqlStatement[0];
}
