{
  ByteArrayOutputStream errorStream=new ByteArrayOutputStream();
  ByteArrayOutputStream inputStream=new ByteArrayOutputStream();
  ProcessBuilder pb=createProcessBuilder(database);
  Process p=pb.start();
  int returnCode=0;
  try {
    StreamGobbler errorGobbler=new StreamGobbler(p.getErrorStream(),errorStream);
    StreamGobbler outputGobbler=new StreamGobbler(p.getInputStream(),inputStream);
    errorGobbler.start();
    outputGobbler.start();
    returnCode=p.waitFor();
    errorGobbler.finish();
    outputGobbler.finish();
  }
 catch (  InterruptedException e) {
    ;
  }
  LogFactory.getLogger().severe(errorStream.toString(LiquibaseConfiguration.getInstance().getConfiguration(GlobalConfiguration.class).getOutputEncoding()));
  LogFactory.getLogger().info(inputStream.toString(LiquibaseConfiguration.getInstance().getConfiguration(GlobalConfiguration.class).getOutputEncoding()));
  if (returnCode != 0) {
    throw new RuntimeException(getCommandString() + " returned an code of " + returnCode);
  }
}
