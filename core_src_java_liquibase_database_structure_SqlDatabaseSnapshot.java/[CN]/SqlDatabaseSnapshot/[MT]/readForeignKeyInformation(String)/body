{
  updateListeners("Reading foreign keys for " + database.toString() + " ...");
  for (  Table table : tablesMap.values()) {
    String dbCatalog=database.convertRequestedSchemaToCatalog(schema);
    String dbSchema=database.convertRequestedSchemaToSchema(schema);
    ResultSet rs=databaseMetaData.getExportedKeys(dbCatalog,dbSchema,table.getName());
    ForeignKey fkInfo=null;
    while (rs.next()) {
      String pkTableName=rs.getString("PKTABLE_NAME");
      String pkColumn=rs.getString("PKCOLUMN_NAME");
      Table pkTable=tablesMap.get(pkTableName);
      if (pkTable == null) {
        throw new JDBCException("Could not find table " + pkTableName + " for column "+ pkColumn);
      }
      int keySeq=rs.getInt("KEY_SEQ");
      if (keySeq == 1) {
        fkInfo=new ForeignKey();
      }
      fkInfo.setPrimaryKeyTable(pkTable);
      fkInfo.addPrimaryKeyColumn(pkColumn);
      String fkTableName=rs.getString("FKTABLE_NAME");
      String fkColumn=rs.getString("FKCOLUMN_NAME");
      Table fkTable=tablesMap.get(fkTableName);
      if (fkTable == null) {
        throw new JDBCException("Could not find table " + fkTableName + " for column "+ fkColumn);
      }
      fkInfo.setForeignKeyTable(fkTable);
      fkInfo.addForeignKeyColumn(fkColumn);
      fkInfo.setName(rs.getString("FK_NAME"));
      if (database.supportsInitiallyDeferrableColumns()) {
        short deferrablility=rs.getShort("DEFERRABILITY");
        if (deferrablility == DatabaseMetaData.importedKeyInitiallyDeferred) {
          fkInfo.setDeferrable(Boolean.TRUE);
          fkInfo.setInitiallyDeferred(Boolean.TRUE);
        }
 else         if (deferrablility == DatabaseMetaData.importedKeyInitiallyImmediate) {
          fkInfo.setDeferrable(Boolean.TRUE);
          fkInfo.setInitiallyDeferred(Boolean.FALSE);
        }
 else         if (deferrablility == DatabaseMetaData.importedKeyNotDeferrable) {
          fkInfo.setDeferrable(Boolean.FALSE);
          fkInfo.setInitiallyDeferred(Boolean.FALSE);
        }
      }
      if (keySeq == 1) {
        foreignKeys.add(fkInfo);
      }
    }
    rs.close();
  }
}
