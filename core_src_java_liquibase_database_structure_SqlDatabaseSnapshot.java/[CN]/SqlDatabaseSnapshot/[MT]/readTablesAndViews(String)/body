{
  updateListeners("Reading tables for " + database.toString() + " ...");
  ResultSet rs=databaseMetaData.getTables(database.convertRequestedSchemaToCatalog(schema),database.convertRequestedSchemaToSchema(schema),null,new String[]{"TABLE","VIEW"});
  while (rs.next()) {
    String type=rs.getString("TABLE_TYPE");
    String name=convertFromDatabaseName(rs.getString("TABLE_NAME"));
    String schemaName=convertFromDatabaseName(rs.getString("TABLE_SCHEM"));
    String catalogName=convertFromDatabaseName(rs.getString("TABLE_CAT"));
    String remarks=rs.getString("REMARKS");
    if (database.isSystemTable(catalogName,schemaName,name) || database.isLiquibaseTable(name) || database.isSystemView(catalogName,schemaName,name)) {
      if (name.equalsIgnoreCase(database.getDatabaseChangeLogTableName())) {
        hasDatabaseChangeLogTable=true;
      }
      continue;
    }
    if ("TABLE".equals(type)) {
      Table table=new Table(name);
      table.setRemarks(StringUtils.trimToNull(remarks));
      table.setDatabase(database);
      tablesMap.put(name,table);
    }
 else     if ("VIEW".equals(type)) {
      View view=new View();
      view.setName(name);
      try {
        view.setDefinition(database.getViewDefinition(schema,name));
      }
 catch (      JDBCException e) {
        System.out.println("Error getting " + database.getConnectionURL() + " view with "+ ((AbstractDatabase)database).getViewDefinitionSql(schema,name));
        throw e;
      }
      viewsMap.put(name,view);
    }
  }
  rs.close();
}
