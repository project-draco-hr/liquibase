{
  Database database=new MySQLDatabase();
  final SqlStatement statement1Unsupported=mock(SqlStatement.class);
  final SqlStatement statement2Unsupported=mock(SqlStatement.class);
  final SqlStatement statementSupported=mock(SqlStatement.class);
  SqlGeneratorFactory generatorFactory=mock(SqlGeneratorFactory.class);
  when(generatorFactory.supports(statement1Unsupported,database)).thenReturn(false);
  when(generatorFactory.supports(statement2Unsupported,database)).thenReturn(false);
  when(generatorFactory.supports(statementSupported,database)).thenReturn(true);
  when(generatorFactory.validate(statementSupported,database)).thenReturn(new ValidationErrors());
  mockStatic(SqlGeneratorFactory.class);
  when(SqlGeneratorFactory.getInstance()).thenReturn(generatorFactory);
  ValidationErrors errors=new ExampleParamlessAbstractChange(){
    @Override public SqlStatement[] generateStatements(    Database database){
      return new SqlStatement[]{statement1Unsupported,statementSupported,statement2Unsupported};
    }
  }
.validate(database);
  assertEquals("Should only return one meessage, even through two statements failed",1,errors.getErrorMessages().size());
  assertEquals("exampleParamelessAbstractChange is not supported on mysql",errors.getErrorMessages().get(0));
}
