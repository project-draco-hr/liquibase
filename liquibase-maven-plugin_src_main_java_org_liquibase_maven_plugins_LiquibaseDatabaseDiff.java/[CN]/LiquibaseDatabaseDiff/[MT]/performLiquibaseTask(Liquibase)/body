{
  ClassLoader cl=null;
  try {
    cl=getClassLoaderIncludingProjectClasspath();
    Thread.currentThread().setContextClassLoader(cl);
  }
 catch (  MojoExecutionException e) {
    throw new LiquibaseException("Could not create the class loader, " + e,e);
  }
  Database db=liquibase.getDatabase();
  Database referenceDatabase=CommandLineUtils.createDatabaseObject(cl,referenceUrl,referenceUsername,referencePassword,referenceDriver,referenceDefaultCatalogName,referenceDefaultSchemaName,outputDefaultCatalog,outputDefaultSchema,null,null,propertyProviderClass,null,null);
  getLog().info("Performing Diff on database " + db.toString());
  if (diffChangeLogFile != null) {
    try {
      DiffOutputControl diffOutputControl=new DiffOutputControl(diffIncludeCatalog,diffIncludeSchema,diffIncludeTablespace).addIncludedSchema(new CatalogAndSchema(referenceDefaultCatalogName,referenceDefaultSchemaName));
      if (diffExcludeObjects != null && diffIncludeObjects != null) {
        throw new UnexpectedLiquibaseException("Cannot specify both excludeObjects and includeObjects");
      }
      if (diffExcludeObjects != null) {
        diffOutputControl.setObjectChangeFilter(new StandardObjectChangeFilter(StandardObjectChangeFilter.FilterType.EXCLUDE,diffExcludeObjects));
      }
      if (diffIncludeObjects != null) {
        diffOutputControl.setObjectChangeFilter(new StandardObjectChangeFilter(StandardObjectChangeFilter.FilterType.INCLUDE,diffIncludeObjects));
      }
      CommandLineUtils.doDiffToChangeLog(diffChangeLogFile,referenceDatabase,db,diffOutputControl,StringUtils.trimToNull(diffTypes));
      getLog().info("Differences written to Change Log File, " + diffChangeLogFile);
    }
 catch (    IOException e) {
      throw new LiquibaseException(e);
    }
catch (    ParserConfigurationException e) {
      throw new LiquibaseException(e);
    }
  }
 else {
    CommandLineUtils.doDiff(referenceDatabase,db,StringUtils.trimToNull(diffTypes));
  }
}
