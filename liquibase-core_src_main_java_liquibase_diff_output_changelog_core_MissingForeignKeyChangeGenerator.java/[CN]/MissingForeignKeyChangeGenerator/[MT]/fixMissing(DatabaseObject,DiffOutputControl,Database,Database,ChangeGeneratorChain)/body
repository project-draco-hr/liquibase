{
  ForeignKey fk=(ForeignKey)missingObject;
  AddForeignKeyConstraintChange change=new AddForeignKeyConstraintChange();
  change.setConstraintName(fk.getName());
  CatalogAndSchema defaultSchema=referenceDatabase.getDefaultSchema();
  change.setReferencedTableName(fk.getPrimaryKeyTable().getName());
  if (control.getIncludeCatalog() || !defaultSchema.equals(((ForeignKey)missingObject).getPrimaryKeyTable().getSchema().toCatalogAndSchema(),referenceDatabase)) {
    change.setReferencedTableCatalogName(fk.getPrimaryKeyTable().getSchema().getCatalogName());
  }
  if (control.getIncludeSchema() || !defaultSchema.equals(((ForeignKey)missingObject).getPrimaryKeyTable().getSchema().toCatalogAndSchema(),referenceDatabase)) {
    change.setReferencedTableSchemaName(fk.getPrimaryKeyTable().getSchema().getName());
  }
  change.setReferencedColumnNames(StringUtils.join(fk.getPrimaryKeyColumns(),",",new StringUtils.StringUtilsFormatter<Column>(){
    @Override public String toString(    Column obj){
      return obj.getName();
    }
  }
));
  change.setBaseTableName(fk.getForeignKeyTable().getName());
  if (control.getIncludeCatalog()) {
    change.setBaseTableCatalogName(fk.getForeignKeyTable().getSchema().getCatalogName());
  }
  if (control.getIncludeSchema()) {
    change.setBaseTableSchemaName(fk.getForeignKeyTable().getSchema().getName());
  }
  change.setBaseColumnNames(StringUtils.join(fk.getForeignKeyColumns(),",",new StringUtils.StringUtilsFormatter<Column>(){
    @Override public String toString(    Column obj){
      return obj.getName();
    }
  }
));
  change.setDeferrable(fk.isDeferrable());
  change.setInitiallyDeferred(fk.isInitiallyDeferred());
  change.setOnUpdate(fk.getUpdateRule());
  change.setOnDelete(fk.getDeleteRule());
  Index backingIndex=fk.getBackingIndex();
  control.setAlreadyHandledMissing(backingIndex);
  return new Change[]{change};
}
