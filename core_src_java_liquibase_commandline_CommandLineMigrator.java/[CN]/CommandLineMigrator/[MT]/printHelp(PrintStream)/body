{
  stream.println("Usage: java -jar liquibase.jar [options] [command]");
  stream.println("");
  stream.println("Standard Commands:");
  stream.println(" migrate                        Updates database to current version");
  stream.println(" rollback <tag>                 Rolls back the database to the the state is was");
  stream.println("                                when the tag was applied");
  stream.println(" rollbackToDate <date/time>     Rolls back the database to the the state is was");
  stream.println("                                at the given date/time.");
  stream.println("                                Date Format: yyyy-MM-dd HH:mm:ss");
  stream.println(" rollbackCount <value>          Rolls back the last <value> change sets");
  stream.println("                                applied to the database");
  stream.println(" migrateSQL                     Writes SQL to update database to current");
  stream.println("                                version to STDOUT");
  stream.println(" rollbackSQL <tag>              Writes SQL to roll back the database to that");
  stream.println("                                state it was in when the tag was applied");
  stream.println("                                to STDOUT");
  stream.println(" rollbackToDateSQL <date/time>  Writes SQL to roll back the database to that");
  stream.println("                                state it was in at the given date/time version");
  stream.println("                                to STDOUT");
  stream.println(" rollbackCountSQL <value>       Writes SQL to roll back the last");
  stream.println("                                <value> change sets to STDOUT");
  stream.println("                                applied to the database");
  stream.println(" futureRollbackSQL              Writes SQL to roll back the database to the ");
  stream.println("                                current state after the changes in the ");
  stream.println("                                changeslog have been applied");
  stream.println(" generateChangeLog              Writes Change Log XML to copy the current state");
  stream.println("                                of the database to standard out");
  stream.println("");
  stream.println("Diff Commands");
  stream.println(" diff [diff parameters]          Writes description of differences");
  stream.println("                                 to standard out");
  stream.println(" diffChangeLog [diff parameters] Writes Change Log XML to update");
  stream.println("                                 the base database");
  stream.println("                                 to the target database to standard out");
  stream.println("");
  stream.println("Documentation Commands");
  stream.println(" dbDoc <outputDirectory>         Generates Javadoc-like documentation");
  stream.println("                                 based on current database and change log");
  stream.println("");
  stream.println("Maintenance Commands");
  stream.println(" tag <tag string>          'Tags' the current database state for future rollback");
  stream.println(" status [--verbose]        Outputs count (list if --verbose) of unrun changesets");
  stream.println(" validate                  Checks changelog for errors");
  stream.println(" clearCheckSums            Removes all saved checksums from database log.");
  stream.println("                           Useful for 'MD5Sum Check Failed' errors");
  stream.println(" changelogSyncSQL          Writes SQL to mark all changes as executed ");
  stream.println("                           in the database to STDOUT");
  stream.println(" listLocks                 Lists who currently has locks on the");
  stream.println("                           database changelog");
  stream.println(" releaseLocks              Releases all locks on the database changelog");
  stream.println(" dropAll                   Drop all database objects owned by user");
  stream.println("");
  stream.println("Required Parameters:");
  stream.println(" --changeLogFile=<path and filename>        Migration file");
  stream.println(" --username=<value>                         Database username");
  stream.println(" --password=<value>                         Database password");
  stream.println(" --url=<value>                              Database URL");
  stream.println("");
  stream.println("Optional Parameters:");
  stream.println(" --classpath=<value>                        Classpath containing");
  stream.println("                                            migration files and JDBC Driver");
  stream.println(" --driver=<jdbc.driver.ClassName>           Database driver class name");
  stream.println(" --contexts=<value>                         ChangeSet contexts to execute");
  stream.println(" --defaultsFile=</path/to/file.properties>  File with default option values");
  stream.println("                                            (default: ./liquibase.properties)");
  stream.println(" --includeSystemClasspath=<true|false>      Include the system classpath");
  stream.println("                                            in the LiquiBase classpath");
  stream.println("                                            (default: true)");
  stream.println(" --promptForNonLocalDatabase=<true|false>   Prompt if non-localhost");
  stream.println("                                            databases (default: false)");
  stream.println(" --logLevel=<level>                         Execution log level");
  stream.println("                                            (finest, finer, fine, info,");
  stream.println("                                            warning, severe)");
  stream.println(" --currentDateTimeFunction=<value>          Overrides current date time function");
  stream.println("                                            used in SQL.");
  stream.println("                                            Useful for unsupported databases");
  stream.println(" --help                                     Prints this message");
  stream.println(" --version                                  Prints this version information");
  stream.println("");
  stream.println("Required Diff Parameters:");
  stream.println(" --baseUsername=<value>                     Base Database username");
  stream.println(" --basePassword=<value>                     Base Database password");
  stream.println(" --baseUrl=<value>                          Base Database URL");
  stream.println("");
  stream.println("Optional Diff Parameters:");
  stream.println(" --baseDriver=<jdbc.driver.ClassName>       Base Database driver class name");
  stream.println("");
  stream.println("Default value for parameters can be stored in a file called");
  stream.println("'liquibase.properties' that is read from the current working directory.");
  stream.println("");
  stream.println("Full documentation is available at");
  stream.println("http://www.liquibase.org/manual/latest/command_line_migrator.html");
  stream.println("");
}
