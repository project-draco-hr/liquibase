{
  if ("help".equalsIgnoreCase(command)) {
    printHelp(System.out);
    return;
  }
  if ("finest".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.FINEST);
  }
 else   if ("finer".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.FINER);
  }
 else   if ("fine".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.FINE);
  }
 else   if ("info".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.INFO);
  }
 else   if ("warning".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.WARNING);
  }
 else   if ("severe".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.SEVERE);
  }
 else   if ("off".equalsIgnoreCase(logLevel)) {
    Logger.getLogger(Migrator.DEFAULT_LOG_NAME).setLevel(Level.OFF);
  }
 else {
    throw new CommandLineParsingException("Unknown log level: " + logLevel);
  }
  FileSystemFileOpener fsOpener=new FileSystemFileOpener();
  CommandLineFileOpener clOpener=new CommandLineFileOpener(classLoader);
  Migrator migrator=new Migrator(changeLogFile,new CompositeFileOpener(fsOpener,clOpener));
  Driver driver;
  try {
    if (this.driver == null) {
      this.driver=DatabaseFactory.getInstance().findDefaultDriver(url);
    }
    if (this.driver == null) {
      throw new RuntimeException("Driver class was not specified and could not be determined from the url");
    }
    driver=(Driver)Class.forName(this.driver,true,classLoader).newInstance();
  }
 catch (  Exception e) {
    throw new RuntimeException("Cannot get database driver: " + e.getMessage());
  }
  Properties info=new Properties();
  info.put("user",username);
  if (password != null) {
    info.put("password",password);
  }
  Connection connection=driver.connect(url,info);
  if (connection == null) {
    throw new JDBCException("Connection could not be created to " + url + " with driver "+ driver.getClass().getName()+ ".  Possibly the wrong driver for the given database URL");
  }
  if ("diff".equalsIgnoreCase(command)) {
    doDiff(connection,createConnectionFromCommandParams(commandParams));
    return;
  }
 else   if ("diffChangeLog".equalsIgnoreCase(command)) {
    doDiffToChangeLog(connection,createConnectionFromCommandParams(commandParams));
    return;
  }
 else   if ("generateChangeLog".equalsIgnoreCase(command)) {
    doGenerateChangeLog(connection);
    return;
  }
  try {
    migrator.setContexts(contexts);
    migrator.init(connection);
    if ("listLocks".equalsIgnoreCase(command)) {
      DatabaseChangeLogLock[] locks=migrator.listLocks();
      System.out.println("Database change log locks for " + migrator.getDatabase().getConnectionUsername() + "@"+ migrator.getDatabase().getConnectionURL());
      if (locks.length == 0) {
        System.out.println(" - No locks");
      }
      for (      DatabaseChangeLogLock lock : locks) {
        System.out.println(" - " + lock.getLockedBy() + " at "+ DateFormat.getDateTimeInstance().format(lock.getLockGranted()));
      }
      return;
    }
 else     if ("releaseLocks".equalsIgnoreCase(command)) {
      migrator.forceReleaseLock();
      System.out.println("Successfully released all database change log locks for " + migrator.getDatabase().getConnectionUsername() + "@"+ migrator.getDatabase().getConnectionURL());
      return;
    }
 else     if ("tag".equalsIgnoreCase(command)) {
      migrator.tag(commandParams.iterator().next());
      System.out.println("Successfully tagged " + migrator.getDatabase().getConnectionUsername() + "@"+ migrator.getDatabase().getConnectionURL());
      return;
    }
 else     if ("dropAll".equals(command)) {
      migrator.dropAll();
      System.out.println("All objects dropped from " + migrator.getDatabase().getConnectionUsername() + "@"+ migrator.getDatabase().getConnectionURL());
      return;
    }
 else     if ("status".equalsIgnoreCase(command)) {
      boolean runVerbose=false;
      if (commandParams.contains("--verbose")) {
        runVerbose=true;
      }
      List<ChangeSet> unrunChangeSets=migrator.listUnrunChangeSets();
      System.out.println(unrunChangeSets.size() + " change sets have not been applied to " + migrator.getDatabase().getConnectionUsername()+ "@"+ migrator.getDatabase().getConnectionURL());
      if (runVerbose) {
        for (        ChangeSet changeSet : unrunChangeSets) {
          System.out.println("     " + changeSet.toString(false));
        }
      }
      return;
    }
 else     if ("validate".equalsIgnoreCase(command)) {
      try {
        migrator.validate();
      }
 catch (      ValidationFailedException e) {
        e.printDescriptiveError(System.out);
        return;
      }
      System.out.println("No validation errors found");
      return;
    }
 else     if ("clearCheckSums".equalsIgnoreCase(command)) {
      migrator.clearCheckSums();
      return;
    }
 else     if ("dbdoc".equalsIgnoreCase(command)) {
      migrator.generateDocumentation();
      return;
    }
    DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    try {
      if ("migrate".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.EXECUTE_MODE);
      }
 else       if ("changelogSyncSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.OUTPUT_CHANGELOG_ONLY_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
      }
 else       if ("migrateSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.OUTPUT_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
      }
 else       if ("rollback".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.EXECUTE_ROLLBACK_MODE);
        if (commandParams == null) {
          throw new CommandLineParsingException("rollback requires a rollback tag");
        }
        migrator.setRollbackToTag(commandParams.iterator().next());
      }
 else       if ("rollbackToDate".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.EXECUTE_ROLLBACK_MODE);
        if (commandParams == null) {
          throw new CommandLineParsingException("rollback requires a rollback date");
        }
        migrator.setRollbackToDate(dateFormat.parse(commandParams.iterator().next()));
      }
 else       if ("rollbackCount".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.EXECUTE_ROLLBACK_MODE);
        migrator.setRollbackCount(Integer.parseInt(commandParams.iterator().next()));
      }
 else       if ("rollbackSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.OUTPUT_ROLLBACK_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
        if (commandParams == null) {
          throw new CommandLineParsingException("rollbackSQL requires a rollback tag");
        }
        migrator.setRollbackToTag(commandParams.iterator().next());
      }
 else       if ("rollbackToDateSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.OUTPUT_ROLLBACK_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
        if (commandParams == null) {
          throw new CommandLineParsingException("rollbackToDateSQL requires a rollback date");
        }
        migrator.setRollbackToDate(dateFormat.parse(commandParams.iterator().next()));
      }
 else       if ("rollbackCountSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.OUTPUT_ROLLBACK_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
        migrator.setRollbackCount(Integer.valueOf(commandParams.iterator().next()));
      }
 else       if ("futureRollbackSQL".equalsIgnoreCase(command)) {
        migrator.setMode(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE);
        migrator.setOutputSQLWriter(getOutputWriter());
      }
 else {
        throw new CommandLineParsingException("Unknown command: " + command);
      }
    }
 catch (    ParseException e) {
      throw new CommandLineParsingException("Unexpected date/time format.  Use 'yyyy-MM-dd HH:mm:ss'");
    }
    migrator.migrate();
  }
  finally {
    connection.close();
  }
}
