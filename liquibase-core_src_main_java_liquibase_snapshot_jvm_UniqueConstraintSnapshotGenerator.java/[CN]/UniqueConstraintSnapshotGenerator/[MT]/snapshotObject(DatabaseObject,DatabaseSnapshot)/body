{
  Database database=snapshot.getDatabase();
  UniqueConstraint exampleConstraint=(UniqueConstraint)example;
  Table table=exampleConstraint.getTable();
  Schema schema=table.getSchema();
  String name=example.getName();
  List<Map> metadata=ExecutorService.getInstance().getExecutor(database).queryForList(new RawSqlStatement("select const.CONSTRAINT_NAME, COLUMN_NAME " + "from information_schema.table_constraints const " + "join information_schema.key_column_usage col "+ "on const.constraint_schema=col.constraint_schema "+ "and const.table_name=col.table_name "+ "and const.constraint_name=col.constraint_name "+ "where const.constraint_schema='" + database.correctObjectName(schema.getCatalogName(),Catalog.class) + "' "+ "and const.table_name='"+ database.correctObjectName(table.getName(),Table.class)+ "'"+ "and const.constraint_name='"+ database.correctObjectName(name,UniqueConstraint.class)+ "'"+ "order by ordinal_position"));
  if (metadata.size() == 0) {
    return null;
  }
  UniqueConstraint constraint=new UniqueConstraint();
  constraint.setTable(table);
  constraint.setName((String)metadata.get(0).get("CONSTRAINT_NAME"));
  for (  Map<String,Object> col : metadata) {
    constraint.getColumns().add((String)col.get("COLUMN_NAME"));
  }
  Index exampleIndex=new Index().setTable(constraint.getTable());
  exampleIndex.getColumns().addAll(constraint.getColumns());
  constraint.setBackingIndex(exampleIndex);
  return constraint;
}
