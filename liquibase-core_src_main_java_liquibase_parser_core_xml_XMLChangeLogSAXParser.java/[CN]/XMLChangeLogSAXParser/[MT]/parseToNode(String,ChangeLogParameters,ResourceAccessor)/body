{
  InputStream inputStream=null;
  try {
    SAXParser parser=saxParserFactory.newSAXParser();
    try {
      parser.setProperty("http://java.sun.com/xml/jaxp/properties/schemaLanguage","http://www.w3.org/2001/XMLSchema");
    }
 catch (    SAXNotRecognizedException e) {
    }
catch (    SAXNotSupportedException e) {
    }
    XMLReader xmlReader=parser.getXMLReader();
    LiquibaseEntityResolver resolver=new LiquibaseEntityResolver(this);
    resolver.useResoureAccessor(resourceAccessor,FilenameUtils.getFullPath(physicalChangeLogLocation));
    xmlReader.setEntityResolver(resolver);
    xmlReader.setErrorHandler(new ErrorHandler(){
      @Override public void warning(      SAXParseException exception) throws SAXException {
        LogFactory.getLogger().warning(exception.getMessage());
        throw exception;
      }
      @Override public void error(      SAXParseException exception) throws SAXException {
        LogFactory.getLogger().severe(exception.getMessage());
        throw exception;
      }
      @Override public void fatalError(      SAXParseException exception) throws SAXException {
        LogFactory.getLogger().severe(exception.getMessage());
        throw exception;
      }
    }
);
    inputStream=StreamUtil.singleInputStream(physicalChangeLogLocation,resourceAccessor);
    if (inputStream == null) {
      throw new ChangeLogParseException(physicalChangeLogLocation + " does not exist");
    }
    XMLChangeLogSAXHandler contentHandler=new XMLChangeLogSAXHandler(physicalChangeLogLocation,resourceAccessor,changeLogParameters);
    xmlReader.setContentHandler(contentHandler);
    xmlReader.parse(new InputSource(new UtfBomStripperInputStream(inputStream)));
    return contentHandler.getDatabaseChangeLogTree();
  }
 catch (  ChangeLogParseException e) {
    throw e;
  }
catch (  IOException e) {
    throw new ChangeLogParseException("Error Reading Migration File: " + e.getMessage(),e);
  }
catch (  SAXParseException e) {
    throw new ChangeLogParseException("Error parsing line " + e.getLineNumber() + " column "+ e.getColumnNumber()+ " of "+ physicalChangeLogLocation+ ": "+ e.getMessage(),e);
  }
catch (  SAXException e) {
    Throwable parentCause=e.getException();
    while (parentCause != null) {
      if (parentCause instanceof ChangeLogParseException) {
        throw ((ChangeLogParseException)parentCause);
      }
      parentCause=parentCause.getCause();
    }
    String reason=e.getMessage();
    String causeReason=null;
    if (e.getCause() != null) {
      causeReason=e.getCause().getMessage();
    }
    if (reason == null) {
      if (causeReason != null) {
        reason=causeReason;
      }
 else {
        reason="Unknown Reason";
      }
    }
    throw new ChangeLogParseException("Invalid Migration File: " + reason,e);
  }
catch (  Exception e) {
    throw new ChangeLogParseException(e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException e) {
      }
    }
  }
}
