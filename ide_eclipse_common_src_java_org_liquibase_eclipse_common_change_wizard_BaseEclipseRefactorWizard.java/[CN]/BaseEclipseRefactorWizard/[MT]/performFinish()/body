{
  try {
    ProgressMonitorDialog pd=new ProgressMonitorDialog(this.getShell());
    pd.run(false,false,new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        monitor.beginTask("Refactoring Database",100);
        try {
          Liquibase liquibase=new Liquibase(LiquibasePreferences.getCurrentChangeLog(),new EclipseFileOpener(),DatabaseFactory.getInstance().findCorrectDatabaseImplementation(getConnection()));
          monitor.subTask("Checking Control Tables");
          liquibase.getDatabase().checkDatabaseChangeLogTable();
          liquibase.getDatabase().checkDatabaseChangeLogLockTable();
          monitor.worked(25);
          monitor.subTask("Executing Change");
          DatabaseChangeLog changeLog=new DatabaseChangeLog(LiquibasePreferences.getCurrentChangeLog());
          ChangeSet changeSet=new ChangeSet(metaDataPage.getId(),metaDataPage.getAuthor(),metaDataPage.isAlwaysRun(),metaDataPage.isRunOnChange(),changeLog.getFilePath(),changeLog.getPhysicalFilePath(),StringUtils.trimToNull(metaDataPage.getContext()),StringUtils.trimToNull(metaDataPage.getDbms()));
          changeSet.setComments(metaDataPage.getComments());
          for (          Change change : createChanges()) {
            changeSet.addChange(change);
          }
          liquibase.database.Database liquibaseDatabase=DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection);
          Statement statement=connection.createStatement();
          for (          Change change : changeSet.getChanges()) {
            for (            SqlStatement sql : change.generateStatements(liquibaseDatabase)) {
              statement.execute(sql.getSqlStatement(liquibaseDatabase));
            }
          }
          statement.close();
          monitor.worked(25);
          monitor.subTask("Marking Change Set As Ran");
          liquibase.getDatabase().markChangeSetAsRan(changeSet);
          monitor.worked(25);
          monitor.subTask("Writing to Change Log");
          DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
          DocumentBuilder documentBuilder=factory.newDocumentBuilder();
          documentBuilder.setEntityResolver(new LiquibaseSchemaResolver());
          File file=new File(LiquibasePreferences.getCurrentChangeLogFileName());
          Document doc;
          if (!file.exists() || file.length() == 0) {
            doc=documentBuilder.newDocument();
            Element changeLogElement=doc.createElement("databaseChangeLog");
            changeLogElement.setAttribute("xmlns","http://www.liquibase.org/xml/ns/dbchangelog/1.2");
            changeLogElement.setAttribute("xmlns:xsi","http://www.w3.org/2001/XMLSchema-instance");
            changeLogElement.setAttribute("xsi:schemaLocation","http://www.liquibase.org/xml/ns/dbchangelog/1.2 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.2.xsd");
            doc.appendChild(changeLogElement);
          }
 else {
            doc=documentBuilder.parse(file);
          }
          doc.getDocumentElement().appendChild(changeSet.createNode(doc));
          FileOutputStream out=new FileOutputStream(file);
          new DefaultXmlWriter().write(doc,out);
          monitor.done();
        }
 catch (        Exception e) {
          throw new InvocationTargetException(e);
        }
      }
    }
);
    refresh();
  }
 catch (  Throwable e) {
    e.printStackTrace();
    IStatus status=new OperationStatus(IStatus.ERROR,LiquibasePreferences.PLUGIN_ID,1,"Error Creating Change: " + e.getMessage(),e);
    ErrorDialog.openError(this.getShell(),"Error","Database Change Error",status);
    return true;
  }
  return true;
}
