{
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  AddColumnChange addNewColumnChange=new AddColumnChange();
  addNewColumnChange.setSchemaName(schemaName);
  addNewColumnChange.setTableName(getTableName());
  AddColumnConfig columnConfig=new AddColumnConfig();
  columnConfig.setName(getFinalColumnName());
  columnConfig.setType(getFinalColumnType());
  addNewColumnChange.addColumn(columnConfig);
  statements.addAll(Arrays.asList(addNewColumnChange.generateStatements(database)));
  String updateStatement="UPDATE " + database.escapeTableName(getCatalogName(),getSchemaName(),getTableName()) + " SET "+ database.escapeObjectName(getFinalColumnName(),Column.class)+ " = "+ database.getConcatSql(database.escapeObjectName(getColumn1Name(),Column.class),"'" + getJoinString() + "'",database.escapeObjectName(getColumn2Name(),Column.class));
  statements.add(new RawSqlStatement(updateStatement));
  if (database instanceof SQLiteDatabase) {
    AlterTableVisitor rename_alter_visitor=new AlterTableVisitor(){
      @Override public ColumnConfig[] getColumnsToAdd(){
        ColumnConfig[] new_columns=new ColumnConfig[1];
        ColumnConfig new_column=new ColumnConfig();
        new_column.setName(getFinalColumnName());
        new_column.setType(getFinalColumnType());
        new_columns[0]=new_column;
        return new_columns;
      }
      @Override public boolean copyThisColumn(      ColumnConfig column){
        return !(column.getName().equals(getColumn1Name()) || column.getName().equals(getColumn2Name()));
      }
      @Override public boolean createThisColumn(      ColumnConfig column){
        return !(column.getName().equals(getColumn1Name()) || column.getName().equals(getColumn2Name()));
      }
      @Override public boolean createThisIndex(      Index index){
        return !(index.getColumnNames().contains(getColumn1Name()) || index.getColumnNames().contains(getColumn2Name()));
      }
    }
;
    try {
      statements.addAll(SQLiteDatabase.getAlterTableStatements(rename_alter_visitor,database,getCatalogName(),getSchemaName(),getTableName()));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    DropColumnChange dropColumn1Change=new DropColumnChange();
    dropColumn1Change.setSchemaName(schemaName);
    dropColumn1Change.setTableName(getTableName());
    dropColumn1Change.setColumnName(getColumn1Name());
    statements.addAll(Arrays.asList(dropColumn1Change.generateStatements(database)));
    DropColumnChange dropColumn2Change=new DropColumnChange();
    dropColumn2Change.setSchemaName(schemaName);
    dropColumn2Change.setTableName(getTableName());
    dropColumn2Change.setColumnName(getColumn2Name());
    statements.addAll(Arrays.asList(dropColumn2Change.generateStatements(database)));
  }
  return statements.toArray(new SqlStatement[statements.size()]);
}
