{
  if (connectionsAttempted.containsKey(url)) {
    return connectionsByUrl.get(url);
  }
  connectionsAttempted.put(url,Boolean.TRUE);
  String username=getUsername(url);
  String password=getPassword(url);
  JUnitJDBCDriverClassLoader jdbcDriverLoader=JUnitJDBCDriverClassLoader.getInstance();
  final Driver driver=(Driver)Class.forName(DatabaseFactory.getInstance().findDefaultDriver(url),true,jdbcDriverLoader).newInstance();
  Properties info=new Properties();
  info.put("user",username);
  if (password != null) {
    info.put("password",password);
  }
  final Connection connection;
  try {
    connection=driver.connect(url,info);
  }
 catch (  SQLException e) {
    System.out.println("Could not connect to " + url + ": Will not test against");
    return null;
  }
  if (connection == null) {
    throw new JDBCException("Connection could not be created to " + url + " with driver "+ driver.getClass().getName()+ ".  Possibly the wrong driver for the given database URL");
  }
  connection.setAutoCommit(false);
  try {
    if (url.startsWith("jdbc:hsql")) {
      connection.createStatement().execute("CREATE SCHEMA " + ALT_SCHEMA + " AUTHORIZATION DBA");
    }
 else     if (url.startsWith("jdbc:sqlserver") || url.startsWith("jdbc:postgresql") || url.startsWith("jdbc:h2")) {
      connection.createStatement().execute("CREATE SCHEMA " + ALT_SCHEMA);
    }
    if (!connection.getAutoCommit()) {
      connection.commit();
    }
  }
 catch (  SQLException e) {
    ;
  }
  connectionsByUrl.put(url,connection);
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      try {
        try {
          if (!connection.getAutoCommit()) {
            connection.rollback();
          }
        }
 catch (        SQLException e) {
          ;
        }
        connection.close();
      }
 catch (      SQLException e) {
        System.out.println("Could not close " + url);
        e.printStackTrace();
      }
    }
  }
));
  return connection;
}
