{
  if (connectionsAttempted.containsKey(url)) {
    return connectionsByUrl.get(url);
  }
  connectionsAttempted.put(url,Boolean.TRUE);
  if (System.getProperty(TEST_DATABASES_PROPERTY) != null) {
    boolean shouldTest=false;
    String[] databasesToTest=System.getProperty(TEST_DATABASES_PROPERTY).split("\\s*,\\s*");
    for (    String database : databasesToTest) {
      if (url.indexOf(database) >= 0) {
        shouldTest=true;
      }
    }
    if (!shouldTest) {
      System.out.println("test.databases system property forbids testing against " + url);
      return null;
    }
  }
  Connection connection=openDatabaseConnection(url);
  if (connection == null) {
    return null;
  }
  Database database=DatabaseFactory.getInstance().findCorrectDatabaseImplementation(connection);
  final DatabaseConnection databaseConnection=database.getConnection();
  if (databaseConnection.getAutoCommit()) {
    databaseConnection.setAutoCommit(false);
  }
  try {
    if (url.startsWith("jdbc:hsql")) {
      databaseConnection.createStatement().execute("CREATE SCHEMA " + ALT_SCHEMA + " AUTHORIZATION DBA");
    }
 else     if (url.startsWith("jdbc:sqlserver") || url.startsWith("jdbc:postgresql") || url.startsWith("jdbc:h2")) {
      databaseConnection.createStatement().execute("CREATE SCHEMA " + ALT_SCHEMA);
    }
    if (!databaseConnection.getAutoCommit()) {
      databaseConnection.commit();
    }
  }
 catch (  SQLException e) {
    ;
  }
 finally {
    databaseConnection.rollback();
  }
  connectionsByUrl.put(url,databaseConnection);
  Runtime.getRuntime().addShutdownHook(new Thread(new Runnable(){
    public void run(){
      try {
        try {
          if (!databaseConnection.getAutoCommit()) {
            databaseConnection.rollback();
          }
        }
 catch (        SQLException e) {
          ;
        }
        databaseConnection.close();
      }
 catch (      SQLException e) {
        System.out.println("Could not close " + url);
        e.printStackTrace();
      }
    }
  }
));
  return databaseConnection;
}
