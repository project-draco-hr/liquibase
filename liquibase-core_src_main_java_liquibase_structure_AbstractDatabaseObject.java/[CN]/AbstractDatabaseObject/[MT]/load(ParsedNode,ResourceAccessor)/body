{
  for (  ParsedNode child : parsedNode.getChildren()) {
    String name=child.getName();
    if (name.equals("snapshotId")) {
      this.snapshotId=child.getValue(String.class);
      continue;
    }
    Class propertyType=ObjectUtil.getPropertyType(this,name);
    if (propertyType != null && Collection.class.isAssignableFrom(propertyType) && !(child.getValue() instanceof Collection)) {
      if (this.attributes.get(name) == null) {
        this.setAttribute(name,new ArrayList<Column>());
      }
      this.getAttribute(name,List.class).add(child.getValue());
    }
 else {
      Object childValue=child.getValue();
      if (childValue != null && childValue instanceof String) {
        Matcher matcher=Pattern.compile("(.*)#\\{(.*)\\}").matcher((String)childValue);
        if (matcher.matches()) {
          String stringValue=matcher.group(1);
          try {
            Class<?> aClass=Class.forName(matcher.group(2));
            if (Date.class.isAssignableFrom(aClass)) {
              Date date=new ISODateFormat().parse(stringValue);
              childValue=aClass.getConstructor(long.class).newInstance(date.getTime());
            }
 else             if (Enum.class.isAssignableFrom(aClass)) {
              childValue=Enum.valueOf((Class<? extends Enum>)aClass,stringValue);
            }
 else {
              childValue=aClass.getConstructor(String.class).newInstance(stringValue);
            }
          }
 catch (          Exception e) {
            throw new UnexpectedLiquibaseException(e);
          }
        }
      }
      this.attributes.put(name,childValue);
    }
  }
}
