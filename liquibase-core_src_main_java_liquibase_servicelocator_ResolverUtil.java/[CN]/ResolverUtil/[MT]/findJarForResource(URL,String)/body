{
  log.debug("Find JAR URL: " + url);
  try {
    for (; ; ) {
      url=new URL(url.getFile());
      log.debug("Inner URL: " + url);
    }
  }
 catch (  MalformedURLException e) {
  }
  StringBuilder jarUrl=new StringBuilder(url.toExternalForm());
  int index=jarUrl.lastIndexOf(".jar");
  if (index >= 0) {
    jarUrl.setLength(index + 4);
    log.debug("Extracted JAR URL: " + jarUrl);
  }
 else {
    log.debug("Not a JAR: " + jarUrl);
    return null;
  }
  try {
    URL testUrl=new URL(jarUrl.toString());
    if (isJar(testUrl)) {
      return testUrl;
    }
 else {
      log.debug("Not a JAR: " + jarUrl);
      jarUrl.replace(0,jarUrl.length(),testUrl.getFile());
      File file=new File(jarUrl.toString());
      if (!file.exists()) {
        try {
          file=new File(URLDecoder.decode(jarUrl.toString(),"UTF-8"));
        }
 catch (        UnsupportedEncodingException e) {
          throw new RuntimeException(e);
        }
      }
      if (file.exists()) {
        log.debug("Trying real file: " + file.getAbsolutePath());
        testUrl=file.toURI().toURL();
        if (isJar(testUrl)) {
          return testUrl;
        }
      }
    }
  }
 catch (  MalformedURLException e) {
    log.warning("Invalid JAR URL: " + jarUrl);
  }
  log.debug("Not a JAR: " + jarUrl);
  return null;
}
