{
  if (pathsByUrl.containsKey(url)) {
    return pathsByUrl.get(url);
  }
  log.debug("Listing classes in " + url);
  InputStream is=null;
  try {
    List<String> resources=new ArrayList<String>();
    URL jarUrl=findJarForResource(url,path);
    if (jarUrl != null) {
      is=jarUrl.openStream();
      resources=listClassResources(new JarInputStream(is),path);
    }
 else {
      List<String> children=new ArrayList<String>();
      try {
        if (isJar(url)) {
          is=url.openStream();
          JarInputStream jarInput=new JarInputStream(is);
          for (JarEntry entry; (entry=jarInput.getNextJarEntry()) != null; ) {
            log.debug("Jar entry: " + entry.getName());
            if (isRelevantResource(entry.getName())) {
              children.add(entry.getName());
            }
          }
        }
 else {
          is=url.openStream();
          BufferedReader reader=new BufferedReader(new InputStreamReader(is));
          for (String line; (line=reader.readLine()) != null; ) {
            log.debug("Reader entry: " + line);
            if (isRelevantResource(line)) {
              children.add(line);
            }
          }
        }
      }
 catch (      FileNotFoundException e) {
        if ("file".equals(url.getProtocol())) {
          File file=new File(url.getFile());
          log.debug("Listing directory " + file.getAbsolutePath());
          if (file.isDirectory()) {
            children=Arrays.asList(file.list(new FilenameFilter(){
              public boolean accept(              File dir,              String name){
                return isRelevantResource(name);
              }
            }
));
          }
        }
 else {
          throw e;
        }
      }
      String prefix=url.toExternalForm();
      if (!prefix.endsWith("/"))       prefix=prefix + "/";
      for (      String child : children) {
        String resourcePath=path + "/" + child;
        if (child.endsWith(".class")) {
          log.debug("Found class file: " + resourcePath);
          resources.add(resourcePath);
        }
 else {
          URL childUrl=new URL(prefix + child);
          resources.addAll(listClassResources(childUrl,resourcePath));
        }
      }
    }
    pathsByUrl.put(url,resources);
    return resources;
  }
  finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
}
