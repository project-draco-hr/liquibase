{
  List<SqlStatement> statements=new ArrayList<SqlStatement>();
  String schemaName=getSchemaName() == null ? database.getDefaultSchemaName() : getSchemaName();
  if (defaultNullValue != null) {
    statements.add(new UpdateStatement(schemaName,getTableName()).addNewColumnValue(getColumnName(),getDefaultNullValue()).setWhereClause(getColumnName() + " IS NULL"));
  }
  if (database instanceof SQLiteDatabase) {
    if (defaultNullValue == null) {
      List<Map> null_rows=null;
      try {
        null_rows=new JdbcTemplate(database).queryForList(new RawSqlStatement("SELECT * FROM `" + database.escapeTableName(getSchemaName(),getTableName()) + "` WHERE `"+ getColumnName()+ "` IS NULL;"));
      }
 catch (      JDBCException e) {
        e.printStackTrace();
      }
      if (null_rows.size() > 0) {
        throw new UnsupportedChangeException("Failed to add a Not-Null-Constraint because " + "some values are null. Use the " + "defaultNullValue attribute to define default "+ "values for the existing null values.");
      }
    }
    AlterTableVisitor rename_alter_visitor=new AlterTableVisitor(){
      public ColumnConfig[] getColumnsToAdd(){
        return new ColumnConfig[0];
      }
      public boolean copyThisColumn(      ColumnConfig column){
        return true;
      }
      public boolean createThisColumn(      ColumnConfig column){
        if (column.getName().equals(getColumnName())) {
          column.getConstraints().setNullable(false);
        }
        return true;
      }
      public boolean createThisIndex(      Index index){
        return true;
      }
    }
;
    try {
      statements.addAll(SQLiteDatabase.getAlterTableStatements(rename_alter_visitor,database,getSchemaName(),getTableName()));
    }
 catch (    JDBCException e) {
      e.printStackTrace();
    }
  }
 else {
    statements.add(new SetNullableStatement(schemaName,getTableName(),getColumnName(),getColumnDataType(),false));
    if (database instanceof DB2Database) {
      statements.add(new ReorganizeTableStatement(schemaName,getTableName()));
    }
  }
  return statements.toArray(new SqlStatement[statements.size()]);
}
