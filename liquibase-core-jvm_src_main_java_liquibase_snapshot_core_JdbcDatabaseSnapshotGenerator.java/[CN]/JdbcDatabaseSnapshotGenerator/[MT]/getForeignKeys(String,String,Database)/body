{
  List<ForeignKey> fkList=new ArrayList<ForeignKey>();
  try {
    String dbCatalog=database.convertRequestedSchemaToCatalog(schemaName);
    String dbSchema=database.convertRequestedSchemaToSchema(schemaName);
    ResultSet rs=getMetaData(database).getImportedKeys(dbCatalog,dbSchema,convertTableNameToDatabaseTableName(foreignKeyTableName));
    while (rs.next()) {
      ForeignKeyInfo fkInfo=new ForeignKeyInfo();
      fkInfo.setFkName(convertFromDatabaseName(rs.getString("FK_NAME")));
      fkInfo.setFkSchema(convertFromDatabaseName(rs.getString("FKTABLE_SCHEM")));
      fkInfo.setFkTableName(convertFromDatabaseName(rs.getString("FKTABLE_NAME")));
      fkInfo.setFkColumn(convertFromDatabaseName(rs.getString("FKCOLUMN_NAME")));
      fkInfo.setPkTableName(convertFromDatabaseName(rs.getString("PKTABLE_NAME")));
      fkInfo.setPkColumn(convertFromDatabaseName(rs.getString("PKCOLUMN_NAME")));
      fkInfo.setKeySeq(rs.getInt("KEY_SEQ"));
      ForeignKeyConstraintType updateRule=convertToForeignKeyConstraintType(rs.getInt("UPDATE_RULE"));
      if (rs.wasNull()) {
        updateRule=null;
      }
      fkInfo.setUpdateRule(updateRule);
      ForeignKeyConstraintType deleteRule=convertToForeignKeyConstraintType(rs.getInt("DELETE_RULE"));
      if (rs.wasNull()) {
        deleteRule=null;
      }
      fkInfo.setDeleteRule(deleteRule);
      fkInfo.setDeferrablility(rs.getShort("DEFERRABILITY"));
      fkList.add(generateForeignKey(fkInfo,database,fkList));
    }
    rs.close();
    return fkList;
  }
 catch (  Exception e) {
    throw new DatabaseException(e);
  }
}
