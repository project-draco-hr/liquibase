{
  Statement statement=null;
  Connection connection=getConnection();
  ResultSet rs=null;
  changeLogLockTableExists=true;
  try {
    rs=connection.getMetaData().getTables(getCatalogName(),getSchemaName(),getDatabaseChangeLogLockTableName(),new String[]{"TABLE"});
    if (!rs.next()) {
      String createTableStatement=getCreateChangeLogLockSQL();
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        statement=connection.createStatement();
        statement.executeUpdate(createTableStatement);
        connection.commit();
        log.info("Created database lock table with name: DATABASECHANGELOGLOCK");
      }
 else {
        if (!migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
          if (!outputtedLockWarning) {
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + "-----------------------------------------------------------------------------------------------" + StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + " DATABASECHANGELOGLOCK table does not exist." + StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + " Race conditions may cause a corrupted sql script." + StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + " Consider running: " + StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + " " + getCreateChangeLogLockSQL()+ ";"+ StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + " " + getChangeLogLockInsertSQL()+ ";"+ StreamUtil.getLineSeparator());
            migrator.getOutputSQLWriter().write(migrator.getDatabase().getLineComment() + "-----------------------------------------------------------------------------------------------" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
            outputtedLockWarning=true;
          }
          migrator.getOutputSQLWriter().append(createTableStatement + ";" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
        }
        changeLogLockTableExists=false;
      }
    }
    rs.close();
    if (statement != null) {
      statement.close();
    }
    String insertRowStatment=getChangeLogLockInsertSQL();
    if (changeLogLockTableExists) {
      statement=connection.createStatement();
      rs=statement.executeQuery("select * from DATABASECHANGELOGLOCK where id=1".toUpperCase());
      if (!rs.next()) {
        if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
          statement=connection.createStatement();
          statement.executeUpdate(insertRowStatment);
          connection.commit();
          log.info("Created database lock table with name: DATABASECHANGELOGLOCK");
        }
 else {
          migrator.getOutputSQLWriter().append(insertRowStatment + ";" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
        }
        rs.close();
      }
    }
 else {
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        throw new JDBCException("Change log lock table does not exist");
      }
 else {
        migrator.getOutputSQLWriter().append(insertRowStatment + ";" + StreamUtil.getLineSeparator()+ StreamUtil.getLineSeparator());
      }
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}
