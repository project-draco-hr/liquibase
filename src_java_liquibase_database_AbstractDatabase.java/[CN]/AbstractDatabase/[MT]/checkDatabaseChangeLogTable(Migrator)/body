{
  Statement statement=null;
  Connection connection=getConnection();
  ResultSet checkTableRS=null;
  ResultSet checkColumnsRS=null;
  changeLogTableExists=true;
  List<String> statementsToExecute=new ArrayList<String>();
  boolean wroteToOutput=false;
  try {
    checkTableRS=connection.getMetaData().getTables(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),new String[]{"TABLE"});
    if (checkTableRS.next()) {
      checkColumnsRS=connection.getMetaData().getColumns(getCatalogName(),getSchemaName(),getDatabaseChangeLogTableName(),null);
      boolean hasDescription=false;
      boolean hasComments=false;
      boolean hasTag=false;
      boolean hasLiquibase=false;
      while (checkColumnsRS.next()) {
        String columnName=checkColumnsRS.getString("COLUMN_NAME");
        if ("DESCRIPTION".equalsIgnoreCase(columnName)) {
          hasDescription=true;
        }
 else         if ("COMMENTS".equalsIgnoreCase(columnName)) {
          hasComments=true;
        }
 else         if ("TAG".equalsIgnoreCase(columnName)) {
          hasTag=true;
        }
 else         if ("LIQUIBASE".equalsIgnoreCase(columnName)) {
          hasLiquibase=true;
        }
      }
      if (!hasDescription) {
        statementsToExecute.add("ALTER TABLE DATABASECHANGELOG ADD DESCRIPTION VARCHAR(255)");
      }
      if (!hasTag) {
        statementsToExecute.add("ALTER TABLE DATABASECHANGELOG ADD TAG VARCHAR(255)");
      }
      if (!hasComments) {
        statementsToExecute.add("ALTER TABLE DATABASECHANGELOG ADD COMMENTS VARCHAR(255)");
      }
      if (!hasLiquibase) {
        statementsToExecute.add("ALTER TABLE DATABASECHANGELOG ADD LIQUIBASE VARCHAR(255)");
      }
    }
 else {
      String createTableStatement=("CREATE TABLE DATABASECHANGELOG (id varchar(255) not null, author varchar(255) not null, filename varchar(255) not null, dateExecuted " + getDateTimeType() + " not null, md5sum varchar(32), description varchar(255), comments varchar(255), tag varchar(255), liquibase varchar(10), primary key(id, author, filename))").toUpperCase();
      statementsToExecute.add(createTableStatement);
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        log.info("Creating database history table with name: DATABASECHANGELOG");
      }
 else {
        changeLogTableExists=false;
      }
    }
    for (    String sql : statementsToExecute) {
      if (migrator.getMode().equals(Migrator.Mode.EXECUTE_MODE)) {
        statement=connection.createStatement();
        statement.executeUpdate(sql);
        connection.commit();
      }
 else {
        if (!migrator.getMode().equals(Migrator.Mode.OUTPUT_FUTURE_ROLLBACK_SQL_MODE)) {
          migrator.getOutputSQLWriter().append(sql + ";" + StreamUtil.getLineSeparator());
          wroteToOutput=true;
        }
      }
    }
    if (wroteToOutput) {
      migrator.getOutputSQLWriter().append(StreamUtil.getLineSeparator());
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(e);
  }
 finally {
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkTableRS != null) {
      try {
        checkTableRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
    if (checkColumnsRS != null) {
      try {
        checkColumnsRS.close();
      }
 catch (      SQLException e) {
        throw new JDBCException(e);
      }
    }
  }
}
